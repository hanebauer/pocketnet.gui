{"version":3,"file":"118.chunk.js?v=5159","mappings":"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","sources":["webpack://peertube-client/./src/assets/player/webtorrent/video-renderer.ts","webpack://peertube-client/./src/assets/player/webtorrent/peertube-chunk-store.ts","webpack://peertube-client/./src/assets/player/webtorrent/webtorrent-plugin.ts","webpack://peertube-client/./src/shims/http.ts","webpack://peertube-client/./src/shims/https.ts","webpack://peertube-client/./src/shims/noop.ts","webpack://peertube-client/./src/shims/stream.ts"],"sourcesContent":["// Thanks: https://github.com/feross/render-media\r\n// TODO: use render-media once https://github.com/feross/render-media/issues/32 is fixed\r\n\r\nconst MediaElementWrapper = require('mediasource')\r\nimport { extname } from 'path'\r\nconst videostream = require('videostream')\r\n\r\nconst VIDEOSTREAM_EXTS = [\r\n  '.m4a',\r\n  '.m4v',\r\n  '.mp4'\r\n]\r\n\r\ntype RenderMediaOptions = {\r\n  controls: boolean\r\n  autoplay: boolean\r\n}\r\n\r\nfunction renderVideo (\r\n  file: any,\r\n  elem: HTMLVideoElement,\r\n  opts: RenderMediaOptions,\r\n  callback: (err: Error, renderer: any) => void\r\n) {\r\n  validateFile(file)\r\n\r\n  return renderMedia(file, elem, opts, callback)\r\n}\r\n\r\nfunction renderMedia (file: any, elem: HTMLVideoElement, opts: RenderMediaOptions, callback: (err: Error, renderer?: any) => void) {\r\n  const extension = extname(file.name).toLowerCase()\r\n  let preparedElem: any\r\n  let currentTime = 0\r\n  let renderer: any\r\n\r\n  try {\r\n    if (VIDEOSTREAM_EXTS.indexOf(extension) >= 0) {\r\n      renderer = useVideostream()\r\n    } else {\r\n      renderer = useMediaSource()\r\n    }\r\n  } catch (err) {\r\n    return callback(err)\r\n  }\r\n\r\n  function useVideostream () {\r\n    prepareElem()\r\n\r\n\r\n    preparedElem.addEventListener('error', function onError (err: Error) {\r\n      preparedElem.removeEventListener('error', onError)\r\n\r\n      return callback(err)\r\n    })\r\n\r\n\r\n    preparedElem.addEventListener('loadedmetadata', onLoadStart)\r\n    return new videostream(file, preparedElem)\r\n  }\r\n\r\n  function useMediaSource (useVP9 = false) {\r\n    const codecs = getCodec(file.name, useVP9)\r\n\r\n\r\n    prepareElem()\r\n    preparedElem.addEventListener('error', function onError (err: Error) {\r\n      preparedElem.removeEventListener('error', onError)\r\n\r\n      // Try with vp9 before returning an error\r\n      if (codecs.indexOf('vp8') !== -1) return fallbackToMediaSource(true)\r\n\r\n      return callback(err)\r\n    })\r\n    preparedElem.addEventListener('loadedmetadata', onLoadStart)\r\n\r\n    const wrapper = new MediaElementWrapper(preparedElem)\r\n    const writable = wrapper.createWriteStream(codecs)\r\n    file.createReadStream().pipe(writable)\r\n\r\n    if (currentTime) preparedElem.currentTime = currentTime\r\n\r\n    return wrapper\r\n  }\r\n\r\n  function fallbackToMediaSource (useVP9 = false) {\r\n    if (useVP9 === true) console.log('Falling back to media source with VP9 enabled.')\r\n    else console.log('Falling back to media source..')\r\n\r\n    useMediaSource(useVP9)\r\n  }\r\n\r\n  function prepareElem () {\r\n    if (preparedElem === undefined) {\r\n      preparedElem = elem\r\n\r\n      preparedElem.addEventListener('progress', function () {\r\n        currentTime = elem.currentTime\r\n      })\r\n    }\r\n  }\r\n\r\n  function onLoadStart () {\r\n    preparedElem.removeEventListener('loadedmetadata', onLoadStart)\r\n\r\n\r\n    if (opts.autoplay) preparedElem.play()\r\n\r\n    callback(null, renderer)\r\n  }\r\n}\r\n\r\nfunction validateFile (file: any) {\r\n  if (file == null) {\r\n    throw new Error('file cannot be null or undefined')\r\n  }\r\n  if (typeof file.name !== 'string') {\r\n    throw new Error('missing or invalid file.name property')\r\n  }\r\n  if (typeof file.createReadStream !== 'function') {\r\n    throw new Error('missing or invalid file.createReadStream property')\r\n  }\r\n}\r\n\r\nfunction getCodec (name: string, useVP9 = false) {\r\n  const ext = extname(name).toLowerCase()\r\n  if (ext === '.mp4') {\r\n    return 'video/mp4; codecs=\"avc1.640029, mp4a.40.5\"'\r\n  }\r\n\r\n  if (ext === '.webm') {\r\n    if (useVP9 === true) return 'video/webm; codecs=\"vp9, opus\"'\r\n\r\n    return 'video/webm; codecs=\"vp8, vorbis\"'\r\n  }\r\n\r\n  return undefined\r\n}\r\n\r\nexport {\r\n  renderVideo\r\n}\r\n","// From https://github.com/MinEduTDF/idb-chunk-store\r\n// We use temporary IndexDB (all data are removed on destroy) to avoid RAM issues\r\n// Thanks @santiagogil and @Feross\r\n\r\nimport { EventEmitter } from 'events'\r\nimport Dexie from 'dexie'\r\n\r\nclass ChunkDatabase extends Dexie {\r\n  chunks: Dexie.Table<{ id: number, buf: Buffer }, number>\r\n\r\n  constructor (dbname: string) {\r\n    super(dbname)\r\n\r\n    this.version(1).stores({\r\n      chunks: 'id'\r\n    })\r\n  }\r\n}\r\n\r\nclass ExpirationDatabase extends Dexie {\r\n  databases: Dexie.Table<{ name: string, expiration: number }, number>\r\n\r\n  constructor () {\r\n    super('webtorrent-expiration')\r\n\r\n    this.version(1).stores({\r\n      databases: 'name,expiration'\r\n    })\r\n  }\r\n}\r\n\r\nexport class PeertubeChunkStore extends EventEmitter {\r\n  private static readonly BUFFERING_PUT_MS = 1000\r\n  private static readonly CLEANER_INTERVAL_MS = 1000 * 60 // 1 minute\r\n  private static readonly CLEANER_EXPIRATION_MS = 1000 * 60 * 5 // 5 minutes\r\n\r\n  chunkLength: number\r\n\r\n  private pendingPut: { id: number, buf: Buffer, cb: Function }[] = []\r\n  // If the store is full\r\n  private memoryChunks: { [ id: number ]: Buffer | true } = {}\r\n  private databaseName: string\r\n  private putBulkTimeout: any\r\n  private cleanerInterval: any\r\n  private db: ChunkDatabase\r\n  private expirationDB: ExpirationDatabase\r\n  private readonly length: number\r\n  private readonly lastChunkLength: number\r\n  private readonly lastChunkIndex: number\r\n\r\n  constructor (chunkLength: number, opts: any) {\r\n    super()\r\n\r\n    this.databaseName = 'webtorrent-chunks-'\r\n\r\n    if (!opts) opts = {}\r\n    if (opts.torrent && opts.torrent.infoHash) this.databaseName += opts.torrent.infoHash\r\n    else this.databaseName += '-default'\r\n\r\n    this.setMaxListeners(100)\r\n\r\n    this.chunkLength = Number(chunkLength)\r\n    if (!this.chunkLength) throw new Error('First argument must be a chunk length')\r\n\r\n    this.length = Number(opts.length) || Infinity\r\n\r\n    if (this.length !== Infinity) {\r\n      this.lastChunkLength = (this.length % this.chunkLength) || this.chunkLength\r\n      this.lastChunkIndex = Math.ceil(this.length / this.chunkLength) - 1\r\n    }\r\n\r\n    this.db = new ChunkDatabase(this.databaseName)\r\n    // Track databases that expired\r\n    this.expirationDB = new ExpirationDatabase()\r\n\r\n    this.runCleaner()\r\n  }\r\n\r\n  put (index: number, buf: Buffer, cb: (err?: Error) => void) {\r\n    const isLastChunk = (index === this.lastChunkIndex)\r\n    if (isLastChunk && buf.length !== this.lastChunkLength) {\r\n      return this.nextTick(cb, new Error('Last chunk length must be ' + this.lastChunkLength))\r\n    }\r\n    if (!isLastChunk && buf.length !== this.chunkLength) {\r\n      return this.nextTick(cb, new Error('Chunk length must be ' + this.chunkLength))\r\n    }\r\n\r\n    // Specify we have this chunk\r\n    this.memoryChunks[index] = true\r\n\r\n    // Add it to the pending put\r\n    this.pendingPut.push({ id: index, buf, cb })\r\n    // If it's already planned, return\r\n    if (this.putBulkTimeout) return\r\n\r\n    // Plan a future bulk insert\r\n    this.putBulkTimeout = setTimeout(async () => {\r\n      const processing = this.pendingPut\r\n      this.pendingPut = []\r\n      this.putBulkTimeout = undefined\r\n\r\n      try {\r\n        await this.db.transaction('rw', this.db.chunks, () => {\r\n          return this.db.chunks.bulkPut(processing.map(p => ({ id: p.id, buf: p.buf })))\r\n        })\r\n      } catch (err) {\r\n        console.log('Cannot bulk insert chunks. Store them in memory.', { err })\r\n\r\n        processing.forEach(p => this.memoryChunks[ p.id ] = p.buf)\r\n      } finally {\r\n        processing.forEach(p => p.cb())\r\n      }\r\n    }, PeertubeChunkStore.BUFFERING_PUT_MS)\r\n  }\r\n\r\n  get (index: number, opts: any, cb: (err?: Error, buf?: Buffer) => void): void {\r\n    if (typeof opts === 'function') return this.get(index, null, opts)\r\n\r\n    // IndexDB could be slow, use our memory index first\r\n    const memoryChunk = this.memoryChunks[index]\r\n    if (memoryChunk === undefined) {\r\n      const err = new Error('Chunk not found') as any\r\n      err['notFound'] = true\r\n\r\n      return process.nextTick(() => cb(err))\r\n    }\r\n\r\n    // Chunk in memory\r\n    if (memoryChunk !== true) return cb(null, memoryChunk)\r\n\r\n    // Chunk in store\r\n    this.db.transaction('r', this.db.chunks, async () => {\r\n      const result = await this.db.chunks.get({ id: index })\r\n      if (result === undefined) return cb(null, Buffer.alloc(0))\r\n\r\n      const buf = result.buf\r\n      if (!opts) return this.nextTick(cb, null, buf)\r\n\r\n      const offset = opts.offset || 0\r\n      const len = opts.length || (buf.length - offset)\r\n      return cb(null, buf.slice(offset, len + offset))\r\n    })\r\n    .catch(err => {\r\n      console.error(err)\r\n      return cb(err)\r\n    })\r\n  }\r\n\r\n  close (cb: (err?: Error) => void) {\r\n    return this.destroy(cb)\r\n  }\r\n\r\n  async destroy (cb: (err?: Error) => void) {\r\n    try {\r\n      if (this.pendingPut) {\r\n        clearTimeout(this.putBulkTimeout)\r\n        this.pendingPut = null\r\n      }\r\n      if (this.cleanerInterval) {\r\n        clearInterval(this.cleanerInterval)\r\n        this.cleanerInterval = null\r\n      }\r\n\r\n      if (this.db) {\r\n        this.db.close()\r\n\r\n        await this.dropDatabase(this.databaseName)\r\n      }\r\n\r\n      if (this.expirationDB) {\r\n        this.expirationDB.close()\r\n        this.expirationDB = null\r\n      }\r\n\r\n      return cb()\r\n    } catch (err) {\r\n      console.error('Cannot destroy peertube chunk store.', err)\r\n      return cb(err)\r\n    }\r\n  }\r\n\r\n  private runCleaner () {\r\n    this.checkExpiration()\r\n\r\n    this.cleanerInterval = setInterval(async () => {\r\n      this.checkExpiration()\r\n    }, PeertubeChunkStore.CLEANER_INTERVAL_MS)\r\n  }\r\n\r\n  private async checkExpiration () {\r\n    let databasesToDeleteInfo: { name: string }[] = []\r\n\r\n    try {\r\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, async () => {\r\n        // Update our database expiration since we are alive\r\n        await this.expirationDB.databases.put({\r\n          name: this.databaseName,\r\n          expiration: new Date().getTime() + PeertubeChunkStore.CLEANER_EXPIRATION_MS\r\n        })\r\n\r\n        const now = new Date().getTime()\r\n        databasesToDeleteInfo = await this.expirationDB.databases.where('expiration').below(now).toArray()\r\n      })\r\n    } catch (err) {\r\n      console.error('Cannot update expiration of fetch expired databases.', err)\r\n    }\r\n\r\n    for (const databaseToDeleteInfo of databasesToDeleteInfo) {\r\n      await this.dropDatabase(databaseToDeleteInfo.name)\r\n    }\r\n  }\r\n\r\n  private async dropDatabase (databaseName: string) {\r\n    const dbToDelete = new ChunkDatabase(databaseName)\r\n    console.log('Destroying IndexDB database %s.', databaseName)\r\n\r\n    try {\r\n      await dbToDelete.delete()\r\n\r\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, () => {\r\n        return this.expirationDB.databases.where({ name: databaseName }).delete()\r\n      })\r\n    } catch (err) {\r\n      console.error('Cannot delete %s.', databaseName, err)\r\n    }\r\n  }\r\n\r\n  private nextTick <T> (cb: (err?: Error, val?: T) => void, err: Error, val?: T) {\r\n    process.nextTick(() => cb(err, val), undefined)\r\n  }\r\n}\r\n","import videojs from 'video.js'\r\nimport * as WebTorrent from 'webtorrent'\r\nimport { renderVideo } from './video-renderer'\r\nimport { LoadedQualityData, PlayerNetworkInfo, WebtorrentPluginOptions } from '../peertube-videojs-typings'\r\nimport { getRtcConfig, timeToInt, videoFileMaxByResolution, videoFileMinByResolution, isIOS, isSafari } from '../utils'\r\nimport { PeertubeChunkStore } from './peertube-chunk-store'\r\nimport {\r\n  getAverageBandwidthInStore,\r\n  getStoredMute,\r\n  getStoredP2PEnabled,\r\n  getStoredVolume,\r\n  saveAverageBandwidth\r\n} from '../peertube-player-local-storage'\r\nimport { VideoFile } from '@shared/models'\r\n\r\nconst CacheChunkStore = require('cache-chunk-store')\r\n\r\ntype PlayOptions = {\r\n  forcePlay?: boolean,\r\n  seek?: number,\r\n  delay?: number\r\n}\r\n\r\nconst Plugin = videojs.getPlugin('plugin')\r\n\r\nclass WebTorrentPlugin extends Plugin {\r\n  readonly videoFiles: VideoFile[]\r\n\r\n  private readonly playerElement: HTMLVideoElement\r\n\r\n  private readonly autoplay: boolean = false\r\n  private readonly startTime: number = 0\r\n  private readonly savePlayerSrcFunction: videojs.Player['src']\r\n  private readonly videoDuration: number\r\n  private readonly CONSTANTS = {\r\n    INFO_SCHEDULER: 1000, // Don't change this\r\n    AUTO_QUALITY_SCHEDULER: 3000, // Check quality every 3 seconds\r\n    AUTO_QUALITY_THRESHOLD_PERCENT: 30, // Bandwidth should be 30% more important than a resolution bitrate to change to it\r\n    AUTO_QUALITY_OBSERVATION_TIME: 10000, // Wait 10 seconds after having change the resolution before another check\r\n    AUTO_QUALITY_HIGHER_RESOLUTION_DELAY: 5000, // Buffering higher resolution during 5 seconds\r\n    BANDWIDTH_AVERAGE_NUMBER_OF_VALUES: 5 // Last 5 seconds to build average bandwidth\r\n  }\r\n\r\n  private readonly webtorrent = new WebTorrent({\r\n    tracker: {\r\n      rtcConfig: getRtcConfig()\r\n    },\r\n    dht: false\r\n  })\r\n\r\n  private currentVideoFile: VideoFile\r\n  private torrent: WebTorrent.Torrent\r\n\r\n  private renderer: any\r\n  private fakeRenderer: any\r\n  private destroyingFakeRenderer = false\r\n\r\n  private autoResolution = true\r\n  private autoResolutionPossible = true\r\n  private isAutoResolutionObservation = false\r\n  private playerRefusedP2P = false\r\n\r\n  private torrentInfoInterval: any\r\n  private autoQualityInterval: any\r\n  private addTorrentDelay: any\r\n  private qualityObservationTimer: any\r\n  private runAutoQualitySchedulerTimer: any\r\n\r\n  private downloadSpeeds: number[] = []\r\n\r\n  constructor (player: videojs.Player, options?: WebtorrentPluginOptions) {\r\n    super(player)\r\n\r\n    this.startTime = timeToInt(options.startTime)\r\n\r\n    // Disable auto play on iOS\r\n    this.autoplay = options.autoplay\r\n    this.playerRefusedP2P = !getStoredP2PEnabled()\r\n\r\n    this.videoFiles = options.videoFiles\r\n    this.videoDuration = options.videoDuration\r\n\r\n    this.savePlayerSrcFunction = this.player.src\r\n    this.playerElement = options.playerElement\r\n\r\n    this.player.ready(() => {\r\n      const playerOptions = this.player.options_\r\n\r\n      /*const volume = getStoredVolume()\r\n      if (volume !== undefined) this.player.volume(volume)\r\n\r\n      const muted = playerOptions.muted !== undefined ? playerOptions.muted : getStoredMute()\r\n      if (muted !== undefined) this.player.muted(muted)*/\r\n\r\n      this.player.duration(options.videoDuration)\r\n\r\n      this.initializePlayer()\r\n      this.runTorrentInfoScheduler()\r\n\r\n      this.player.one('play', () => {\r\n        // Don't run immediately scheduler, wait some seconds the TCP connections are made\r\n        this.runAutoQualitySchedulerTimer = setTimeout(() => this.runAutoQualityScheduler(), this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\r\n      })\r\n    })\r\n  }\r\n\r\n  dispose () {\r\n    clearTimeout(this.addTorrentDelay)\r\n    clearTimeout(this.qualityObservationTimer)\r\n    clearTimeout(this.runAutoQualitySchedulerTimer)\r\n\r\n    clearInterval(this.torrentInfoInterval)\r\n    clearInterval(this.autoQualityInterval)\r\n\r\n    // Don't need to destroy renderer, video player will be destroyed\r\n    this.flushVideoFile(this.currentVideoFile, false)\r\n\r\n    this.destroyFakeRenderer()\r\n  }\r\n\r\n  getCurrentResolutionId () {\r\n    return this.currentVideoFile ? this.currentVideoFile.resolution.id : -1\r\n  }\r\n\r\n  updateVideoFile (\r\n    videoFile?: VideoFile,\r\n    options: {\r\n      forcePlay?: boolean,\r\n      seek?: number,\r\n      delay?: number\r\n    } = {},\r\n    done: () => void = () => { /* empty */ }\r\n  ) {\r\n    // Automatically choose the adapted video file\r\n    if (!videoFile) {\r\n      const savedAverageBandwidth = getAverageBandwidthInStore()\r\n      videoFile = savedAverageBandwidth\r\n        ? this.getAppropriateFile(savedAverageBandwidth)\r\n        : this.pickAverageVideoFile()\r\n    }\r\n\r\n    if (!videoFile) {\r\n      \r\n      throw Error(`Can't update video file since videoFile is undefined.`)\r\n\r\n      /*\r\n\r\n      const error: { message: string, code?: number } = {\r\n        message: \"Can't update video file since videoFile is undefined.\"\r\n      }\r\n\r\n      this.player.tech(true).error = () => error as any\r\n      this.player.tech(true).trigger('error')\r\n\r\n      return\r\n\r\n\r\n      */\r\n    }\r\n\r\n    // Don't add the same video file once again\r\n    if (this.currentVideoFile !== undefined && this.currentVideoFile.magnetUri === videoFile.magnetUri) {\r\n      return\r\n    }\r\n\r\n    // Do not display error to user because we will have multiple fallback\r\n    this.disableErrorDisplay();\r\n\r\n    // Hack to \"simulate\" src link in video.js >= 6\r\n    // Without this, we can't play the video after pausing it\r\n    // https://github.com/videojs/video.js/blob/master/src/js/player.js#L1633\r\n    (this.player as any).src = () => true\r\n    const oldPlaybackRate = this.player.playbackRate()\r\n\r\n    const previousVideoFile = this.currentVideoFile\r\n    this.currentVideoFile = videoFile\r\n\r\n    // Don't try on iOS that does not support MediaSource\r\n    // Or don't use P2P if webtorrent is disabled\r\n    if (isIOS() || this.playerRefusedP2P) {\r\n      return this.fallbackToHttp(options, () => {\r\n        this.player.playbackRate(oldPlaybackRate)\r\n        return done()\r\n      })\r\n    }\r\n\r\n\r\n    this.addTorrent(this.currentVideoFile.magnetUri, previousVideoFile, options, () => {\r\n      this.player.playbackRate(oldPlaybackRate)\r\n      return done()\r\n    })\r\n\r\n    this.changeQuality()\r\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.currentVideoFile.resolution.id })\r\n  }\r\n\r\n  updateResolution (resolutionId: number, delay = 0) {\r\n    // Remember player state\r\n    const currentTime = this.player.currentTime()\r\n    const isPaused = this.player.paused()\r\n\r\n    // Hide bigPlayButton\r\n    if (!isPaused) {\r\n      this.player.bigPlayButton.hide()\r\n    }\r\n\r\n    // Audio-only (resolutionId === 0) gets special treatment\r\n    if (resolutionId === 0) {\r\n      // Audio-only: show poster, do not auto-hide controls\r\n      this.player.addClass('vjs-playing-audio-only-content')\r\n      this.player.posterImage.show()\r\n    } else {\r\n      // Hide poster to have black background\r\n      this.player.removeClass('vjs-playing-audio-only-content')\r\n      this.player.posterImage.hide()\r\n    }\r\n\r\n    const newVideoFile = this.videoFiles.find(f => f.resolution.id === resolutionId)\r\n    const options = {\r\n      forcePlay: false,\r\n      delay,\r\n      seek: currentTime + (delay / 1000)\r\n    }\r\n\r\n    this.updateVideoFile(newVideoFile, options)\r\n  }\r\n\r\n  flushVideoFile (videoFile: VideoFile, destroyRenderer = true) {\r\n    if (videoFile !== undefined && this.webtorrent.get(videoFile.magnetUri)) {\r\n      if (destroyRenderer === true && this.renderer && this.renderer.destroy) this.renderer.destroy()\r\n\r\n      this.webtorrent.remove(videoFile.magnetUri)\r\n    }\r\n  }\r\n\r\n  enableAutoResolution () {\r\n    this.autoResolution = true\r\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.getCurrentResolutionId() })\r\n  }\r\n\r\n  disableAutoResolution (forbid = false) {\r\n    if (forbid === true) this.autoResolutionPossible = false\r\n\r\n    this.autoResolution = false\r\n    this.trigger('autoResolutionChange', { possible: this.autoResolutionPossible })\r\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.getCurrentResolutionId() })\r\n  }\r\n\r\n  isAutoResolutionPossible () {\r\n    return this.autoResolutionPossible\r\n  }\r\n\r\n  getTorrent () {\r\n    return this.torrent\r\n  }\r\n\r\n  getCurrentVideoFile () {\r\n    return this.currentVideoFile\r\n  }\r\n\r\n  private addTorrent (\r\n    magnetOrTorrentUrl: string,\r\n    previousVideoFile: VideoFile,\r\n    options: PlayOptions,\r\n    done: Function\r\n  ) {\r\n    if (!magnetOrTorrentUrl) return this.fallbackToHttp(options, done)\r\n\r\n    const oldTorrent = this.torrent\r\n    const torrentOptions = {\r\n      // Don't use arrow function: it breaks webtorrent (that uses `new` keyword)\r\n      store: function (chunkLength: number, storeOpts: any) {\r\n        return new CacheChunkStore(new PeertubeChunkStore(chunkLength, storeOpts), {\r\n          max: 100\r\n        })\r\n      }\r\n    }\r\n\r\n    this.torrent = this.webtorrent.add(magnetOrTorrentUrl, torrentOptions, torrent => {\r\n      if (oldTorrent) {\r\n        // Pause the old torrent\r\n        this.stopTorrent(oldTorrent)\r\n\r\n        // We use a fake renderer so we download correct pieces of the next file\r\n        if(options.delay) \r\n          this.renderFileInFakeElement(torrent.files[ 0 ], options.delay)\r\n      }\r\n\r\n      // Render the video in a few seconds? (on resolution change for example, we wait some seconds of the new video resolution)\r\n      this.addTorrentDelay = setTimeout(() => {\r\n\r\n        // We don't need the fake renderer anymore\r\n        this.destroyFakeRenderer()\r\n\r\n        const paused = this.player.paused()\r\n\r\n        this.flushVideoFile(previousVideoFile)\r\n\r\n        // Update progress bar (just for the UI), do not wait rendering\r\n        if (options.seek) this.player.currentTime(options.seek)\r\n\r\n        const renderVideoOptions = { autoplay: false, controls: true }\r\n        renderVideo(torrent.files[ 0 ], this.playerElement, renderVideoOptions, (err, renderer) => {\r\n          this.renderer = renderer\r\n\r\n          if (err) return this.fallbackToHttp(options, done)\r\n\r\n          //this.playerElement.play()\r\n\r\n          setTimeout(() => {\r\n            return this.tryToPlay(err => {\r\n\r\n              if (err) return done(err)\r\n  \r\n              if (options.seek) this.seek(options.seek)\r\n              if (options.forcePlay === false && paused === true) this.player.pause()\r\n  \r\n              return done()\r\n            })\r\n          }, 10)\r\n         \r\n        })\r\n      }, options.delay || 0)\r\n    })\r\n\r\n    this.torrent.on('error', (err: any) => console.error(err))\r\n\r\n    this.torrent.on('warning', (err: any) => {\r\n\r\n      //// TEMP, TO DO\r\n\r\n      /*if (err.message.indexOf('Error connecting to wss') !== -1 || err.message.indexOf('Unsupported tracker protocol') !== -1) {\r\n        this.fallbackToHttp(options, done)\r\n        return\r\n      }*/\r\n\r\n      // We don't support HTTP tracker but we don't care -> we use the web socket tracker\r\n      if (err.message.indexOf('Unsupported tracker protocol') !== -1) return\r\n\r\n      // Users don't care about issues with WebRTC, but developers do so log it in the console\r\n      if (err.message.indexOf('Ice connection failed') !== -1) {\r\n        console.log(err)\r\n        return\r\n      }\r\n\r\n      // Magnet hash is not up to date with the torrent file, add directly the torrent file\r\n      if (err.message.indexOf('incorrect info hash') !== -1) {\r\n        console.error('Incorrect info hash detected, falling back to torrent file.')\r\n        const newOptions = { forcePlay: true, seek: options.seek }\r\n        return this.addTorrent(this.torrent[ 'xs' ], previousVideoFile, newOptions, done)\r\n      }\r\n\r\n      // Remote instance is down\r\n      if (err.message.indexOf('from xs param') !== -1) {\r\n        this.handleError(err)\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  private tryToPlay (done?: (err?: Error) => void) {\r\n\r\n    if (!done) done = function () {}\r\n\r\n    const playPromise = this.player.play()\r\n\r\n    if (playPromise !== undefined) {\r\n\r\n      return playPromise.then(() => done()).catch((err: Error) => {\r\n          if (err.message.indexOf('The play() request') !== -1) {\r\n            return\r\n          }\r\n\r\n          console.log(\"PAUSE\")\r\n          this.player.pause()\r\n          this.player.posterImage.show()\r\n          this.player.removeClass('vjs-has-autoplay')\r\n          this.player.removeClass('vjs-has-big-play-button-clicked')\r\n          this.player.removeClass('vjs-playing-audio-only-content')\r\n\r\n          return done()\r\n        })\r\n    }\r\n\r\n    return done()\r\n\r\n    \r\n  }\r\n\r\n  private seek (time: number) {\r\n    this.player.currentTime(time)\r\n    this.player.handleTechSeeked_()\r\n  }\r\n\r\n  private getAppropriateFile (averageDownloadSpeed?: number): VideoFile {\r\n    if (this.videoFiles === undefined) return undefined\r\n\r\n    const files = this.videoFiles.filter(f => f.resolution.id !== 0)\r\n\r\n    if (files.length === 0) return undefined\r\n    if (files.length === 1) return files[0]\r\n\r\n    // Don't change the torrent if the player ended\r\n    if (this.torrent && this.torrent.progress === 1 && this.player.ended()) return this.currentVideoFile\r\n\r\n    if (!averageDownloadSpeed) averageDownloadSpeed = this.getAndSaveActualDownloadSpeed()\r\n\r\n    // Limit resolution according to player height\r\n    const playerHeight = this.playerElement.offsetHeight\r\n\r\n    // We take the first resolution just above the player height\r\n    // Example: player height is 530px, we want the 720p file instead of 480p\r\n    let maxResolution = files[0].resolution.id\r\n    for (let i = files.length - 1; i >= 0; i--) {\r\n      const resolutionId = files[i].resolution.id\r\n      if (resolutionId !== 0 && resolutionId >= playerHeight) {\r\n        maxResolution = resolutionId\r\n        break\r\n      }\r\n    }\r\n\r\n    // Filter videos we can play according to our screen resolution and bandwidth\r\n    const filteredFiles = files.filter(f => f.resolution.id <= maxResolution)\r\n                               .filter(f => {\r\n                                 const fileBitrate = (f.size / this.videoDuration)\r\n                                 let threshold = fileBitrate\r\n\r\n                                 // If this is for a higher resolution or an initial load: add a margin\r\n                                 if (!this.currentVideoFile || f.resolution.id > this.currentVideoFile.resolution.id) {\r\n                                   threshold += ((fileBitrate * this.CONSTANTS.AUTO_QUALITY_THRESHOLD_PERCENT) / 100)\r\n                                 }\r\n\r\n                                 return averageDownloadSpeed > threshold\r\n                               })\r\n\r\n    // If the download speed is too bad, return the lowest resolution we have\r\n    if (filteredFiles.length === 0) return videoFileMinByResolution(files)\r\n\r\n    return videoFileMaxByResolution(filteredFiles)\r\n  }\r\n\r\n  private getAndSaveActualDownloadSpeed () {\r\n    const start = Math.max(this.downloadSpeeds.length - this.CONSTANTS.BANDWIDTH_AVERAGE_NUMBER_OF_VALUES, 0)\r\n    const lastDownloadSpeeds = this.downloadSpeeds.slice(start, this.downloadSpeeds.length)\r\n    if (lastDownloadSpeeds.length === 0) return -1\r\n\r\n    const sum = lastDownloadSpeeds.reduce((a, b) => a + b)\r\n    const averageBandwidth = Math.round(sum / lastDownloadSpeeds.length)\r\n\r\n    // Save the average bandwidth for future use\r\n    saveAverageBandwidth(averageBandwidth)\r\n\r\n    return averageBandwidth\r\n  }\r\n\r\n  private initializePlayer () {\r\n    this.buildQualities()\r\n\r\n    if (this.autoplay) {\r\n      this.player.posterImage.hide()\r\n\r\n      return this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\r\n    }\r\n\r\n    // Proxy first play\r\n    const oldPlay = this.player.play.bind(this.player);\r\n    (this.player as any).play = () => {\r\n      this.player.addClass('vjs-has-big-play-button-clicked')\r\n      this.player.play = oldPlay\r\n\r\n      this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\r\n    }\r\n  }\r\n\r\n  private runAutoQualityScheduler () {\r\n    this.autoQualityInterval = setInterval(() => {\r\n\r\n      // Not initialized or in HTTP fallback\r\n      if (this.torrent === undefined || this.torrent === null) return\r\n      if (this.autoResolution === false) return\r\n      if (this.isAutoResolutionObservation === true) return\r\n\r\n      const file = this.getAppropriateFile()\r\n      let changeResolution = false\r\n      let changeResolutionDelay = 0\r\n\r\n      // Lower resolution\r\n      if (this.isPlayerWaiting() && file.resolution.id < this.currentVideoFile.resolution.id) {\r\n        changeResolution = true\r\n      } else if (file.resolution.id > this.currentVideoFile.resolution.id) { // Higher resolution\r\n        changeResolution = true\r\n        changeResolutionDelay = this.CONSTANTS.AUTO_QUALITY_HIGHER_RESOLUTION_DELAY\r\n      }\r\n\r\n      if (changeResolution === true) {\r\n        this.updateResolution(file.resolution.id, changeResolutionDelay)\r\n\r\n        // Wait some seconds in observation of our new resolution\r\n        this.isAutoResolutionObservation = true\r\n\r\n        this.qualityObservationTimer = setTimeout(() => {\r\n          this.isAutoResolutionObservation = false\r\n        }, this.CONSTANTS.AUTO_QUALITY_OBSERVATION_TIME)\r\n      }\r\n    }, this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\r\n  }\r\n\r\n  private isPlayerWaiting () {\r\n    return this.player && this.player.hasClass('vjs-waiting')\r\n  }\r\n\r\n  private runTorrentInfoScheduler () {\r\n    this.torrentInfoInterval = setInterval(() => {\r\n      \r\n\r\n      // Not initialized yet\r\n      if (this.torrent === undefined) return\r\n\r\n      // Http fallback\r\n      if (this.torrent === null) return this.player.trigger('p2pInfo', false)\r\n\r\n      // this.webtorrent.downloadSpeed because we need to take into account the potential old torrent too\r\n      if (this.webtorrent.downloadSpeed !== 0) this.downloadSpeeds.push(this.webtorrent.downloadSpeed)\r\n\r\n    \r\n\r\n      return this.player.trigger('p2pInfo', {\r\n        source: 'webtorrent',\r\n        http: {\r\n          downloadSpeed: 0,\r\n          uploadSpeed: 0,\r\n          downloaded: 0,\r\n          uploaded: 0\r\n        },\r\n        p2p: {\r\n          downloadSpeed: this.torrent.downloadSpeed,\r\n          numPeers: this.torrent.numPeers,\r\n          uploadSpeed: this.torrent.uploadSpeed,\r\n          downloaded: this.torrent.downloaded,\r\n          uploaded: this.torrent.uploaded\r\n        }\r\n      } as PlayerNetworkInfo)\r\n    }, this.CONSTANTS.INFO_SCHEDULER)\r\n  }\r\n\r\n  private fallbackToHttp (options: PlayOptions, done?: Function) {\r\n\r\n\r\n    const paused = this.player.paused()\r\n\r\n    this.disableAutoResolution(true)\r\n\r\n    this.flushVideoFile(this.currentVideoFile, true)\r\n    this.torrent = null\r\n\r\n    // Enable error display now this is our last fallback\r\n    this.player.one('error', () => this.enableErrorDisplay())\r\n\r\n    const httpUrl = this.currentVideoFile.fileUrl\r\n    this.player.src = this.savePlayerSrcFunction\r\n    this.player.src(httpUrl)\r\n\r\n    this.changeQuality()\r\n\r\n    // We changed the source, so reinit captions\r\n    this.player.trigger('sourcechange')\r\n\r\n    return this.tryToPlay(err => {\r\n\r\n      if (err && done) return done(err)\r\n\r\n      if (options.seek) this.seek(options.seek)\r\n      if (options.forcePlay === false && paused === true) {\r\n        console.log(\"PLAUSE\")\r\n        this.player.pause()\r\n      }\r\n\r\n      if (done) return done()\r\n    })\r\n  }\r\n\r\n  private handleError (err: Error | string) {\r\n    return this.player.trigger('customError', { err })\r\n  }\r\n\r\n  private enableErrorDisplay () {\r\n    this.player.addClass('vjs-error-display-enabled')\r\n  }\r\n\r\n  private disableErrorDisplay () {\r\n    this.player.removeClass('vjs-error-display-enabled')\r\n  }\r\n\r\n  private pickAverageVideoFile () {\r\n    if (this.videoFiles.length === 1) return this.videoFiles[0]\r\n\r\n    return this.videoFiles[Math.floor(this.videoFiles.length / 2)]\r\n  }\r\n\r\n  private stopTorrent (torrent: WebTorrent.Torrent) {\r\n    torrent.pause()\r\n    // Pause does not remove actual peers (in particular the webseed peer)\r\n    torrent.removePeer(torrent[ 'ws' ])\r\n  }\r\n\r\n  private renderFileInFakeElement (file: WebTorrent.TorrentFile, delay: number) {\r\n    this.destroyingFakeRenderer = false\r\n\r\n    const fakeVideoElem = document.createElement('video')\r\n    renderVideo(file, fakeVideoElem, { autoplay: false, controls: false }, (err, renderer) => {\r\n      this.fakeRenderer = renderer\r\n\r\n      // The renderer returns an error when we destroy it, so skip them\r\n      if (this.destroyingFakeRenderer === false && err) {\r\n        console.error('Cannot render new torrent in fake video element.', err)\r\n      }\r\n\r\n      // Load the future file at the correct time (in delay MS - 2 seconds)\r\n      fakeVideoElem.currentTime = this.player.currentTime() + (delay - 2000)\r\n    })\r\n  }\r\n\r\n  private destroyFakeRenderer () {\r\n    if (this.fakeRenderer) {\r\n      this.destroyingFakeRenderer = true\r\n\r\n      if (this.fakeRenderer.destroy) {\r\n        try {\r\n          this.fakeRenderer.destroy()\r\n        } catch (err) {\r\n          console.log('Cannot destroy correctly fake renderer.', err)\r\n        }\r\n      }\r\n      this.fakeRenderer = undefined\r\n    }\r\n  }\r\n\r\n  private buildQualities () {\r\n    const qualityLevelsPayload = []\r\n\r\n    for (const file of this.videoFiles) {\r\n      const representation = {\r\n        id: file.resolution.id,\r\n        label: this.buildQualityLabel(file),\r\n        height: file.resolution.id,\r\n        _enabled: true\r\n      }\r\n\r\n      this.player.qualityLevels().addQualityLevel(representation)\r\n\r\n      qualityLevelsPayload.push({\r\n        id: representation.id,\r\n        label: representation.label,\r\n        selected: false\r\n      })\r\n    }\r\n\r\n    const payload: LoadedQualityData = {\r\n      qualitySwitchCallback: (d: any) => this.qualitySwitchCallback(d),\r\n      qualityData: {\r\n        video: qualityLevelsPayload\r\n      }\r\n    }\r\n    this.player.tech(true).trigger('loadedqualitydata', payload)\r\n  }\r\n\r\n  private buildQualityLabel (file: VideoFile) {\r\n    let label = file.resolution.label\r\n\r\n    if (file.fps && file.fps >= 50) {\r\n      label += file.fps\r\n    }\r\n\r\n    return label\r\n  }\r\n\r\n  private qualitySwitchCallback (id: number) {\r\n    if (id === -1) {\r\n      if (this.autoResolutionPossible === true) this.enableAutoResolution()\r\n      return\r\n    }\r\n\r\n    this.disableAutoResolution()\r\n    this.updateResolution(id)\r\n  }\r\n\r\n  private changeQuality () {\r\n    const resolutionId = this.currentVideoFile.resolution.id\r\n    const qualityLevels = this.player.qualityLevels()\r\n\r\n    /*if (resolutionId === -1) {\r\n      qualityLevels.selectedIndex = -1\r\n      return\r\n    }*/\r\n\r\n    for (let i = 0; i < qualityLevels.length; i++) {\r\n      const q = qualityLevels[i]\r\n      if (q.height === resolutionId) qualityLevels.selectedIndex_ = i\r\n    }\r\n  }\r\n}\r\n\r\nvideojs.registerPlugin('webtorrent', WebTorrentPlugin)\r\nexport { WebTorrentPlugin }\r\n","module.exports = require('stream-http')\r\n","module.exports = require('https-browserify')\r\n","// Does nothing. Used to shim out node.js modules\r\n// which are no-ops in the browser.\r\nexport const NOOP = 0\r\n","module.exports = require('stream-browserify')"],"names":["MediaElementWrapper","require","videostream","VIDEOSTREAM_EXTS","renderVideo","file","elem","opts","callback","Error","name","createReadStream","validateFile","extension","extname","toLowerCase","preparedElem","renderer","currentTime","indexOf","useVideostream","useMediaSource","err","prepareElem","addEventListener","onError","removeEventListener","onLoadStart","useVP9","codecs","getCodec","fallbackToMediaSource","wrapper","writable","createWriteStream","pipe","console","log","undefined","autoplay","play","renderMedia","ext","ChunkDatabase","dbname","version","stores","chunks","Dexie","ExpirationDatabase","databases","PeertubeChunkStore","chunkLength","pendingPut","memoryChunks","databaseName","torrent","infoHash","setMaxListeners","Number","length","Infinity","lastChunkLength","lastChunkIndex","Math","ceil","db","expirationDB","runCleaner","index","buf","cb","isLastChunk","this","nextTick","push","id","putBulkTimeout","setTimeout","__awaiter","processing","transaction","bulkPut","map","p","forEach","BUFFERING_PUT_MS","get","memoryChunk","process","result","Buffer","alloc","offset","len","slice","catch","error","destroy","clearTimeout","cleanerInterval","clearInterval","close","dropDatabase","checkExpiration","setInterval","CLEANER_INTERVAL_MS","databasesToDeleteInfo","put","expiration","Date","getTime","CLEANER_EXPIRATION_MS","now","where","below","toArray","databaseToDeleteInfo","dbToDelete","delete","val","EventEmitter","CacheChunkStore","WebTorrentPlugin","player","options","startTime","CONSTANTS","INFO_SCHEDULER","AUTO_QUALITY_SCHEDULER","AUTO_QUALITY_THRESHOLD_PERCENT","AUTO_QUALITY_OBSERVATION_TIME","AUTO_QUALITY_HIGHER_RESOLUTION_DELAY","BANDWIDTH_AVERAGE_NUMBER_OF_VALUES","webtorrent","WebTorrent","tracker","rtcConfig","getRtcConfig","dht","destroyingFakeRenderer","autoResolution","autoResolutionPossible","isAutoResolutionObservation","playerRefusedP2P","downloadSpeeds","timeToInt","getStoredP2PEnabled","videoFiles","videoDuration","savePlayerSrcFunction","src","playerElement","ready","options_","duration","initializePlayer","runTorrentInfoScheduler","one","runAutoQualitySchedulerTimer","runAutoQualityScheduler","addTorrentDelay","qualityObservationTimer","torrentInfoInterval","autoQualityInterval","flushVideoFile","currentVideoFile","destroyFakeRenderer","resolution","videoFile","done","savedAverageBandwidth","getAverageBandwidthInStore","getAppropriateFile","pickAverageVideoFile","magnetUri","disableErrorDisplay","oldPlaybackRate","playbackRate","previousVideoFile","isIOS","fallbackToHttp","addTorrent","changeQuality","trigger","auto","resolutionId","delay","isPaused","paused","bigPlayButton","hide","addClass","posterImage","show","removeClass","newVideoFile","find","f","forcePlay","seek","updateVideoFile","destroyRenderer","remove","getCurrentResolutionId","forbid","possible","magnetOrTorrentUrl","oldTorrent","torrentOptions","store","storeOpts","max","add","stopTorrent","renderFileInFakeElement","files","controls","tryToPlay","pause","on","message","newOptions","handleError","playPromise","then","time","handleTechSeeked_","averageDownloadSpeed","filter","progress","ended","getAndSaveActualDownloadSpeed","playerHeight","offsetHeight","maxResolution","i","filteredFiles","fileBitrate","size","threshold","videoFileMinByResolution","videoFileMaxByResolution","start","lastDownloadSpeeds","sum","reduce","a","b","averageBandwidth","round","saveAverageBandwidth","buildQualities","oldPlay","bind","changeResolution","changeResolutionDelay","isPlayerWaiting","updateResolution","hasClass","downloadSpeed","source","http","uploadSpeed","downloaded","uploaded","p2p","numPeers","disableAutoResolution","enableErrorDisplay","httpUrl","fileUrl","floor","removePeer","fakeVideoElem","document","createElement","fakeRenderer","qualityLevelsPayload","representation","label","buildQualityLabel","height","_enabled","qualityLevels","addQualityLevel","selected","payload","qualitySwitchCallback","d","qualityData","video","tech","fps","enableAutoResolution","selectedIndex_","videojs","module","exports","NOOP"],"sourceRoot":""}