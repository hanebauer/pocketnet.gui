{"version":3,"file":"639.chunk.js?v=6995","mappings":"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","sources":["webpack://peertube-client/./src/assets/player/shared/p2p-media-loader/cap-level-controller.ts","webpack://peertube-client/./src/assets/player/shared/p2p-media-loader/hls-plugin.ts","webpack://peertube-client/./src/assets/player/shared/p2p-media-loader/p2p-media-loader-plugin.ts"],"sourcesContent":["//@ts-nocheck\r\n\r\nimport { Events } from 'hls.js/src/events';\r\n\r\nimport type {\r\n  BufferCodecsData,\r\n  MediaAttachingData,\r\n  FPSDropLevelCappingData,\r\n} from 'hls.js/src/types/events';\r\nimport type { ComponentAPI } from 'hls.js/src/types/component-api';\r\nimport type Hls from 'hls.js';\r\n\r\n\r\nclass CapLevelController implements ComponentAPI {\r\n  public autoLevelCapping: number;\r\n  public firstLevel: number;\r\n  public media: HTMLVideoElement | null;\r\n  public restrictedLevels: Array<number>;\r\n  public timer: number | undefined;\r\n  public paused: Boolean\r\n\r\n  private hls: Hls;\r\n\r\n  private streamController?: any;\r\n  public clientRect: { width: number; height: number } | null;\r\n  public clientRectLast: { width: number; height: number } | null;\r\n\r\n  constructor(hls: Hls) {\r\n    this.hls = hls;\r\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\r\n    this.firstLevel = -1;\r\n    this.media = null;\r\n    this.restrictedLevels = [];\r\n    this.timer = undefined;\r\n    this.clientRect = null;\r\n    this.paused = true\r\n\r\n    /*this.hls.pauseCapping = () => {\r\n        this.paused = true\r\n    }\r\n\r\n    this.hls.resumeCapping = () => {\r\n        this.paused = false\r\n    }*/\r\n\r\n    this.registerListeners();\r\n  }\r\n\r\n  public setStreamController(streamController: StreamController) {\r\n    this.streamController = streamController;\r\n  }\r\n\r\n  public destroy() {\r\n    this.unregisterListener();\r\n    if (this.hls.config.capLevelToPlayerSize) {\r\n      this.stopCapping();\r\n    }\r\n    this.media = null;\r\n    this.clientRect = null;\r\n    // @ts-ignore\r\n    this.hls = this.streamController = null;\r\n  }\r\n\r\n  protected registerListeners() {\r\n    const { hls } = this;\r\n    hls.on(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\r\n    hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\r\n    hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\r\n    hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);\r\n    hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\r\n  }\r\n\r\n  protected unregisterListener() {\r\n    const { hls } = this;\r\n    hls.off(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\r\n    hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\r\n    hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\r\n    hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\r\n    hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\r\n  }\r\n\r\n  protected onFpsDropLevelCapping(\r\n    event: Events.FPS_DROP_LEVEL_CAPPING,\r\n    data: FPSDropLevelCappingData\r\n  ) {\r\n    // Don't add a restricted level more than once\r\n    if (\r\n      CapLevelController.isLevelAllowed(\r\n        data.droppedLevel,\r\n        this.restrictedLevels\r\n      )\r\n    ) {\r\n      this.restrictedLevels.push(data.droppedLevel);\r\n    }\r\n  }\r\n\r\n  protected onMediaAttaching(\r\n    event: Events.MEDIA_ATTACHING,\r\n    data: MediaAttachingData\r\n  ) {\r\n    this.media = data.media instanceof HTMLVideoElement ? data.media : null;\r\n  }\r\n\r\n  protected onManifestParsed(\r\n    event: any,\r\n    data: any\r\n  ) {\r\n    const hls = this.hls;\r\n    this.restrictedLevels = [];\r\n    this.firstLevel = data.firstLevel;\r\n    if (hls.config.capLevelToPlayerSize && data.video) {\r\n      // Start capping immediately if the manifest has signaled video codecs\r\n      this.startCapping();\r\n    }\r\n  }\r\n\r\n  // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted\r\n  // to the first level\r\n  protected onBufferCodecs(\r\n    event: Events.BUFFER_CODECS,\r\n    data: BufferCodecsData\r\n  ) {\r\n    const hls = this.hls;\r\n    if (hls.config.capLevelToPlayerSize && data.video) {\r\n      // If the manifest did not signal a video codec capping has been deferred until we're certain video is present\r\n      this.startCapping();\r\n    }\r\n  }\r\n\r\n  protected onMediaDetaching() {\r\n    this.stopCapping();\r\n  }\r\n\r\n  detectPlayerSize() {\r\n    if (this.media && this.mediaHeight > 0 && this.mediaWidth > 0) {\r\n      const levels = this.hls.levels;\r\n      \r\n      if (levels.length) {\r\n        const hls = this.hls;\r\n        hls.autoLevelCapping = this.getMaxLevel(levels.length - 1);\r\n\r\n        if (\r\n          hls.autoLevelCapping > this.autoLevelCapping &&\r\n          this.streamController\r\n        ) {\r\n          // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch\r\n          // usually happen when the user go to the fullscreen mode.\r\n          this.streamController.nextLevelSwitch();\r\n        }\r\n        this.autoLevelCapping = hls.autoLevelCapping;\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)\r\n   */\r\n  getMaxLevel(capLevelIndex: number): number {\r\n    const levels = this.hls.levels;\r\n    if (!levels.length) {\r\n      return -1;\r\n    }\r\n\r\n    const validLevels = levels.filter(\r\n      (level, index) =>\r\n        CapLevelController.isLevelAllowed(index, this.restrictedLevels) &&\r\n        index <= capLevelIndex\r\n    );\r\n\r\n\r\n\r\n    this.clientRect = null;\r\n    return CapLevelController.getMaxLevelByMediaSize(\r\n      validLevels,\r\n      this.mediaWidth,\r\n      this.mediaHeight\r\n    );\r\n  }\r\n\r\n  capp(){\r\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\r\n    this.hls.firstLevel = this.getMaxLevel(this.firstLevel);\r\n    \r\n    this.detectPlayerSize();\r\n  }\r\n\r\n  startCapping() {\r\n    if (this.timer) {\r\n      // Don't reset capping if started twice; this can happen if the manifest signals a video codec\r\n      return;\r\n    }\r\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\r\n    this.hls.firstLevel = this.getMaxLevel(this.firstLevel);\r\n    self.clearInterval(this.timer);\r\n    this.timer = self.setInterval(this.detectPlayerSize.bind(this), 10000);\r\n    this.detectPlayerSize();\r\n  }\r\n\r\n  stopCapping() {\r\n    this.restrictedLevels = [];\r\n    this.firstLevel = -1;\r\n    //this.autoLevelCapping = Number.POSITIVE_INFINITY;\r\n    \r\n    if (this.timer) {\r\n      self.clearInterval(this.timer);\r\n      this.timer = undefined;\r\n    }\r\n  }\r\n\r\n\r\n  getDimensions(): { width: number; height: number } {\r\n\r\n    if (this.paused && this.clientRectLast){\r\n        return this.clientRectLast\r\n    }\r\n\r\n    if (this.clientRect) {\r\n      return this.clientRect;\r\n    }\r\n    const media = this.media;\r\n    const boundsRect = {\r\n      width: 0,\r\n      height: 0,\r\n    };\r\n\r\n    if (media) {\r\n      const clientRect = media.getBoundingClientRect();\r\n      boundsRect.width = clientRect.width;\r\n      boundsRect.height = clientRect.height;\r\n      if (!boundsRect.width && !boundsRect.height) {\r\n        // When the media element has no width or height (equivalent to not being in the DOM),\r\n        // then use its width and height attributes (media.width, media.height)\r\n        boundsRect.width =\r\n          clientRect.right - clientRect.left || media.width || 0;\r\n        boundsRect.height =\r\n          clientRect.bottom - clientRect.top || media.height || 0;\r\n      }\r\n    }\r\n\r\n    this.clientRectLast = this.clientRect = boundsRect;\r\n    \r\n    return boundsRect;\r\n  }\r\n\r\n  get mediaWidth(): number {\r\n    return this.getDimensions().width * this.contentScaleFactor;\r\n  }\r\n\r\n  get mediaHeight(): number {\r\n    return this.getDimensions().height * this.contentScaleFactor;\r\n  }\r\n\r\n  get contentScaleFactor(): number {\r\n    let pixelRatio = 1;\r\n    try {\r\n      pixelRatio = self.devicePixelRatio;\r\n    } catch (e) {\r\n      /* no-op */\r\n    }\r\n\r\n    if (pixelRatio > 1.5) pixelRatio = 1.5\r\n\r\n    return pixelRatio;\r\n  }\r\n\r\n  static isLevelAllowed(\r\n    level: number,\r\n    restrictedLevels: Array<number> = []\r\n  ): boolean {\r\n    return restrictedLevels.indexOf(level) === -1;\r\n  }\r\n\r\n  static getMaxLevelByMediaSize(\r\n    levels: Array<any>,\r\n    width: number,\r\n    height: number\r\n  ): number {\r\n    if (!levels || !levels.length) {\r\n      return -1;\r\n    }\r\n\r\n    // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next\r\n    // to determine whether we've chosen the greatest bandwidth for the media's dimensions\r\n    const atGreatestBandiwdth = (curLevel : any, nextLevel : any) => {\r\n      if (!nextLevel) {\r\n        return true;\r\n      }\r\n\r\n      return (\r\n        curLevel.width !== nextLevel.width ||\r\n        curLevel.height !== nextLevel.height\r\n      );\r\n    };\r\n\r\n\r\n    // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to\r\n    // the max level\r\n    let maxLevelIndex = levels.length - 1;\r\n\r\n    for (let i = 0; i < levels.length; i += 1) {\r\n      const level = levels[i];\r\n      if (\r\n        (level.width >= width || level.height >= height) &&\r\n        atGreatestBandiwdth(level, levels[i + 1])\r\n      ) {\r\n        maxLevelIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return maxLevelIndex;\r\n  }\r\n}\r\n\r\nexport default CapLevelController;\r\n","// Thanks https://github.com/streamroot/videojs-hlsjs-plugin\r\n// We duplicated this plugin to choose the hls.js version we want, because streamroot only provide a bundled file\r\n\r\nimport Hlsjs, { ErrorData, HlsConfig, Level, LevelSwitchingData, ManifestParsedData } from 'hls.js'\r\nimport videojs from 'video.js'\r\nimport { logger } from '@root-helpers/logger'\r\nimport { HlsjsConfigHandlerOptions, PeerTubeResolution, VideoJSTechHLS } from '../../types'\r\nimport CapLevelController from './cap-level-controller'\r\n\r\ntype ErrorCounts = {\r\n  [ type: string ]: number\r\n}\r\n\r\ntype Metadata = {\r\n  levels: Level[]\r\n}\r\n\r\ntype HookFn = (player: videojs.Player, hljs: Hlsjs) => void\r\n\r\nconst registerSourceHandler = function (vjs: typeof videojs) {\r\n  if (!Hlsjs.isSupported()) {\r\n    logger.warn('Hls.js is not supported in this browser!')\r\n    return\r\n  }\r\n\r\n  const html5 = vjs.getTech('Html5')\r\n\r\n  if (!html5) {\r\n    logger.error('No Hml5 tech found in videojs')\r\n    return\r\n  }\r\n\r\n  // FIXME: typings\r\n  (html5 as any).registerSourceHandler({\r\n    canHandleSource: function (source: videojs.Tech.SourceObject) {\r\n      const hlsTypeRE = /^application\\/x-mpegURL|application\\/vnd\\.apple\\.mpegurl$/i\r\n      const hlsExtRE = /\\.m3u8/i\r\n\r\n      if (hlsTypeRE.test(source.type)) return 'probably'\r\n      if (hlsExtRE.test(source.src)) return 'maybe'\r\n\r\n      return ''\r\n    },\r\n\r\n    handleSource: function (source: videojs.Tech.SourceObject, tech: VideoJSTechHLS) {\r\n      if (tech.hlsProvider) {\r\n        console.log(\"HERE\")\r\n        tech.hlsProvider.dispose()\r\n      }\r\n\r\n      console.log(\"???ASD\")\r\n\r\n      tech.hlsProvider = new Html5Hlsjs(vjs, source, tech)\r\n\r\n      return tech.hlsProvider\r\n    }\r\n  }, 0);\r\n\r\n  // FIXME: typings\r\n  (vjs as any).Html5Hlsjs = Html5Hlsjs\r\n}\r\n\r\nfunction hlsjsConfigHandler (this: videojs.Player, options: HlsjsConfigHandlerOptions) {\r\n  const player = this\r\n\r\n  if (!options) return\r\n\r\n  if (!player.srOptions_) {\r\n    player.srOptions_ = {}\r\n  }\r\n\r\n  if (!player.srOptions_.hlsjsConfig) {\r\n    player.srOptions_.hlsjsConfig = options.hlsjsConfig\r\n  }\r\n\r\n  \r\n\r\n  if (options.levelLabelHandler && !player.srOptions_.levelLabelHandler) {\r\n    player.srOptions_.levelLabelHandler = options.levelLabelHandler\r\n  }\r\n}\r\n\r\nconst registerConfigPlugin = function (vjs: typeof videojs) {\r\n  // Used in Brightcove since we don't pass options directly there\r\n  const registerVjsPlugin = vjs.registerPlugin || vjs.plugin\r\n  registerVjsPlugin('hlsjs', hlsjsConfigHandler)\r\n}\r\n\r\nclass Html5Hlsjs {\r\n  private static readonly hooks: { [id: string]: HookFn[] } = {}\r\n\r\n  private readonly videoElement: HTMLVideoElement\r\n  private readonly errorCounts: ErrorCounts = {}\r\n  private readonly player: videojs.Player\r\n  private readonly tech: videojs.Tech\r\n  private readonly source: videojs.Tech.SourceObject\r\n  private readonly vjs: typeof videojs\r\n\r\n  private maxNetworkErrorRecovery = 5\r\n\r\n  private hls: Hlsjs\r\n  private hlsjsConfig: Partial<HlsConfig & { cueHandler: any }> = null\r\n\r\n  private _duration: number = null\r\n  private metadata: Metadata = null\r\n  private isLive: boolean = null\r\n  private dvrDuration: number = null\r\n  private edgeMargin: number = null\r\n\r\n  private handlers: { [ id in 'play' ]: EventListener } = {\r\n    play: null\r\n  }\r\n\r\n  constructor (vjs: typeof videojs, source: videojs.Tech.SourceObject, tech: videojs.Tech) {\r\n    this.vjs = vjs\r\n    this.source = source\r\n\r\n    this.tech = tech;\r\n    (this.tech as any).name_ = 'Hlsjs'\r\n\r\n    this.videoElement = tech.el() as HTMLVideoElement\r\n    this.player = vjs((tech.options_ as any).playerId)\r\n\r\n    this.videoElement.addEventListener('error', event => {\r\n      let errorTxt: string\r\n      const mediaError = ((event.currentTarget || event.target) as HTMLVideoElement).error\r\n\r\n      if (!mediaError) return\r\n\r\n      logger.info(mediaError)\r\n      switch (mediaError.code) {\r\n        case mediaError.MEDIA_ERR_ABORTED:\r\n          errorTxt = 'You aborted the video playback'\r\n          break\r\n        case mediaError.MEDIA_ERR_DECODE:\r\n          errorTxt = 'The video playback was aborted due to a corruption problem or because the video used features ' +\r\n                     'your browser did not support'\r\n          this._handleMediaError(mediaError)\r\n          break\r\n        case mediaError.MEDIA_ERR_NETWORK:\r\n          errorTxt = 'A network error caused the video download to fail part-way'\r\n          break\r\n        case mediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\r\n          errorTxt = 'The video could not be loaded, either because the server or network failed or because the format is not supported'\r\n          break\r\n\r\n        default:\r\n          errorTxt = mediaError.message\r\n      }\r\n\r\n      logger.error(`MEDIA_ERROR: ${errorTxt}`)\r\n    })\r\n\r\n    this.initialize()\r\n  }\r\n\r\n  duration () {\r\n    if (this._duration === Infinity) return Infinity\r\n    if (!isNaN(this.videoElement.duration)) return this.videoElement.duration\r\n\r\n    return this._duration || 0\r\n  }\r\n\r\n  seekable () {\r\n    if (this.hls.media) {\r\n      if (!this.isLive) {\r\n        return this.vjs.createTimeRanges(0, this.hls.media.duration)\r\n      }\r\n\r\n      // Video.js doesn't seem to like floating point timeranges\r\n      const startTime = Math.round(this.hls.media.duration - this.dvrDuration)\r\n      const endTime = Math.round(this.hls.media.duration - this.edgeMargin)\r\n\r\n      return this.vjs.createTimeRanges(startTime, endTime)\r\n    }\r\n\r\n    return this.vjs.createTimeRanges()\r\n  }\r\n\r\n  // See comment for `initialize` method.\r\n  dispose () {\r\n    this.videoElement.removeEventListener('play', this.handlers.play)\r\n\r\n    // FIXME: https://github.com/video-dev/hls.js/issues/4092\r\n    const untypedHLS = this.hls as any\r\n    untypedHLS.log = untypedHLS.warn = () => {\r\n      // empty\r\n    }\r\n\r\n    console.log(\"DESTROY\", this.hls)\r\n\r\n    this.hls.destroy()\r\n  }\r\n\r\n  static addHook (type: string, callback: HookFn) {\r\n    Html5Hlsjs.hooks[type] = this.hooks[type] || []\r\n    Html5Hlsjs.hooks[type].push(callback)\r\n  }\r\n\r\n  static removeHook (type: string, callback: HookFn) {\r\n    if (Html5Hlsjs.hooks[type] === undefined) return false\r\n\r\n    const index = Html5Hlsjs.hooks[type].indexOf(callback)\r\n    if (index === -1) return false\r\n\r\n    Html5Hlsjs.hooks[type].splice(index, 1)\r\n\r\n    return true\r\n  }\r\n\r\n  private _executeHooksFor (type: string) {\r\n    if (Html5Hlsjs.hooks[type] === undefined) {\r\n      return\r\n    }\r\n\r\n    // ES3 and IE < 9\r\n    for (let i = 0; i < Html5Hlsjs.hooks[type].length; i++) {\r\n      Html5Hlsjs.hooks[type][i](this.player, this.hls)\r\n    }\r\n  }\r\n\r\n  private _handleMediaError (error: any) {\r\n\r\n    if(error.code == 3){\r\n\r\n      var time = this.player.currentTime() + 2\r\n\r\n      this.dispose()\r\n      this._initHlsjs()\r\n\r\n      this.player.currentTime(time)\r\n      this.player.play()\r\n      this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\r\n        this.player.play()\r\n      })\r\n\r\n\r\n      return\r\n    }\r\n\r\n    if (this.errorCounts[Hlsjs.ErrorTypes.MEDIA_ERROR] === 1) {\r\n      logger.info('trying to recover media error')\r\n      this.hls.recoverMediaError()\r\n      return\r\n    }\r\n\r\n    if (this.errorCounts[Hlsjs.ErrorTypes.MEDIA_ERROR] === 2) {\r\n      logger.info('2nd try to recover media error (by swapping audio codec')\r\n      this.hls.swapAudioCodec()\r\n      this.hls.recoverMediaError()\r\n      return\r\n    }\r\n\r\n    if (this.errorCounts[Hlsjs.ErrorTypes.MEDIA_ERROR] > 2) {\r\n      logger.info('bubbling media error up to VIDEOJS')\r\n      this.hls.destroy()\r\n      this.tech.error = () => error\r\n      this.tech.trigger('error')\r\n    }\r\n  }\r\n\r\n  private _handleNetworkError (error: any) {\r\n    if (this.errorCounts[Hlsjs.ErrorTypes.NETWORK_ERROR] <= this.maxNetworkErrorRecovery) {\r\n      logger.info('trying to recover network error')\r\n\r\n      // Wait 1 second and retry\r\n      setTimeout(() => this.hls.startLoad(), 1000)\r\n\r\n      // Reset error count on success\r\n      this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\r\n        this.errorCounts[Hlsjs.ErrorTypes.NETWORK_ERROR] = 0\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    logger.info('bubbling network error up to VIDEOJS')\r\n    this.hls.destroy()\r\n    this.tech.error = () => error\r\n    this.tech.trigger('error')\r\n  }\r\n\r\n  private _onError (_event: any, data: ErrorData) {\r\n    const error: { message: string, code?: number } = {\r\n      message: `HLS.js error: ${data.type} - fatal: ${data.fatal} - ${data.details}`\r\n    }\r\n\r\n    // increment/set error count\r\n    if (this.errorCounts[data.type]) this.errorCounts[data.type] += 1\r\n    else this.errorCounts[data.type] = 1\r\n\r\n    if (data.fatal) logger.warn(error.message)\r\n    else logger.error(error.message, { data })\r\n\r\n    if (data.type === Hlsjs.ErrorTypes.NETWORK_ERROR) {\r\n      error.code = 2\r\n      this._handleNetworkError(error)\r\n    } else if (data.fatal && data.type === Hlsjs.ErrorTypes.MEDIA_ERROR && data.details !== 'manifestIncompatibleCodecsError') {\r\n      error.code = 3\r\n      this._handleMediaError(error)\r\n    } else if (data.fatal) {\r\n      this.hls.destroy()\r\n      logger.info('bubbling error up to VIDEOJS')\r\n      this.tech.error = () => error as any\r\n      this.tech.trigger('error')\r\n    }\r\n  }\r\n\r\n  private buildLevelLabel (level: Level) {\r\n    if (this.player.srOptions_.levelLabelHandler) {\r\n      return this.player.srOptions_.levelLabelHandler(level as any)\r\n    }\r\n\r\n    if (level.height) return level.height + 'p'\r\n    if (level.width) return Math.round(level.width * 9 / 16) + 'p'\r\n    if (level.bitrate) return (level.bitrate / 1000) + 'kbps'\r\n\r\n    return '0'\r\n  }\r\n\r\n  private _notifyVideoQualities () {\r\n    if (!this.metadata) return\r\n\r\n    const resolutions: PeerTubeResolution[] = []\r\n\r\n    this.metadata.levels.forEach((level, index) => {\r\n      resolutions.push({\r\n        id: index,\r\n        height: level.height,\r\n        width: level.width,\r\n        bitrate: level.bitrate,\r\n        label: this.buildLevelLabel(level),\r\n        selected: level.id === this.hls.manualLevel,\r\n\r\n        selectCallback: () => {\r\n          this.hls.currentLevel = index\r\n        }\r\n      })\r\n    })\r\n\r\n    resolutions.push({\r\n      id: -1,\r\n      label: this.player.localize('Auto'),\r\n      selected: true,\r\n      selectCallback: () => this.hls.currentLevel = -1\r\n    })\r\n\r\n    this.player.peertubeResolutions().add(resolutions)\r\n  }\r\n\r\n  private _startLoad () {\r\n    this.hls.startLoad(-1)\r\n    this.videoElement.removeEventListener('play', this.handlers.play)\r\n  }\r\n\r\n  private _oneLevelObjClone (obj: { [ id: string ]: any }) {\r\n    const result = {}\r\n    const objKeys = Object.keys(obj)\r\n    for (let i = 0; i < objKeys.length; i++) {\r\n      result[objKeys[i]] = obj[objKeys[i]]\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  private _onMetaData (_event: any, data: ManifestParsedData) {\r\n    // This could arrive before 'loadedqualitydata' handlers is registered, remember it so we can raise it later\r\n    this.metadata = data\r\n    this._notifyVideoQualities()\r\n  }\r\n\r\n  private _initHlsjs () {\r\n    const techOptions = this.tech.options_ as HlsjsConfigHandlerOptions\r\n    const srOptions_ = this.player.srOptions_\r\n\r\n    const hlsjsConfigRef = srOptions_?.hlsjsConfig || techOptions.hlsjsConfig\r\n    // Hls.js will write to the reference thus change the object for later streams\r\n    this.hlsjsConfig = hlsjsConfigRef ? this._oneLevelObjClone(hlsjsConfigRef) : {}\r\n\r\n    if ([ '', 'auto' ].includes(this.videoElement.preload) && !this.videoElement.autoplay && this.hlsjsConfig.autoStartLoad === undefined) {\r\n      this.hlsjsConfig.autoStartLoad = false\r\n    }\r\n\r\n    // If the user explicitly sets autoStartLoad to false, we're not going to enter the if block above\r\n    // That's why we have a separate if block here to set the 'play' listener\r\n    if (this.hlsjsConfig.autoStartLoad === false) {\r\n      this.handlers.play = this._startLoad.bind(this)\r\n      this.videoElement.addEventListener('play', this.handlers.play)\r\n    }\r\n\r\n    //@ts-ignore\r\n    this.hlsjsConfig.capLevelController = CapLevelController\r\n\r\n    this.hls = new Hlsjs(this.hlsjsConfig)\r\n\r\n    //@ts-ignore\r\n    this.player.hls = this.hls;\r\n    //(this.player as any).hls = this.hls;\r\n\r\n    //this._executeHooksFor('beforeinitialize')\r\n\r\n    this.hls.on(Hlsjs.Events.ERROR, (event, data) => this._onError(event, data))\r\n    this.hls.on(Hlsjs.Events.MANIFEST_PARSED, (event, data) => this._onMetaData(event, data))\r\n    this.hls.on(Hlsjs.Events.LEVEL_LOADED, (event, data) => {\r\n      // The DVR plugin will auto seek to \"live edge\" on start up\r\n      if (this.hlsjsConfig.liveSyncDuration) {\r\n        this.edgeMargin = this.hlsjsConfig.liveSyncDuration\r\n      } else if (this.hlsjsConfig.liveSyncDurationCount) {\r\n        this.edgeMargin = this.hlsjsConfig.liveSyncDurationCount * data.details.targetduration\r\n      }\r\n\r\n      this.isLive = data.details.live\r\n      this.dvrDuration = data.details.totalduration\r\n\r\n      this._duration = this.isLive ? Infinity : data.details.totalduration\r\n\r\n      // Increase network error recovery for lives since they can be broken (server restart, stream interruption etc)\r\n      if (this.isLive) this.maxNetworkErrorRecovery = 300\r\n    })\r\n\r\n    this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\r\n      // Emit custom 'loadedmetadata' event for parity with `videojs-contrib-hls`\r\n      // Ref: https://github.com/videojs/videojs-contrib-hls#loadedmetadata\r\n      this.tech.trigger('loadedmetadata')\r\n    })\r\n\r\n    this.hls.on(Hlsjs.Events.LEVEL_SWITCHING, (_e, data: LevelSwitchingData) => {\r\n      const resolutionId = this.hls.autoLevelEnabled\r\n        ? -1\r\n        : data.level\r\n\r\n      const autoResolutionChosenId = this.hls.autoLevelEnabled\r\n        ? data.level\r\n        : -1\r\n\r\n      this.player.peertubeResolutions().select({ id: resolutionId, autoResolutionChosenId, byEngine: true })\r\n    })\r\n\r\n    this.hls.attachMedia(this.videoElement)\r\n\r\n    this.hls.loadSource(this.source.src)\r\n  }\r\n\r\n  private initialize () {\r\n    this._initHlsjs()\r\n  }\r\n}\r\n\r\nexport {\r\n  Html5Hlsjs,\r\n  registerSourceHandler,\r\n  registerConfigPlugin\r\n}\r\n","import Hlsjs from 'hls.js'\r\nimport videojs from 'video.js'\r\nimport { Events, Segment } from 'p2p-media-loader-core-basyton'\r\nimport { Engine, initHlsJsPlayer, initVideoJsContribHlsJsPlayer } from 'p2p-media-loader-hlsjs-basyton'\r\nimport { timeToInt } from '@shared/core-utils'\r\nimport { P2PMediaLoaderPluginOptions, PlayerNetworkInfo } from '../../types'\r\nimport { registerConfigPlugin, registerSourceHandler } from './hls-plugin'\r\nimport { logger } from '@root-helpers/logger'\r\n\r\nregisterConfigPlugin(videojs)\r\nregisterSourceHandler(videojs)\r\n\r\nconst Plugin = videojs.getPlugin('plugin')\r\nclass P2pMediaLoaderPlugin extends Plugin {\r\n\r\n  private readonly CONSTANTS = {\r\n    INFO_SCHEDULER: 1000 // Don't change this\r\n  }\r\n  private readonly options: P2PMediaLoaderPluginOptions\r\n\r\n  private hlsjs: Hlsjs\r\n  private p2pEngine: Engine\r\n  private statsP2PBytes = {\r\n    pendingDownload: [] as number[],\r\n    pendingUpload: [] as number[],\r\n    numPeers: 0,\r\n    totalDownload: 0,\r\n    totalUpload: 0\r\n  }\r\n  private statsHTTPBytes = {\r\n    pendingDownload: [] as number[],\r\n    pendingUpload: [] as number[],\r\n    totalDownload: 0,\r\n    totalUpload: 0\r\n  }\r\n  private startTime: number\r\n\r\n  private networkInfoInterval: any\r\n\r\n  constructor (player: videojs.Player, options?: P2PMediaLoaderPluginOptions | any) {\r\n    super(player)\r\n\r\n    this.options = options\r\n\r\n    if(!this.options) return\r\n\r\n\r\n    // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\r\n    if (!(videojs as any).Html5Hlsjs) {\r\n      logger.warn('HLS.js does not seem to be supported. Try to fallback to built in HLS.')\r\n\r\n      if (!player.canPlayType('application/vnd.apple.mpegurl')) {\r\n        const message = 'Cannot fallback to built-in HLS'\r\n        logger.warn(message)\r\n\r\n        player.ready(() => player.trigger('error', new Error(message)))\r\n        return\r\n      }\r\n    } else {\r\n      // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\r\n      /*(videojs as any).Html5Hlsjs.addHook('beforeinitialize', (videojsPlayer: any, hlsjs: any) => {\r\n\r\n        console.log('beforeinitialize')\r\n\r\n        this.hlsjs = hlsjs\r\n      })*/\r\n\r\n      initVideoJsContribHlsJsPlayer(player)\r\n    }\r\n\r\n    this.startTime = timeToInt(this.options.startTime)\r\n\r\n    player.src({\r\n      type: this.options.type,\r\n      src: this.options.src\r\n    })\r\n\r\n    player.ready(() => {\r\n      this.initializeCore()\r\n\r\n\r\n      this.hlsjs = (player as any).hls\r\n\r\n      if ((videojs as any).Html5Hlsjs) {\r\n        this.initializePlugin()\r\n      }\r\n    })\r\n  }\r\n\r\n  dispose () {\r\n\r\n    if (this.hlsjs) this.hlsjs.destroy()\r\n    if (this.p2pEngine) this.p2pEngine.destroy()\r\n\r\n    clearInterval(this.networkInfoInterval)\r\n  }\r\n\r\n  getCurrentLevel () {\r\n    return this.hlsjs.levels[this.hlsjs.currentLevel]\r\n  }\r\n\r\n  getLiveLatency () {\r\n    return Math.round(this.hlsjs.latency)\r\n  }\r\n\r\n  getHLSJS () {\r\n    return this.hlsjs\r\n  }\r\n\r\n  private initializeCore () {\r\n    this.player.one('play', () => {\r\n      this.player.addClass('vjs-has-big-play-button-clicked')\r\n    })\r\n\r\n    this.player.one('canplay', () => {\r\n      if (this.startTime) {\r\n        this.player.currentTime(this.startTime)\r\n      }\r\n    })\r\n  }\r\n\r\n  private initializePlugin () {\r\n    initHlsJsPlayer(this.hlsjs)\r\n\r\n    this.p2pEngine = this.options.loader.getEngine()\r\n\r\n    this.p2pEngine.on(Events.SegmentError, (segment: Segment, err) => {\r\n      logger.error(`Segment ${segment.id} error.`, err)\r\n\r\n      this.options.redundancyUrlManager.removeBySegmentUrl(segment.requestUrl)\r\n    })\r\n\r\n    this.statsP2PBytes.numPeers = 1 + this.options.redundancyUrlManager.countBaseUrls()\r\n\r\n    this.runStats()\r\n  }\r\n\r\n  private runStats () {\r\n    this.p2pEngine.on(Events.PieceBytesDownloaded, (method: string, _segment, bytes: number) => {\r\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\r\n\r\n      elem.pendingDownload.push(bytes)\r\n      elem.totalDownload += bytes\r\n    })\r\n\r\n    this.p2pEngine.on(Events.PieceBytesUploaded, (method: string, _segment, bytes: number) => {\r\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\r\n\r\n      elem.pendingUpload.push(bytes)\r\n      elem.totalUpload += bytes\r\n    })\r\n\r\n    this.p2pEngine.on(Events.PeerConnect, () => this.statsP2PBytes.numPeers++)\r\n    this.p2pEngine.on(Events.PeerClose, () => this.statsP2PBytes.numPeers--)\r\n\r\n    this.networkInfoInterval = setInterval(() => {\r\n      const p2pDownloadSpeed = this.arraySum(this.statsP2PBytes.pendingDownload)\r\n      const p2pUploadSpeed = this.arraySum(this.statsP2PBytes.pendingUpload)\r\n\r\n      const httpDownloadSpeed = this.arraySum(this.statsHTTPBytes.pendingDownload)\r\n      const httpUploadSpeed = this.arraySum(this.statsHTTPBytes.pendingUpload)\r\n\r\n      this.statsP2PBytes.pendingDownload = []\r\n      this.statsP2PBytes.pendingUpload = []\r\n      this.statsHTTPBytes.pendingDownload = []\r\n      this.statsHTTPBytes.pendingUpload = []\r\n\r\n      return this.player.trigger('p2pInfo', {\r\n        source: 'p2p-media-loader',\r\n        http: {\r\n          downloadSpeed: httpDownloadSpeed,\r\n          uploadSpeed: httpUploadSpeed,\r\n          downloaded: this.statsHTTPBytes.totalDownload,\r\n          uploaded: this.statsHTTPBytes.totalUpload\r\n        },\r\n        p2p: {\r\n          downloadSpeed: p2pDownloadSpeed,\r\n          uploadSpeed: p2pUploadSpeed,\r\n          numPeers: this.statsP2PBytes.numPeers,\r\n          downloaded: this.statsP2PBytes.totalDownload,\r\n          uploaded: this.statsP2PBytes.totalUpload\r\n        },\r\n        bandwidthEstimate: (this.hlsjs as any).bandwidthEstimate / 8\r\n      } as PlayerNetworkInfo)\r\n    }, this.CONSTANTS.INFO_SCHEDULER)\r\n  }\r\n\r\n  private arraySum (data: number[]) {\r\n    return data.reduce((a: number, b: number) => a + b, 0)\r\n  }\r\n}\r\n\r\nvideojs.registerPlugin('p2pMediaLoader', P2pMediaLoaderPlugin)\r\nexport { P2pMediaLoaderPlugin }\r\n"],"names":["CapLevelController","hls","this","autoLevelCapping","Number","POSITIVE_INFINITY","firstLevel","media","restrictedLevels","timer","undefined","clientRect","paused","registerListeners","level","indexOf","levels","width","height","length","maxLevelIndex","i","curLevel","nextLevel","streamController","unregisterListener","config","capLevelToPlayerSize","stopCapping","on","Events","onFpsDropLevelCapping","onMediaAttaching","onManifestParsed","onBufferCodecs","onMediaDetaching","off","event","data","isLevelAllowed","droppedLevel","push","HTMLVideoElement","video","startCapping","mediaHeight","mediaWidth","getMaxLevel","nextLevelSwitch","capLevelIndex","validLevels","filter","index","getMaxLevelByMediaSize","detectPlayerSize","self","clearInterval","setInterval","bind","clientRectLast","boundsRect","getBoundingClientRect","right","left","bottom","top","getDimensions","contentScaleFactor","pixelRatio","devicePixelRatio","e","Html5Hlsjs","vjs","source","tech","errorCounts","maxNetworkErrorRecovery","hlsjsConfig","_duration","metadata","isLive","dvrDuration","edgeMargin","handlers","play","name_","videoElement","el","player","options_","playerId","addEventListener","errorTxt","mediaError","currentTarget","target","error","logger","code","MEDIA_ERR_ABORTED","MEDIA_ERR_DECODE","_handleMediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_SRC_NOT_SUPPORTED","message","initialize","type","callback","hooks","splice","Infinity","isNaN","duration","createTimeRanges","startTime","Math","round","endTime","removeEventListener","untypedHLS","log","warn","console","destroy","time","currentTime","dispose","_initHlsjs","once","Hlsjs","recoverMediaError","swapAudioCodec","trigger","setTimeout","startLoad","_event","fatal","details","_handleNetworkError","srOptions_","levelLabelHandler","bitrate","resolutions","forEach","id","label","buildLevelLabel","selected","manualLevel","selectCallback","currentLevel","localize","peertubeResolutions","add","obj","result","objKeys","Object","keys","_notifyVideoQualities","hlsjsConfigRef","_oneLevelObjClone","includes","preload","autoplay","autoStartLoad","_startLoad","capLevelController","_onError","_onMetaData","liveSyncDuration","liveSyncDurationCount","targetduration","live","totalduration","_e","resolutionId","autoLevelEnabled","autoResolutionChosenId","select","byEngine","attachMedia","loadSource","src","videojs","registerPlugin","plugin","options","html5","getTech","registerSourceHandler","canHandleSource","test","handleSource","hlsProvider","P2pMediaLoaderPlugin","CONSTANTS","INFO_SCHEDULER","statsP2PBytes","pendingDownload","pendingUpload","numPeers","totalDownload","totalUpload","statsHTTPBytes","initVideoJsContribHlsJsPlayer","canPlayType","ready","Error","timeToInt","initializeCore","hlsjs","initializePlugin","p2pEngine","networkInfoInterval","latency","one","addClass","initHlsJsPlayer","loader","getEngine","segment","err","redundancyUrlManager","removeBySegmentUrl","requestUrl","countBaseUrls","runStats","method","_segment","bytes","elem","p2pDownloadSpeed","arraySum","p2pUploadSpeed","httpDownloadSpeed","httpUploadSpeed","http","downloadSpeed","uploadSpeed","downloaded","uploaded","p2p","bandwidthEstimate","reduce","a","b"],"sourceRoot":""}