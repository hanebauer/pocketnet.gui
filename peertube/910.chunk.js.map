{"version":3,"file":"910.chunk.js?v=9575","mappings":"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","sources":["webpack://peertube-client/./src/assets/player/shared/p2p-media-loader/cap-level-controller.ts","webpack://peertube-client/./src/assets/player/shared/p2p-media-loader/hls-plugin.ts","webpack://peertube-client/./src/assets/player/shared/p2p-media-loader/p2p-media-loader-plugin.ts"],"sourcesContent":["//@ts-nocheck\n\nimport { Events } from 'hls.js/src/events';\n\nimport type {\n  BufferCodecsData,\n  MediaAttachingData,\n  FPSDropLevelCappingData,\n} from 'hls.js/src/types/events';\nimport type { ComponentAPI } from 'hls.js/src/types/component-api';\nimport type Hls from 'hls.js';\n\n\nclass CapLevelController implements ComponentAPI {\n  public autoLevelCapping: number;\n  public firstLevel: number;\n  public media: HTMLVideoElement | null;\n  public restrictedLevels: Array<number>;\n  public timer: number | undefined;\n  public paused: Boolean\n\n  private hls: Hls;\n\n  private streamController?: any;\n  public clientRect: { width: number; height: number } | null;\n  public clientRectLast: { width: number; height: number } | null;\n\n  constructor(hls: Hls) {\n    this.hls = hls;\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    this.firstLevel = -1;\n    this.media = null;\n    this.restrictedLevels = [];\n    this.timer = undefined;\n    this.clientRect = null;\n    this.paused = true\n\n    /*this.hls.pauseCapping = () => {\n        this.paused = true\n    }\n\n    this.hls.resumeCapping = () => {\n        this.paused = false\n    }*/\n\n    this.registerListeners();\n  }\n\n  public setStreamController(streamController: StreamController) {\n    this.streamController = streamController;\n  }\n\n  public destroy() {\n    this.unregisterListener();\n    if (this.hls.config.capLevelToPlayerSize) {\n      this.stopCapping();\n    }\n    this.media = null;\n    this.clientRect = null;\n    // @ts-ignore\n    this.hls = this.streamController = null;\n  }\n\n  protected registerListeners() {\n    const { hls } = this;\n    hls.on(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\n    hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n  }\n\n  protected unregisterListener() {\n    const { hls } = this;\n    hls.off(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\n    hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n  }\n\n  protected onFpsDropLevelCapping(\n    event: Events.FPS_DROP_LEVEL_CAPPING,\n    data: FPSDropLevelCappingData\n  ) {\n    // Don't add a restricted level more than once\n    if (\n      CapLevelController.isLevelAllowed(\n        data.droppedLevel,\n        this.restrictedLevels\n      )\n    ) {\n      this.restrictedLevels.push(data.droppedLevel);\n    }\n  }\n\n  protected onMediaAttaching(\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData\n  ) {\n    this.media = data.media instanceof HTMLVideoElement ? data.media : null;\n  }\n\n  protected onManifestParsed(\n    event: any,\n    data: any\n  ) {\n    const hls = this.hls;\n    this.restrictedLevels = [];\n    this.firstLevel = data.firstLevel;\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // Start capping immediately if the manifest has signaled video codecs\n      this.startCapping();\n    }\n  }\n\n  // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted\n  // to the first level\n  protected onBufferCodecs(\n    event: Events.BUFFER_CODECS,\n    data: BufferCodecsData\n  ) {\n    const hls = this.hls;\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // If the manifest did not signal a video codec capping has been deferred until we're certain video is present\n      this.startCapping();\n    }\n  }\n\n  protected onMediaDetaching() {\n    this.stopCapping();\n  }\n\n  detectPlayerSize() {\n    if (this.media && this.mediaHeight > 0 && this.mediaWidth > 0) {\n      const levels = this.hls.levels;\n      \n      if (levels.length) {\n        const hls = this.hls;\n        hls.autoLevelCapping = this.getMaxLevel(levels.length - 1);\n\n        if (\n          hls.autoLevelCapping > this.autoLevelCapping &&\n          this.streamController\n        ) {\n          // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch\n          // usually happen when the user go to the fullscreen mode.\n          this.streamController.nextLevelSwitch();\n        }\n        this.autoLevelCapping = hls.autoLevelCapping;\n      }\n    }\n  }\n\n  /*\n   * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)\n   */\n  getMaxLevel(capLevelIndex: number): number {\n    const levels = this.hls.levels;\n    if (!levels.length) {\n      return -1;\n    }\n\n    const validLevels = levels.filter(\n      (level, index) =>\n        CapLevelController.isLevelAllowed(index, this.restrictedLevels) &&\n        index <= capLevelIndex\n    );\n\n\n\n    this.clientRect = null;\n    return CapLevelController.getMaxLevelByMediaSize(\n      validLevels,\n      this.mediaWidth,\n      this.mediaHeight\n    );\n  }\n\n  capp(){\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    this.hls.firstLevel = this.getMaxLevel(this.firstLevel);\n    \n    this.detectPlayerSize();\n  }\n\n  startCapping() {\n    if (this.timer) {\n      // Don't reset capping if started twice; this can happen if the manifest signals a video codec\n      return;\n    }\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    this.hls.firstLevel = this.getMaxLevel(this.firstLevel);\n    self.clearInterval(this.timer);\n    this.timer = self.setInterval(this.detectPlayerSize.bind(this), 10000);\n    this.detectPlayerSize();\n  }\n\n  stopCapping() {\n    this.restrictedLevels = [];\n    this.firstLevel = -1;\n    //this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    \n    if (this.timer) {\n      self.clearInterval(this.timer);\n      this.timer = undefined;\n    }\n  }\n\n\n  getDimensions(): { width: number; height: number } {\n\n    if (this.paused && this.clientRectLast){\n        return this.clientRectLast\n    }\n\n    if (this.clientRect) {\n      return this.clientRect;\n    }\n    const media = this.media;\n    const boundsRect = {\n      width: 0,\n      height: 0,\n    };\n\n    if (media) {\n      const clientRect = media.getBoundingClientRect();\n      boundsRect.width = clientRect.width;\n      boundsRect.height = clientRect.height;\n      if (!boundsRect.width && !boundsRect.height) {\n        // When the media element has no width or height (equivalent to not being in the DOM),\n        // then use its width and height attributes (media.width, media.height)\n        boundsRect.width =\n          clientRect.right - clientRect.left || media.width || 0;\n        boundsRect.height =\n          clientRect.bottom - clientRect.top || media.height || 0;\n      }\n    }\n\n    this.clientRectLast = this.clientRect = boundsRect;\n    \n    return boundsRect;\n  }\n\n  get mediaWidth(): number {\n    return this.getDimensions().width * this.contentScaleFactor;\n  }\n\n  get mediaHeight(): number {\n    return this.getDimensions().height * this.contentScaleFactor;\n  }\n\n  get contentScaleFactor(): number {\n    let pixelRatio = 1;\n    try {\n      pixelRatio = self.devicePixelRatio;\n    } catch (e) {\n      /* no-op */\n    }\n\n    if (pixelRatio > 1.5) pixelRatio = 1.5\n\n    return pixelRatio;\n  }\n\n  static isLevelAllowed(\n    level: number,\n    restrictedLevels: Array<number> = []\n  ): boolean {\n    return restrictedLevels.indexOf(level) === -1;\n  }\n\n  static getMaxLevelByMediaSize(\n    levels: Array<any>,\n    width: number,\n    height: number\n  ): number {\n    if (!levels || !levels.length) {\n      return -1;\n    }\n\n    // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next\n    // to determine whether we've chosen the greatest bandwidth for the media's dimensions\n    const atGreatestBandiwdth = (curLevel : any, nextLevel : any) => {\n      if (!nextLevel) {\n        return true;\n      }\n\n      return (\n        curLevel.width !== nextLevel.width ||\n        curLevel.height !== nextLevel.height\n      );\n    };\n\n\n    // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to\n    // the max level\n    let maxLevelIndex = levels.length - 1;\n\n    for (let i = 0; i < levels.length; i += 1) {\n      const level = levels[i];\n      if (\n        (level.width >= width || level.height >= height) &&\n        atGreatestBandiwdth(level, levels[i + 1])\n      ) {\n        maxLevelIndex = i;\n        break;\n      }\n    }\n\n    return maxLevelIndex;\n  }\n}\n\nexport default CapLevelController;\n","// Thanks https://github.com/streamroot/videojs-hlsjs-plugin\n// We duplicated this plugin to choose the hls.js version we want, because streamroot only provide a bundled file\n\nimport Hlsjs, { ErrorData, HlsConfig, Level, LevelSwitchingData, ManifestParsedData } from 'hls.js'\nimport videojs from 'video.js'\nimport { logger } from '@root-helpers/logger'\nimport { HlsjsConfigHandlerOptions, PeerTubeResolution, VideoJSTechHLS } from '../../types'\nimport CapLevelController from './cap-level-controller'\n\ntype ErrorCounts = {\n  [ type: string ]: number\n}\n\ntype Metadata = {\n  levels: Level[]\n}\n\ntype HookFn = (player: videojs.Player, hljs: Hlsjs) => void\n\nconst registerSourceHandler = function (vjs: typeof videojs) {\n  if (!Hlsjs.isSupported()) {\n    logger.warn('Hls.js is not supported in this browser!')\n    return\n  }\n\n  const html5 = vjs.getTech('Html5')\n\n  if (!html5) {\n    logger.error('No Hml5 tech found in videojs')\n    return\n  }\n\n  // FIXME: typings\n  (html5 as any).registerSourceHandler({\n    canHandleSource: function (source: videojs.Tech.SourceObject) {\n      const hlsTypeRE = /^application\\/x-mpegURL|application\\/vnd\\.apple\\.mpegurl$/i\n      const hlsExtRE = /\\.m3u8/i\n\n      if (hlsTypeRE.test(source.type)) return 'probably'\n      if (hlsExtRE.test(source.src)) return 'maybe'\n\n      return ''\n    },\n\n    handleSource: function (source: videojs.Tech.SourceObject, tech: VideoJSTechHLS) {\n      if (tech.hlsProvider) {\n        tech.hlsProvider.dispose()\n      }\n\n      tech.hlsProvider = new Html5Hlsjs(vjs, source, tech)\n\n      return tech.hlsProvider\n    }\n  }, 0);\n\n  // FIXME: typings\n  (vjs as any).Html5Hlsjs = Html5Hlsjs\n}\n\nfunction hlsjsConfigHandler (this: videojs.Player, options: HlsjsConfigHandlerOptions) {\n  const player = this\n\n  if (!options) return\n\n  if (!player.srOptions_) {\n    player.srOptions_ = {}\n  }\n\n  if (!player.srOptions_.hlsjsConfig) {\n    player.srOptions_.hlsjsConfig = options.hlsjsConfig\n  }\n\n  \n\n  if (options.levelLabelHandler && !player.srOptions_.levelLabelHandler) {\n    player.srOptions_.levelLabelHandler = options.levelLabelHandler\n  }\n}\n\nconst registerConfigPlugin = function (vjs: typeof videojs) {\n  // Used in Brightcove since we don't pass options directly there\n  const registerVjsPlugin = vjs.registerPlugin || vjs.plugin\n  registerVjsPlugin('hlsjs', hlsjsConfigHandler)\n}\n\nclass Html5Hlsjs {\n  private static readonly hooks: { [id: string]: HookFn[] } = {}\n\n  private readonly videoElement: HTMLVideoElement\n  private readonly errorCounts: ErrorCounts = {}\n  private readonly player: videojs.Player\n  private readonly tech: videojs.Tech\n  private readonly source: videojs.Tech.SourceObject\n  private readonly vjs: typeof videojs\n\n  private maxNetworkErrorRecovery = 5\n\n  private hls: Hlsjs\n  private hlsjsConfig: Partial<HlsConfig & { cueHandler: any }> = null\n\n  private _duration: number = null\n  private metadata: Metadata = null\n  private isLive: boolean = null\n  private dvrDuration: number = null\n  private edgeMargin: number = null\n\n  private handlers: { [ id in 'play' ]: EventListener } = {\n    play: null\n  }\n\n  constructor (vjs: typeof videojs, source: videojs.Tech.SourceObject, tech: videojs.Tech) {\n    this.vjs = vjs\n    this.source = source\n\n    this.tech = tech;\n    (this.tech as any).name_ = 'Hlsjs'\n\n    this.videoElement = tech.el() as HTMLVideoElement\n    this.player = vjs((tech.options_ as any).playerId)\n\n    this.videoElement.addEventListener('error', event => {\n      let errorTxt: string\n      const mediaError = ((event.currentTarget || event.target) as HTMLVideoElement).error\n\n      if (!mediaError) return\n\n      logger.info(mediaError)\n      switch (mediaError.code) {\n        case mediaError.MEDIA_ERR_ABORTED:\n          errorTxt = 'You aborted the video playback'\n          break\n        case mediaError.MEDIA_ERR_DECODE:\n          errorTxt = 'The video playback was aborted due to a corruption problem or because the video used features ' +\n                     'your browser did not support'\n          this._handleMediaError(mediaError)\n          break\n        case mediaError.MEDIA_ERR_NETWORK:\n          errorTxt = 'A network error caused the video download to fail part-way'\n          break\n        case mediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n          errorTxt = 'The video could not be loaded, either because the server or network failed or because the format is not supported'\n          break\n\n        default:\n          errorTxt = mediaError.message\n      }\n\n      logger.error(`MEDIA_ERROR: ${errorTxt}`)\n    })\n\n    this.initialize()\n  }\n\n  duration () {\n    if (this._duration === Infinity) return Infinity\n    if (!isNaN(this.videoElement.duration)) return this.videoElement.duration\n\n    return this._duration || 0\n  }\n\n  seekable () {\n    if (this.hls.media) {\n      if (!this.isLive) {\n        return this.vjs.createTimeRanges(0, this.hls.media.duration)\n      }\n\n      // Video.js doesn't seem to like floating point timeranges\n      const startTime = Math.round(this.hls.media.duration - this.dvrDuration)\n      const endTime = Math.round(this.hls.media.duration - this.edgeMargin)\n\n      return this.vjs.createTimeRanges(startTime, endTime)\n    }\n\n    return this.vjs.createTimeRanges()\n  }\n\n  // See comment for `initialize` method.\n  dispose () {\n    this.videoElement.removeEventListener('play', this.handlers.play)\n\n    // FIXME: https://github.com/video-dev/hls.js/issues/4092\n    const untypedHLS = this.hls as any\n    untypedHLS.log = untypedHLS.warn = () => {\n      // empty\n    }\n\n    this.hls.destroy()\n  }\n\n  static addHook (type: string, callback: HookFn) {\n    Html5Hlsjs.hooks[type] = this.hooks[type] || []\n    Html5Hlsjs.hooks[type].push(callback)\n  }\n\n  static removeHook (type: string, callback: HookFn) {\n    if (Html5Hlsjs.hooks[type] === undefined) return false\n\n    const index = Html5Hlsjs.hooks[type].indexOf(callback)\n    if (index === -1) return false\n\n    Html5Hlsjs.hooks[type].splice(index, 1)\n\n    return true\n  }\n\n  private _executeHooksFor (type: string) {\n    if (Html5Hlsjs.hooks[type] === undefined) {\n      return\n    }\n\n    // ES3 and IE < 9\n    for (let i = 0; i < Html5Hlsjs.hooks[type].length; i++) {\n      Html5Hlsjs.hooks[type][i](this.player, this.hls)\n    }\n  }\n\n  private _handleMediaError (error: any) {\n    if (this.errorCounts[Hlsjs.ErrorTypes.MEDIA_ERROR] === 1) {\n      logger.info('trying to recover media error')\n      this.hls.recoverMediaError()\n      return\n    }\n\n    if (this.errorCounts[Hlsjs.ErrorTypes.MEDIA_ERROR] === 2) {\n      logger.info('2nd try to recover media error (by swapping audio codec')\n      this.hls.swapAudioCodec()\n      this.hls.recoverMediaError()\n      return\n    }\n\n    if (this.errorCounts[Hlsjs.ErrorTypes.MEDIA_ERROR] > 2) {\n      logger.info('bubbling media error up to VIDEOJS')\n      this.hls.destroy()\n      this.tech.error = () => error\n      this.tech.trigger('error')\n    }\n  }\n\n  private _handleNetworkError (error: any) {\n    if (this.errorCounts[Hlsjs.ErrorTypes.NETWORK_ERROR] <= this.maxNetworkErrorRecovery) {\n      logger.info('trying to recover network error')\n\n      // Wait 1 second and retry\n      setTimeout(() => this.hls.startLoad(), 1000)\n\n      // Reset error count on success\n      this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\n        this.errorCounts[Hlsjs.ErrorTypes.NETWORK_ERROR] = 0\n      })\n\n      return\n    }\n\n    logger.info('bubbling network error up to VIDEOJS')\n    this.hls.destroy()\n    this.tech.error = () => error\n    this.tech.trigger('error')\n  }\n\n  private _onError (_event: any, data: ErrorData) {\n    const error: { message: string, code?: number } = {\n      message: `HLS.js error: ${data.type} - fatal: ${data.fatal} - ${data.details}`\n    }\n\n    // increment/set error count\n    if (this.errorCounts[data.type]) this.errorCounts[data.type] += 1\n    else this.errorCounts[data.type] = 1\n\n    if (data.fatal) logger.warn(error.message)\n    else logger.error(error.message, { data })\n\n    if (data.type === Hlsjs.ErrorTypes.NETWORK_ERROR) {\n      error.code = 2\n      this._handleNetworkError(error)\n    } else if (data.fatal && data.type === Hlsjs.ErrorTypes.MEDIA_ERROR && data.details !== 'manifestIncompatibleCodecsError') {\n      error.code = 3\n      this._handleMediaError(error)\n    } else if (data.fatal) {\n      this.hls.destroy()\n      logger.info('bubbling error up to VIDEOJS')\n      this.tech.error = () => error as any\n      this.tech.trigger('error')\n    }\n  }\n\n  private buildLevelLabel (level: Level) {\n    if (this.player.srOptions_.levelLabelHandler) {\n      return this.player.srOptions_.levelLabelHandler(level as any)\n    }\n\n    if (level.height) return level.height + 'p'\n    if (level.width) return Math.round(level.width * 9 / 16) + 'p'\n    if (level.bitrate) return (level.bitrate / 1000) + 'kbps'\n\n    return '0'\n  }\n\n  private _notifyVideoQualities () {\n    if (!this.metadata) return\n\n    const resolutions: PeerTubeResolution[] = []\n\n    this.metadata.levels.forEach((level, index) => {\n      resolutions.push({\n        id: index,\n        height: level.height,\n        width: level.width,\n        bitrate: level.bitrate,\n        label: this.buildLevelLabel(level),\n        selected: level.id === this.hls.manualLevel,\n\n        selectCallback: () => {\n          this.hls.currentLevel = index\n        }\n      })\n    })\n\n    resolutions.push({\n      id: -1,\n      label: this.player.localize('Auto'),\n      selected: true,\n      selectCallback: () => this.hls.currentLevel = -1\n    })\n\n    this.player.peertubeResolutions().add(resolutions)\n  }\n\n  private _startLoad () {\n    this.hls.startLoad(-1)\n    this.videoElement.removeEventListener('play', this.handlers.play)\n  }\n\n  private _oneLevelObjClone (obj: { [ id: string ]: any }) {\n    const result = {}\n    const objKeys = Object.keys(obj)\n    for (let i = 0; i < objKeys.length; i++) {\n      result[objKeys[i]] = obj[objKeys[i]]\n    }\n\n    return result\n  }\n\n  private _onMetaData (_event: any, data: ManifestParsedData) {\n    // This could arrive before 'loadedqualitydata' handlers is registered, remember it so we can raise it later\n    this.metadata = data\n    this._notifyVideoQualities()\n  }\n\n  private _initHlsjs () {\n    const techOptions = this.tech.options_ as HlsjsConfigHandlerOptions\n    const srOptions_ = this.player.srOptions_\n\n    const hlsjsConfigRef = srOptions_?.hlsjsConfig || techOptions.hlsjsConfig\n    // Hls.js will write to the reference thus change the object for later streams\n    this.hlsjsConfig = hlsjsConfigRef ? this._oneLevelObjClone(hlsjsConfigRef) : {}\n\n    if ([ '', 'auto' ].includes(this.videoElement.preload) && !this.videoElement.autoplay && this.hlsjsConfig.autoStartLoad === undefined) {\n      this.hlsjsConfig.autoStartLoad = false\n    }\n\n    // If the user explicitly sets autoStartLoad to false, we're not going to enter the if block above\n    // That's why we have a separate if block here to set the 'play' listener\n    if (this.hlsjsConfig.autoStartLoad === false) {\n      this.handlers.play = this._startLoad.bind(this)\n      this.videoElement.addEventListener('play', this.handlers.play)\n    }\n\n    //@ts-ignore\n    this.hlsjsConfig.capLevelController = CapLevelController\n\n    this.hls = new Hlsjs(this.hlsjsConfig)\n\n    this._executeHooksFor('beforeinitialize')\n\n    this.hls.on(Hlsjs.Events.ERROR, (event, data) => this._onError(event, data))\n    this.hls.on(Hlsjs.Events.MANIFEST_PARSED, (event, data) => this._onMetaData(event, data))\n    this.hls.on(Hlsjs.Events.LEVEL_LOADED, (event, data) => {\n      // The DVR plugin will auto seek to \"live edge\" on start up\n      if (this.hlsjsConfig.liveSyncDuration) {\n        this.edgeMargin = this.hlsjsConfig.liveSyncDuration\n      } else if (this.hlsjsConfig.liveSyncDurationCount) {\n        this.edgeMargin = this.hlsjsConfig.liveSyncDurationCount * data.details.targetduration\n      }\n\n      this.isLive = data.details.live\n      this.dvrDuration = data.details.totalduration\n\n      this._duration = this.isLive ? Infinity : data.details.totalduration\n\n      // Increase network error recovery for lives since they can be broken (server restart, stream interruption etc)\n      if (this.isLive) this.maxNetworkErrorRecovery = 300\n    })\n\n    this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\n      // Emit custom 'loadedmetadata' event for parity with `videojs-contrib-hls`\n      // Ref: https://github.com/videojs/videojs-contrib-hls#loadedmetadata\n      this.tech.trigger('loadedmetadata')\n    })\n\n    this.hls.on(Hlsjs.Events.LEVEL_SWITCHING, (_e, data: LevelSwitchingData) => {\n      const resolutionId = this.hls.autoLevelEnabled\n        ? -1\n        : data.level\n\n      const autoResolutionChosenId = this.hls.autoLevelEnabled\n        ? data.level\n        : -1\n\n      this.player.peertubeResolutions().select({ id: resolutionId, autoResolutionChosenId, byEngine: true })\n    })\n\n    this.hls.attachMedia(this.videoElement)\n\n    this.hls.loadSource(this.source.src)\n  }\n\n  private initialize () {\n    this._initHlsjs()\n  }\n}\n\nexport {\n  Html5Hlsjs,\n  registerSourceHandler,\n  registerConfigPlugin\n}\n","import Hlsjs from 'hls.js'\nimport videojs from 'video.js'\nimport { Events, Segment } from 'p2p-media-loader-core-basyton'\nimport { Engine, initHlsJsPlayer, initVideoJsContribHlsJsPlayer } from 'p2p-media-loader-hlsjs-basyton'\nimport { timeToInt } from '@shared/core-utils'\nimport { P2PMediaLoaderPluginOptions, PlayerNetworkInfo } from '../../types'\nimport { registerConfigPlugin, registerSourceHandler } from './hls-plugin'\nimport { logger } from '@root-helpers/logger'\n\nregisterConfigPlugin(videojs)\nregisterSourceHandler(videojs)\n\nconst Plugin = videojs.getPlugin('plugin')\nclass P2pMediaLoaderPlugin extends Plugin {\n\n  private readonly CONSTANTS = {\n    INFO_SCHEDULER: 1000 // Don't change this\n  }\n  private readonly options: P2PMediaLoaderPluginOptions\n\n  private hlsjs: Hlsjs\n  private p2pEngine: Engine\n  private statsP2PBytes = {\n    pendingDownload: [] as number[],\n    pendingUpload: [] as number[],\n    numPeers: 0,\n    totalDownload: 0,\n    totalUpload: 0\n  }\n  private statsHTTPBytes = {\n    pendingDownload: [] as number[],\n    pendingUpload: [] as number[],\n    totalDownload: 0,\n    totalUpload: 0\n  }\n  private startTime: number\n\n  private networkInfoInterval: any\n\n  constructor (player: videojs.Player, options?: P2PMediaLoaderPluginOptions) {\n    super(player)\n\n    this.options = options\n\n    // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\n    if (!(videojs as any).Html5Hlsjs) {\n      logger.warn('HLS.js does not seem to be supported. Try to fallback to built in HLS.')\n\n      if (!player.canPlayType('application/vnd.apple.mpegurl')) {\n        const message = 'Cannot fallback to built-in HLS'\n        logger.warn(message)\n\n        player.ready(() => player.trigger('error', new Error(message)))\n        return\n      }\n    } else {\n      // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\n      (videojs as any).Html5Hlsjs.addHook('beforeinitialize', (videojsPlayer: any, hlsjs: any) => {\n        this.hlsjs = hlsjs\n      })\n\n      initVideoJsContribHlsJsPlayer(player)\n    }\n\n    this.startTime = timeToInt(options.startTime)\n\n    player.src({\n      type: options.type,\n      src: options.src\n    })\n\n    player.ready(() => {\n      this.initializeCore()\n\n      if ((videojs as any).Html5Hlsjs) {\n        this.initializePlugin()\n      }\n    })\n  }\n\n  dispose () {\n    if (this.hlsjs) this.hlsjs.destroy()\n    if (this.p2pEngine) this.p2pEngine.destroy()\n\n    clearInterval(this.networkInfoInterval)\n  }\n\n  getCurrentLevel () {\n    return this.hlsjs.levels[this.hlsjs.currentLevel]\n  }\n\n  getLiveLatency () {\n    return Math.round(this.hlsjs.latency)\n  }\n\n  getHLSJS () {\n    return this.hlsjs\n  }\n\n  private initializeCore () {\n    this.player.one('play', () => {\n      this.player.addClass('vjs-has-big-play-button-clicked')\n    })\n\n    this.player.one('canplay', () => {\n      if (this.startTime) {\n        this.player.currentTime(this.startTime)\n      }\n    })\n  }\n\n  private initializePlugin () {\n    initHlsJsPlayer(this.hlsjs)\n\n    this.p2pEngine = this.options.loader.getEngine()\n\n    this.p2pEngine.on(Events.SegmentError, (segment: Segment, err) => {\n      logger.error(`Segment ${segment.id} error.`, err)\n\n      this.options.redundancyUrlManager.removeBySegmentUrl(segment.requestUrl)\n    })\n\n    this.statsP2PBytes.numPeers = 1 + this.options.redundancyUrlManager.countBaseUrls()\n\n    this.runStats()\n  }\n\n  private runStats () {\n    this.p2pEngine.on(Events.PieceBytesDownloaded, (method: string, _segment, bytes: number) => {\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\n\n      elem.pendingDownload.push(bytes)\n      elem.totalDownload += bytes\n    })\n\n    this.p2pEngine.on(Events.PieceBytesUploaded, (method: string, _segment, bytes: number) => {\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\n\n      elem.pendingUpload.push(bytes)\n      elem.totalUpload += bytes\n    })\n\n    this.p2pEngine.on(Events.PeerConnect, () => this.statsP2PBytes.numPeers++)\n    this.p2pEngine.on(Events.PeerClose, () => this.statsP2PBytes.numPeers--)\n\n    this.networkInfoInterval = setInterval(() => {\n      const p2pDownloadSpeed = this.arraySum(this.statsP2PBytes.pendingDownload)\n      const p2pUploadSpeed = this.arraySum(this.statsP2PBytes.pendingUpload)\n\n      const httpDownloadSpeed = this.arraySum(this.statsHTTPBytes.pendingDownload)\n      const httpUploadSpeed = this.arraySum(this.statsHTTPBytes.pendingUpload)\n\n      this.statsP2PBytes.pendingDownload = []\n      this.statsP2PBytes.pendingUpload = []\n      this.statsHTTPBytes.pendingDownload = []\n      this.statsHTTPBytes.pendingUpload = []\n\n      return this.player.trigger('p2pInfo', {\n        source: 'p2p-media-loader',\n        http: {\n          downloadSpeed: httpDownloadSpeed,\n          uploadSpeed: httpUploadSpeed,\n          downloaded: this.statsHTTPBytes.totalDownload,\n          uploaded: this.statsHTTPBytes.totalUpload\n        },\n        p2p: {\n          downloadSpeed: p2pDownloadSpeed,\n          uploadSpeed: p2pUploadSpeed,\n          numPeers: this.statsP2PBytes.numPeers,\n          downloaded: this.statsP2PBytes.totalDownload,\n          uploaded: this.statsP2PBytes.totalUpload\n        },\n        bandwidthEstimate: (this.hlsjs as any).bandwidthEstimate / 8\n      } as PlayerNetworkInfo)\n    }, this.CONSTANTS.INFO_SCHEDULER)\n  }\n\n  private arraySum (data: number[]) {\n    return data.reduce((a: number, b: number) => a + b, 0)\n  }\n}\n\nvideojs.registerPlugin('p2pMediaLoader', P2pMediaLoaderPlugin)\nexport { P2pMediaLoaderPlugin }\n"],"names":["CapLevelController","constructor","hls","this","autoLevelCapping","Number","POSITIVE_INFINITY","firstLevel","media","restrictedLevels","timer","undefined","clientRect","paused","registerListeners","setStreamController","streamController","destroy","unregisterListener","config","capLevelToPlayerSize","stopCapping","on","onFpsDropLevelCapping","onMediaAttaching","onManifestParsed","onBufferCodecs","onMediaDetaching","off","event","data","isLevelAllowed","droppedLevel","push","HTMLVideoElement","video","startCapping","detectPlayerSize","mediaHeight","mediaWidth","levels","length","getMaxLevel","nextLevelSwitch","capLevelIndex","validLevels","filter","level","index","getMaxLevelByMediaSize","capp","self","clearInterval","setInterval","bind","getDimensions","clientRectLast","boundsRect","width","height","getBoundingClientRect","right","left","bottom","top","contentScaleFactor","pixelRatio","devicePixelRatio","e","static","indexOf","maxLevelIndex","i","curLevel","nextLevel","Html5Hlsjs","vjs","source","tech","errorCounts","maxNetworkErrorRecovery","hlsjsConfig","_duration","metadata","isLive","dvrDuration","edgeMargin","handlers","play","name_","videoElement","el","player","options_","playerId","addEventListener","errorTxt","mediaError","currentTarget","target","error","logger","code","MEDIA_ERR_ABORTED","MEDIA_ERR_DECODE","_handleMediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_SRC_NOT_SUPPORTED","message","initialize","duration","Infinity","isNaN","seekable","createTimeRanges","startTime","Math","round","endTime","dispose","removeEventListener","untypedHLS","log","warn","type","callback","hooks","splice","_executeHooksFor","recoverMediaError","swapAudioCodec","trigger","_handleNetworkError","setTimeout","startLoad","once","_onError","_event","fatal","details","buildLevelLabel","srOptions_","levelLabelHandler","bitrate","_notifyVideoQualities","resolutions","forEach","id","label","selected","manualLevel","selectCallback","currentLevel","localize","peertubeResolutions","add","_startLoad","_oneLevelObjClone","obj","result","objKeys","Object","keys","_onMetaData","_initHlsjs","hlsjsConfigRef","includes","preload","autoplay","autoStartLoad","capLevelController","liveSyncDuration","liveSyncDurationCount","targetduration","live","totalduration","_e","resolutionId","autoLevelEnabled","autoResolutionChosenId","select","byEngine","attachMedia","loadSource","src","registerPlugin","plugin","options","html5","getTech","registerSourceHandler","canHandleSource","test","handleSource","hlsProvider","Plugin","P2pMediaLoaderPlugin","super","CONSTANTS","INFO_SCHEDULER","statsP2PBytes","pendingDownload","pendingUpload","numPeers","totalDownload","totalUpload","statsHTTPBytes","videojsPlayer","hlsjs","initVideoJsContribHlsJsPlayer","canPlayType","ready","Error","initializeCore","initializePlugin","p2pEngine","networkInfoInterval","getCurrentLevel","getLiveLatency","latency","getHLSJS","one","addClass","currentTime","initHlsJsPlayer","loader","getEngine","Events","segment","err","redundancyUrlManager","removeBySegmentUrl","requestUrl","countBaseUrls","runStats","method","_segment","bytes","elem","p2pDownloadSpeed","arraySum","p2pUploadSpeed","httpDownloadSpeed","httpUploadSpeed","http","downloadSpeed","uploadSpeed","downloaded","uploaded","p2p","bandwidthEstimate","reduce","a","b"],"sourceRoot":""}