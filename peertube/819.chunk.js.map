{"version":3,"file":"819.chunk.js?v=925","mappings":"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","sources":["webpack://peertube-client/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://peertube-client/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://peertube-client/./node_modules/@videojs/vhs-utils/es/stream.js","webpack://peertube-client/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://peertube-client/./node_modules/@videojs/vhs-utils/es/decode-b64-to-uint8-array.js","webpack://peertube-client/./node_modules/m3u8-parser/dist/m3u8-parser.es.js","webpack://peertube-client/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://peertube-client/./node_modules/p2p-media-loader-core-basyton/dist/bandwidth-approximator.js","webpack://peertube-client/./node_modules/p2p-media-loader-core-basyton/dist/http-media-manager.js","webpack://peertube-client/./node_modules/p2p-media-loader-core-basyton/dist/hybrid-loader.js","webpack://peertube-client/./node_modules/p2p-media-loader-core-basyton/dist/index.js","webpack://peertube-client/./node_modules/p2p-media-loader-core-basyton/dist/loader-interface.js","webpack://peertube-client/./node_modules/p2p-media-loader-core-basyton/dist/media-peer.js","webpack://peertube-client/./node_modules/p2p-media-loader-core-basyton/dist/p2p-media-manager.js","webpack://peertube-client/./node_modules/p2p-media-loader-core-basyton/dist/segments-memory-storage.js","webpack://peertube-client/./node_modules/p2p-media-loader-core-basyton/dist/stringly-typed-event-emitter.js","webpack://peertube-client/./node_modules/p2p-media-loader-hlsjs-basyton/dist/byte-range.js","webpack://peertube-client/./node_modules/p2p-media-loader-hlsjs-basyton/dist/engine.js","webpack://peertube-client/./node_modules/p2p-media-loader-hlsjs-basyton/dist/hlsjs-loader.js","webpack://peertube-client/./node_modules/p2p-media-loader-hlsjs-basyton/dist/index.js","webpack://peertube-client/./node_modules/p2p-media-loader-hlsjs-basyton/dist/segment-manager.js","webpack://peertube-client/./node_modules/sha.js/hash.js","webpack://peertube-client/./node_modules/sha.js/sha1.js"],"sourcesContent":["export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","/**\n * @file stream.js\n */\n\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = /*#__PURE__*/function () {\n  function Stream() {\n    this.listeners = {};\n  }\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  var _proto = Stream.prototype;\n\n  _proto.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n\n    this.listeners[type].push(listener);\n  }\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {boolean} if we could turn it off or not\n   */\n  ;\n\n  _proto.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener); // TODO: which is better?\n    // In Video.js we slice listener functions\n    // on trigger so that it does not mess up the order\n    // while we loop through.\n    //\n    // Here we slice on off so that the loop in trigger\n    // can continue using it's old reference to loop without\n    // messing up the order.\n\n    this.listeners[type] = this.listeners[type].slice(0);\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {string} type the event name\n   */\n  ;\n\n  _proto.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n\n    if (!callbacks) {\n      return;\n    } // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n\n\n    if (arguments.length === 2) {\n      var length = callbacks.length;\n\n      for (var i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var _length = callbacks.length;\n\n      for (var _i = 0; _i < _length; ++_i) {\n        callbacks[_i].apply(this, args);\n      }\n    }\n  }\n  /**\n   * Destroys the stream and cleans up.\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    this.listeners = {};\n  }\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n  ;\n\n  _proto.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\nexport { Stream as default };","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import window from 'global/window';\n\nvar atob = function atob(s) {\n  return window.atob ? window.atob(s) : Buffer.from(s, 'base64').toString('binary');\n};\n\nexport default function decodeB64ToUint8Array(b64Text) {\n  var decodedString = atob(b64Text);\n  var array = new Uint8Array(decodedString.length);\n\n  for (var i = 0; i < decodedString.length; i++) {\n    array[i] = decodedString.charCodeAt(i);\n  }\n\n  return array;\n}","/*! @name m3u8-parser @version 4.7.1 @license Apache-2.0 */\nimport _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';\nimport Stream from '@videojs/vhs-utils/es/stream.js';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array.js';\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nvar LineStream = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(LineStream, _Stream);\n\n  function LineStream() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.buffer = '';\n    return _this;\n  }\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {string} data the text to process\n   */\n\n\n  var _proto = LineStream.prototype;\n\n  _proto.push = function push(data) {\n    var nextNewline;\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  };\n\n  return LineStream;\n}(Stream);\n\nvar TAB = String.fromCharCode(0x09);\n\nvar parseByterange = function parseByterange(byterangeString) {\n  // optionally match and capture 0+ digits before `@`\n  // optionally match and capture 0+ digits after `@`\n  var match = /([0-9.]*)?@?([0-9.]*)?/.exec(byterangeString || '');\n  var result = {};\n\n  if (match[1]) {\n    result.length = parseInt(match[1], 10);\n  }\n\n  if (match[2]) {\n    result.offset = parseInt(match[2], 10);\n  }\n\n  return result;\n};\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\n\n\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n/**\n * Parse attributes from a line given the separator\n *\n * @param {string} attributes the attribute line to parse\n */\n\n\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    } // split the key and value\n\n\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value\n\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n\n  return result;\n};\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\n\nvar ParseStream = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(ParseStream, _Stream);\n\n  function ParseStream() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.customParsers = [];\n    _this.tagMappers = [];\n    return _this;\n  }\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {string} line a single line of an M3U8 file to parse\n   */\n\n\n  var _proto = ParseStream.prototype;\n\n  _proto.push = function push(line) {\n    var _this2 = this;\n\n    var match;\n    var event; // strip whitespace\n\n    line = line.trim();\n\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    } // URIs\n\n\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    } // map tags\n\n\n    var newLines = this.tagMappers.reduce(function (acc, mapper) {\n      var mappedLine = mapper(line); // skip if unchanged\n\n      if (mappedLine === line) {\n        return acc;\n      }\n\n      return acc.concat([mappedLine]);\n    }, [line]);\n    newLines.forEach(function (newLine) {\n      for (var i = 0; i < _this2.customParsers.length; i++) {\n        if (_this2.customParsers[i].call(_this2, newLine)) {\n          return;\n        }\n      } // Comments\n\n\n      if (newLine.indexOf('#EXT') !== 0) {\n        _this2.trigger('data', {\n          type: 'comment',\n          text: newLine.slice(1)\n        });\n\n        return;\n      } // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n\n\n      newLine = newLine.replace('\\r', ''); // Tags\n\n      match = /^#EXTM3U/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n\n        return;\n      }\n\n      match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n\n        if (match[2]) {\n          event.title = match[2];\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-BYTERANGE:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = _extends(parseByterange(match[1]), {\n          type: 'tag',\n          tagType: 'byterange'\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MAP:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          var attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n\n          if (attributes.BYTERANGE) {\n            event.byterange = parseByterange(attributes.BYTERANGE);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            var split = event.attributes.RESOLUTION.split('x');\n            var resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n\n            event.attributes.RESOLUTION = resolution;\n          }\n\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-ENDLIST/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n\n        return;\n      }\n\n      match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-KEY:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]); // parse the IV string into a Uint32Array\n\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-START:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'start'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n          event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-SKIP:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'skip'\n        };\n        event.attributes = parseAttributes(match[1]);\n\n        if (event.attributes.hasOwnProperty('SKIPPED-SEGMENTS')) {\n          event.attributes['SKIPPED-SEGMENTS'] = parseInt(event.attributes['SKIPPED-SEGMENTS'], 10);\n        }\n\n        if (event.attributes.hasOwnProperty('RECENTLY-REMOVED-DATERANGES')) {\n          event.attributes['RECENTLY-REMOVED-DATERANGES'] = event.attributes['RECENTLY-REMOVED-DATERANGES'].split(TAB);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PART:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['DURATION'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['INDEPENDENT', 'GAP'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n\n        if (event.attributes.hasOwnProperty('BYTERANGE')) {\n          event.attributes.byterange = parseByterange(event.attributes.BYTERANGE);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'server-control'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['CAN-SKIP-UNTIL', 'PART-HOLD-BACK', 'HOLD-BACK'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['CAN-SKIP-DATERANGES', 'CAN-BLOCK-RELOAD'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PART-INF:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part-inf'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['PART-TARGET'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'preload-hint'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['BYTERANGE-START', 'BYTERANGE-LENGTH'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n            var subkey = key === 'BYTERANGE-LENGTH' ? 'length' : 'offset';\n            event.attributes.byterange = event.attributes.byterange || {};\n            event.attributes.byterange[subkey] = event.attributes[key]; // only keep the parsed byterange object.\n\n            delete event.attributes[key];\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'rendition-report'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['LAST-MSN', 'LAST-PART'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      } // unknown tag type\n\n\n      _this2.trigger('data', {\n        type: 'tag',\n        data: newLine.slice(4)\n      });\n    });\n  }\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n  ;\n\n  _proto.addParser = function addParser(_ref) {\n    var _this3 = this;\n\n    var expression = _ref.expression,\n        customType = _ref.customType,\n        dataParser = _ref.dataParser,\n        segment = _ref.segment;\n\n    if (typeof dataParser !== 'function') {\n      dataParser = function dataParser(line) {\n        return line;\n      };\n    }\n\n    this.customParsers.push(function (line) {\n      var match = expression.exec(line);\n\n      if (match) {\n        _this3.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType: customType,\n          segment: segment\n        });\n\n        return true;\n      }\n    });\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n  ;\n\n  _proto.addTagMapper = function addTagMapper(_ref2) {\n    var expression = _ref2.expression,\n        map = _ref2.map;\n\n    var mapFn = function mapFn(line) {\n      if (expression.test(line)) {\n        return map(line);\n      }\n\n      return line;\n    };\n\n    this.tagMappers.push(mapFn);\n  };\n\n  return ParseStream;\n}(Stream);\n\nvar camelCase = function camelCase(str) {\n  return str.toLowerCase().replace(/-(\\w)/g, function (a) {\n    return a[1].toUpperCase();\n  });\n};\n\nvar camelCaseKeys = function camelCaseKeys(attributes) {\n  var result = {};\n  Object.keys(attributes).forEach(function (key) {\n    result[camelCase(key)] = attributes[key];\n  });\n  return result;\n}; // set SERVER-CONTROL hold back based upon targetDuration and partTargetDuration\n// we need this helper because defaults are based upon targetDuration and\n// partTargetDuration being set, but they may not be if SERVER-CONTROL appears before\n// target durations are set.\n\n\nvar setHoldBack = function setHoldBack(manifest) {\n  var serverControl = manifest.serverControl,\n      targetDuration = manifest.targetDuration,\n      partTargetDuration = manifest.partTargetDuration;\n\n  if (!serverControl) {\n    return;\n  }\n\n  var tag = '#EXT-X-SERVER-CONTROL';\n  var hb = 'holdBack';\n  var phb = 'partHoldBack';\n  var minTargetDuration = targetDuration && targetDuration * 3;\n  var minPartDuration = partTargetDuration && partTargetDuration * 2;\n\n  if (targetDuration && !serverControl.hasOwnProperty(hb)) {\n    serverControl[hb] = minTargetDuration;\n    this.trigger('info', {\n      message: tag + \" defaulting HOLD-BACK to targetDuration * 3 (\" + minTargetDuration + \").\"\n    });\n  }\n\n  if (minTargetDuration && serverControl[hb] < minTargetDuration) {\n    this.trigger('warn', {\n      message: tag + \" clamping HOLD-BACK (\" + serverControl[hb] + \") to targetDuration * 3 (\" + minTargetDuration + \")\"\n    });\n    serverControl[hb] = minTargetDuration;\n  } // default no part hold back to part target duration * 3\n\n\n  if (partTargetDuration && !serverControl.hasOwnProperty(phb)) {\n    serverControl[phb] = partTargetDuration * 3;\n    this.trigger('info', {\n      message: tag + \" defaulting PART-HOLD-BACK to partTargetDuration * 3 (\" + serverControl[phb] + \").\"\n    });\n  } // if part hold back is too small default it to part target duration * 2\n\n\n  if (partTargetDuration && serverControl[phb] < minPartDuration) {\n    this.trigger('warn', {\n      message: tag + \" clamping PART-HOLD-BACK (\" + serverControl[phb] + \") to partTargetDuration * 2 (\" + minPartDuration + \").\"\n    });\n    serverControl[phb] = minPartDuration;\n  }\n};\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\n\nvar Parser = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(Parser, _Stream);\n\n  function Parser() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.lineStream = new LineStream();\n    _this.parseStream = new ParseStream();\n\n    _this.lineStream.pipe(_this.parseStream);\n    /* eslint-disable consistent-this */\n\n\n    var self = _assertThisInitialized(_this);\n    /* eslint-enable consistent-this */\n\n\n    var uris = [];\n    var currentUri = {}; // if specified, the active EXT-X-MAP definition\n\n    var currentMap; // if specified, the active decryption key\n\n    var _key;\n\n    var hasParts = false;\n\n    var noop = function noop() {};\n\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    }; // This is the Widevine UUID from DASH IF IOP. The same exact string is\n    // used in MPDs with Widevine encrypted streams.\n\n    var widevineUuid = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'; // group segments into numbered timelines delineated by discontinuities\n\n    var currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data\n\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    }; // keep track of the last seen segment's byte range end, as segments are not required\n    // to provide the offset, in which case it defaults to the next byte after the\n    // previous segment\n\n    var lastByterangeEnd = 0; // keep track of the last seen part's byte range end.\n\n    var lastPartByterangeEnd = 0;\n\n    _this.on('end', function () {\n      // only add preloadSegment if we don't yet have a uri for it.\n      // and we actually have parts/preloadHints\n      if (currentUri.uri || !currentUri.parts && !currentUri.preloadHints) {\n        return;\n      }\n\n      if (!currentUri.map && currentMap) {\n        currentUri.map = currentMap;\n      }\n\n      if (!currentUri.key && _key) {\n        currentUri.key = _key;\n      }\n\n      if (!currentUri.timeline && typeof currentTimeline === 'number') {\n        currentUri.timeline = currentTimeline;\n      }\n\n      _this.manifest.preloadSegment = currentUri;\n    }); // update the manifest with the m3u8 entry from the parse stream\n\n\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup;\n      var rendition;\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            version: function version() {\n              if (entry.version) {\n                this.manifest.version = entry.version;\n              }\n            },\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  /*\n                   * From the latest spec (as of this writing):\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2\n                   *\n                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)\n                   *\n                   * \"If o [offset] is not present, the sub-range begins at the next byte\n                   * following the sub-range of the previous media segment.\"\n                   */\n                  entry.offset = lastByterangeEnd;\n                }\n              }\n\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n\n              lastByterangeEnd = byterange.offset + byterange.length;\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              } // clear the active encryption key\n\n\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n\n              if (entry.attributes.KEYFORMAT === 'com.apple.streamingkeydelivery') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.apple.fps.1_0'] = {\n                  attributes: entry.attributes\n                };\n                return;\n              }\n\n              if (entry.attributes.KEYFORMAT === 'com.microsoft.playready') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.microsoft.playready'] = {\n                  uri: entry.attributes.URI\n                };\n                return;\n              } // check if the content is encrypted for Widevine\n              // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf\n\n\n              if (entry.attributes.KEYFORMAT === widevineUuid) {\n                var VALID_METHODS = ['SAMPLE-AES', 'SAMPLE-AES-CTR', 'SAMPLE-AES-CENC'];\n\n                if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {\n                  this.trigger('warn', {\n                    message: 'invalid key method provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (entry.attributes.METHOD === 'SAMPLE-AES-CENC') {\n                  this.trigger('warn', {\n                    message: 'SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead'\n                  });\n                }\n\n                if (entry.attributes.URI.substring(0, 23) !== 'data:text/plain;base64,') {\n                  this.trigger('warn', {\n                    message: 'invalid key URI provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === '0x')) {\n                  this.trigger('warn', {\n                    message: 'invalid key ID provided for Widevine'\n                  });\n                  return;\n                } // if Widevine key attributes are valid, store them as `contentProtection`\n                // on the manifest to emulate Widevine tag structure in a DASH mpd\n\n\n                this.manifest.contentProtection = this.manifest.contentProtection || {};\n                this.manifest.contentProtection['com.widevine.alpha'] = {\n                  attributes: {\n                    schemeIdUri: entry.attributes.KEYFORMAT,\n                    // remove '0x' from the key id string\n                    keyId: entry.attributes.KEYID.substring(2)\n                  },\n                  // decode the base64-encoded PSSH box\n                  pssh: decodeB64ToUint8Array(entry.attributes.URI.split(',')[1])\n                };\n                return;\n              }\n\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              } // setup an encryption key for upcoming segments\n\n\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n\n              if (_key) {\n                currentMap.key = _key;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              } // find the media group, creating defaults as necessary\n\n\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']]; // collect the rendition metadata\n\n              rendition = {\n                default: /yes/i.test(entry.attributes.DEFAULT)\n              };\n\n              if (rendition.default) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              } // insert the new rendition\n\n\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              if (typeof this.manifest.dateTimeString === 'undefined') {\n                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                // to the manifest object\n                // TODO: Consider removing this in future major version\n                this.manifest.dateTimeString = entry.dateTimeString;\n                this.manifest.dateTimeObject = entry.dateTimeObject;\n              }\n\n              currentUri.dateTimeString = entry.dateTimeString;\n              currentUri.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n\n              this.manifest.targetDuration = entry.duration;\n              setHoldBack.call(this, this.manifest);\n            },\n            start: function start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            },\n            'skip': function skip() {\n              this.manifest.skip = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-SKIP', entry.attributes, ['SKIPPED-SEGMENTS']);\n            },\n            'part': function part() {\n              var _this2 = this;\n\n              hasParts = true; // parts are always specifed before a segment\n\n              var segmentIndex = this.manifest.segments.length;\n              var part = camelCaseKeys(entry.attributes);\n              currentUri.parts = currentUri.parts || [];\n              currentUri.parts.push(part);\n\n              if (part.byterange) {\n                if (!part.byterange.hasOwnProperty('offset')) {\n                  part.byterange.offset = lastPartByterangeEnd;\n                }\n\n                lastPartByterangeEnd = part.byterange.offset + part.byterange.length;\n              }\n\n              var partIndex = currentUri.parts.length - 1;\n              this.warnOnMissingAttributes_(\"#EXT-X-PART #\" + partIndex + \" for segment #\" + segmentIndex, entry.attributes, ['URI', 'DURATION']);\n\n              if (this.manifest.renditionReports) {\n                this.manifest.renditionReports.forEach(function (r, i) {\n                  if (!r.hasOwnProperty('lastPart')) {\n                    _this2.trigger('warn', {\n                      message: \"#EXT-X-RENDITION-REPORT #\" + i + \" lacks required attribute(s): LAST-PART\"\n                    });\n                  }\n                });\n              }\n            },\n            'server-control': function serverControl() {\n              var attrs = this.manifest.serverControl = camelCaseKeys(entry.attributes);\n\n              if (!attrs.hasOwnProperty('canBlockReload')) {\n                attrs.canBlockReload = false;\n                this.trigger('info', {\n                  message: '#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false'\n                });\n              }\n\n              setHoldBack.call(this, this.manifest);\n\n              if (attrs.canSkipDateranges && !attrs.hasOwnProperty('canSkipUntil')) {\n                this.trigger('warn', {\n                  message: '#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set'\n                });\n              }\n            },\n            'preload-hint': function preloadHint() {\n              // parts are always specifed before a segment\n              var segmentIndex = this.manifest.segments.length;\n              var hint = camelCaseKeys(entry.attributes);\n              var isPart = hint.type && hint.type === 'PART';\n              currentUri.preloadHints = currentUri.preloadHints || [];\n              currentUri.preloadHints.push(hint);\n\n              if (hint.byterange) {\n                if (!hint.byterange.hasOwnProperty('offset')) {\n                  // use last part byterange end or zero if not a part.\n                  hint.byterange.offset = isPart ? lastPartByterangeEnd : 0;\n\n                  if (isPart) {\n                    lastPartByterangeEnd = hint.byterange.offset + hint.byterange.length;\n                  }\n                }\n              }\n\n              var index = currentUri.preloadHints.length - 1;\n              this.warnOnMissingAttributes_(\"#EXT-X-PRELOAD-HINT #\" + index + \" for segment #\" + segmentIndex, entry.attributes, ['TYPE', 'URI']);\n\n              if (!hint.type) {\n                return;\n              } // search through all preload hints except for the current one for\n              // a duplicate type.\n\n\n              for (var i = 0; i < currentUri.preloadHints.length - 1; i++) {\n                var otherHint = currentUri.preloadHints[i];\n\n                if (!otherHint.type) {\n                  continue;\n                }\n\n                if (otherHint.type === hint.type) {\n                  this.trigger('warn', {\n                    message: \"#EXT-X-PRELOAD-HINT #\" + index + \" for segment #\" + segmentIndex + \" has the same TYPE \" + hint.type + \" as preload hint #\" + i\n                  });\n                }\n              }\n            },\n            'rendition-report': function renditionReport() {\n              var report = camelCaseKeys(entry.attributes);\n              this.manifest.renditionReports = this.manifest.renditionReports || [];\n              this.manifest.renditionReports.push(report);\n              var index = this.manifest.renditionReports.length - 1;\n              var required = ['LAST-MSN', 'URI'];\n\n              if (hasParts) {\n                required.push('LAST-PART');\n              }\n\n              this.warnOnMissingAttributes_(\"#EXT-X-RENDITION-REPORT #\" + index, entry.attributes, required);\n            },\n            'part-inf': function partInf() {\n              this.manifest.partInf = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-PART-INF', entry.attributes, ['PART-TARGET']);\n\n              if (this.manifest.partInf.partTarget) {\n                this.manifest.partTargetDuration = this.manifest.partInf.partTarget;\n              }\n\n              setHoldBack.call(this, this.manifest);\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri); // if no explicit duration was declared, use the target duration\n\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          } // annotate with encryption information, if necessary\n\n\n          if (_key) {\n            currentUri.key = _key;\n          }\n\n          currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary\n\n          if (currentMap) {\n            currentUri.map = currentMap;\n          } // reset the last byterange end as it needs to be 0 between parts\n\n\n          lastPartByterangeEnd = 0; // prepare for the next URI\n\n          currentUri = {};\n        },\n        comment: function comment() {// comments are not important for playback\n        },\n        custom: function custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n      })[entry.type].call(self);\n    });\n\n    return _this;\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto.warnOnMissingAttributes_ = function warnOnMissingAttributes_(identifier, attributes, required) {\n    var missing = [];\n    required.forEach(function (key) {\n      if (!attributes.hasOwnProperty(key)) {\n        missing.push(key);\n      }\n    });\n\n    if (missing.length) {\n      this.trigger('warn', {\n        message: identifier + \" lacks required attribute(s): \" + missing.join(', ')\n      });\n    }\n  }\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {string} chunk a potentially incomplete portion of the manifest\n   */\n  ;\n\n  _proto.push = function push(chunk) {\n    this.lineStream.push(chunk);\n  }\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n  ;\n\n  _proto.end = function end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n    this.trigger('end');\n  }\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n  ;\n\n  _proto.addParser = function addParser(options) {\n    this.parseStream.addParser(options);\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n  ;\n\n  _proto.addTagMapper = function addTagMapper(options) {\n    this.parseStream.addTagMapper(options);\n  };\n\n  return Parser;\n}(Stream);\n\nexport { LineStream, ParseStream, Parser };\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BandwidthApproximator = void 0;\r\nconst debug_1 = __importDefault(require(\"debug\"));\r\nconst debug = (0, debug_1.default)(\"p2pml:bandwidth-approximator\");\r\nconst SMOOTH_INTERVAL = 2 * 1000;\r\nconst MEASURE_INTERVAL = 40 * 1000;\r\nclass NumberWithTime {\r\n    constructor(value, timeStamp) {\r\n        this.value = value;\r\n        this.timeStamp = timeStamp;\r\n    }\r\n}\r\nclass BandwidthApproximator {\r\n    constructor() {\r\n        this.lastBytes = [];\r\n        this.currentBytesSum = 0;\r\n        this.lastBandwidth = [];\r\n        this.addBytes = (bytes, timeStamp) => {\r\n            debug(\"Add %d bytes.\", bytes);\r\n            this.lastBytes.push(new NumberWithTime(bytes, timeStamp));\r\n            this.currentBytesSum += bytes;\r\n            while (timeStamp - this.lastBytes[0].timeStamp > SMOOTH_INTERVAL) {\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                this.currentBytesSum -= this.lastBytes.shift().value;\r\n            }\r\n            const interval = Math.min(SMOOTH_INTERVAL, timeStamp);\r\n            this.lastBandwidth.push(new NumberWithTime(this.currentBytesSum / interval, timeStamp));\r\n        };\r\n        // in bytes per millisecond\r\n        this.getBandwidth = (timeStamp) => {\r\n            while (this.lastBandwidth.length !== 0 && timeStamp - this.lastBandwidth[0].timeStamp > MEASURE_INTERVAL) {\r\n                this.lastBandwidth.shift();\r\n            }\r\n            let maxBandwidth = 0;\r\n            for (const bandwidth of this.lastBandwidth) {\r\n                if (bandwidth.value > maxBandwidth) {\r\n                    maxBandwidth = bandwidth.value;\r\n                }\r\n            }\r\n            debug(\"Max bandwidth: %d.\", maxBandwidth);\r\n            return maxBandwidth;\r\n        };\r\n        this.getSmoothInterval = () => {\r\n            return SMOOTH_INTERVAL;\r\n        };\r\n        this.getMeasureInterval = () => {\r\n            return MEASURE_INTERVAL;\r\n        };\r\n    }\r\n}\r\nexports.BandwidthApproximator = BandwidthApproximator;\r\n","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HttpMediaManager = void 0;\r\nconst debug_1 = __importDefault(require(\"debug\"));\r\nconst stringly_typed_event_emitter_1 = require(\"./stringly-typed-event-emitter\");\r\nclass FilteredEmitter extends stringly_typed_event_emitter_1.STEEmitter {\r\n}\r\nclass HttpMediaManager extends FilteredEmitter {\r\n    constructor(settings) {\r\n        super();\r\n        this.settings = settings;\r\n        this.fetchRequests = new Map();\r\n        this.failedSegments = new Map();\r\n        this.fetch = (...args) => fetch(...args);\r\n        this.debug = (0, debug_1.default)(\"p2pml:http-media-manager\");\r\n        this.download = (segment, downloadedPieces) => {\r\n            if (this.isDownloading(segment)) {\r\n                return;\r\n            }\r\n            this.cleanTimedOutFailedSegments();\r\n            this.emit(\"segment-start-load\", segment);\r\n            const segmentUrl = segment.priority <= this.settings.skipSegmentBuilderPriority\r\n                ? segment.url\r\n                : this.buildSegmentUrl(segment);\r\n            this.debug(\"http segment download\", segmentUrl);\r\n            segment.requestUrl = segmentUrl;\r\n            const fetchAbort = new AbortController();\r\n            const signal = fetchAbort.signal;\r\n            const headers = new Headers();\r\n            if (segment.range) {\r\n                headers.append(\"Range\", segment.range);\r\n                downloadedPieces = undefined; // TODO: process downloadedPieces for segments with range headers too\r\n            }\r\n            else if (downloadedPieces !== undefined && this.settings.httpUseRanges) {\r\n                let bytesDownloaded = 0;\r\n                for (const piece of downloadedPieces) {\r\n                    bytesDownloaded += piece.byteLength;\r\n                }\r\n                headers.append(\"Range\", `bytes=${bytesDownloaded}-`);\r\n                this.debug(\"continue download from\", bytesDownloaded);\r\n            }\r\n            else {\r\n                downloadedPieces = undefined;\r\n            }\r\n            const fetchRequest = this.fetch(segmentUrl, { headers, signal });\r\n            void this.setupFetchEvents(fetchRequest, segment, downloadedPieces)\r\n                .catch((err) => {\r\n                /**\r\n                 * Handling all fetch errors here\r\n                 */\r\n                if (err.name === \"AbortError\") {\r\n                    /**\r\n                     * This may happen on video seeking\r\n                     * or halted video playing. In most\r\n                     * cases it is normal. For more info\r\n                     * look AbortController...\r\n                     */\r\n                    this.debug(\"Segment loading was aborted by user\", segment);\r\n                    return;\r\n                }\r\n                if (err.message === \"network error\") {\r\n                    this.debug(\"Segment loading is unavailable. No internet\", segment);\r\n                    const netError = Error(\"NETWORK_ERROR\");\r\n                    this.segmentFailure(segment, netError, segment.url);\r\n                    return;\r\n                }\r\n                if (err.message === \"Failed to fetch\") {\r\n                    /**\r\n                     * This error might occur in next cases:\r\n                     *   - Network error\r\n                     *   - Response with erroneous CORS headers\r\n                     *   - Unsupported protocol, e.g. HTTPS\r\n                     *   - Wrong request method\r\n                     */\r\n                    this.debug(\"Segment fetch failed\", segment);\r\n                    const fetchError = Error(\"FETCH_FAILED\");\r\n                    this.segmentFailure(segment, fetchError, segment.url);\r\n                    return;\r\n                }\r\n            });\r\n            this.fetchRequests.set(segment.id, { fetchAbort, segment, initialPriority: segment.priority, segmentUrl });\r\n        };\r\n        this.updatePriority = (segment) => {\r\n            const request = this.fetchRequests.get(segment.id);\r\n            if (!request) {\r\n                throw new Error(\"Cannot update priority of not downloaded segment \" + segment.id);\r\n            }\r\n            // Segment is now in high priority\r\n            // If the segment URL changed, retry the request with the new URL\r\n            if (segment.priority <= this.settings.requiredSegmentsPriority &&\r\n                request.initialPriority > this.settings.requiredSegmentsPriority &&\r\n                request.segmentUrl !== this.buildSegmentUrl(segment)) {\r\n                this.debug(\"aborting http segment abort because the segment is now in a high priority\", segment.id);\r\n                this.abort(segment);\r\n                this.download(segment);\r\n            }\r\n        };\r\n        this.abort = (segment) => {\r\n            const request = this.fetchRequests.get(segment.id);\r\n            if (request) {\r\n                request.fetchAbort.abort();\r\n                this.fetchRequests.delete(segment.id);\r\n                this.debug(\"http segment abort\", segment.id);\r\n            }\r\n        };\r\n        this.isDownloading = (segment) => {\r\n            return this.fetchRequests.has(segment.id);\r\n        };\r\n        this.isFailed = (segment) => {\r\n            const time = this.failedSegments.get(segment.id);\r\n            return time !== undefined && time > this.now();\r\n        };\r\n        this.getActiveDownloads = () => {\r\n            return this.fetchRequests;\r\n        };\r\n        this.getActiveDownloadsCount = () => {\r\n            return this.fetchRequests.size;\r\n        };\r\n        this.destroy = () => {\r\n            this.fetchRequests.forEach((request) => request.fetchAbort.abort());\r\n            this.fetchRequests.clear();\r\n        };\r\n        this.setupFetchEvents = async (fetch, segment, downloadedPieces) => {\r\n            const fetchResponse = await fetch;\r\n            const dataReader = fetchResponse.body.getReader();\r\n            const contentLengthStr = fetchResponse.headers.get(\"Content-Length\");\r\n            const contentLength = Number.parseFloat(contentLengthStr);\r\n            const dataBytes = new Uint8Array(contentLength);\r\n            let nextChunkPos = 0;\r\n            if (Array.isArray(downloadedPieces) && fetchResponse.status === 206) {\r\n                for (const piece of downloadedPieces) {\r\n                    const pieceBytes = new Uint8Array(piece);\r\n                    dataBytes.set(pieceBytes, nextChunkPos);\r\n                    nextChunkPos = piece.byteLength;\r\n                }\r\n            }\r\n            let read;\r\n            while (!(read = await dataReader.read()).done) {\r\n                const chunkBytes = read.value;\r\n                dataBytes.set(chunkBytes, nextChunkPos);\r\n                nextChunkPos += chunkBytes.length;\r\n                /** Events emitters */\r\n                this.emit(\"bytes-downloaded\", segment, chunkBytes.length);\r\n                if (contentLength) {\r\n                    this.emit(\"segment-size\", segment, contentLength);\r\n                }\r\n            }\r\n            if (fetchResponse.status < 200 || fetchResponse.status >= 300) {\r\n                const err = Error(`Segment failure with HTTP code ${fetchResponse.status}`);\r\n                this.segmentFailure(segment, err, fetchResponse.url);\r\n                return;\r\n            }\r\n            await this.segmentDownloadFinished(segment, dataBytes.buffer, fetchResponse);\r\n        };\r\n        this.segmentDownloadFinished = async (segment, data, fetchResponse) => {\r\n            segment.responseUrl = fetchResponse.url;\r\n            if (this.settings.segmentValidator) {\r\n                try {\r\n                    await this.settings.segmentValidator(Object.assign(Object.assign({}, segment), { data: data }), \"http\");\r\n                }\r\n                catch (error) {\r\n                    this.debug(\"segment validator failed\", error);\r\n                    this.segmentFailure(segment, error, fetchResponse.url);\r\n                    return;\r\n                }\r\n            }\r\n            this.fetchRequests.delete(segment.id);\r\n            this.emit(\"segment-loaded\", segment, data);\r\n        };\r\n        this.segmentFailure = (segment, error, responseUrl) => {\r\n            segment.responseUrl = responseUrl;\r\n            this.fetchRequests.delete(segment.id);\r\n            this.failedSegments.set(segment.id, this.now() + this.settings.httpFailedSegmentTimeout);\r\n            this.emit(\"segment-error\", segment, error);\r\n        };\r\n        this.cleanTimedOutFailedSegments = () => {\r\n            const now = this.now();\r\n            const candidates = [];\r\n            this.failedSegments.forEach((time, id) => {\r\n                if (time < now) {\r\n                    candidates.push(id);\r\n                }\r\n            });\r\n            candidates.forEach((id) => this.failedSegments.delete(id));\r\n        };\r\n        this.now = () => performance.now();\r\n        if (settings.localTransport) {\r\n            this.fetch = settings.localTransport;\r\n        }\r\n    }\r\n    buildSegmentUrl(segment) {\r\n        if (this.settings.segmentUrlBuilder) {\r\n            return this.settings.segmentUrlBuilder(segment);\r\n        }\r\n        return segment.url;\r\n    }\r\n}\r\nexports.HttpMediaManager = HttpMediaManager;\r\n","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HybridLoader = void 0;\r\nconst debug_1 = __importDefault(require(\"debug\"));\r\nconst events_1 = require(\"events\");\r\nconst simple_peer_1 = __importDefault(require(\"simple-peer\"));\r\nconst loader_interface_1 = require(\"./loader-interface\");\r\nconst http_media_manager_1 = require(\"./http-media-manager\");\r\nconst p2p_media_manager_1 = require(\"./p2p-media-manager\");\r\nconst media_peer_1 = require(\"./media-peer\");\r\nconst bandwidth_approximator_1 = require(\"./bandwidth-approximator\");\r\nconst segments_memory_storage_1 = require(\"./segments-memory-storage\");\r\nconst defaultSettings = {\r\n    cachedSegmentExpiration: 5 * 60 * 1000,\r\n    cachedSegmentsCount: 30,\r\n    useP2P: true,\r\n    consumeOnly: false,\r\n    requiredSegmentsPriority: 1,\r\n    skipSegmentBuilderPriority: 1,\r\n    simultaneousHttpDownloads: 2,\r\n    httpDownloadProbability: 0.1,\r\n    httpDownloadProbabilityInterval: 1000,\r\n    httpDownloadProbabilitySkipIfNoPeers: false,\r\n    httpFailedSegmentTimeout: 10000,\r\n    httpDownloadMaxPriority: 20,\r\n    httpDownloadInitialTimeout: 0,\r\n    httpDownloadInitialTimeoutPerSegment: 4000,\r\n    httpUseRanges: false,\r\n    simultaneousP2PDownloads: 3,\r\n    p2pDownloadMaxPriority: 20,\r\n    p2pSegmentDownloadTimeout: 60000,\r\n    webRtcMaxMessageSize: 64 * 1024 - 1,\r\n    trackerAnnounce: [\"wss://tracker.novage.com.ua\", \"wss://tracker.openwebtorrent.com\"],\r\n    peerRequestsPerAnnounce: 10,\r\n    rtcConfig: simple_peer_1.default.config,\r\n};\r\nclass HybridLoader extends events_1.EventEmitter {\r\n    constructor(settings = {}) {\r\n        super();\r\n        this.debug = (0, debug_1.default)(\"p2pml:hybrid-loader\");\r\n        this.debugSegments = (0, debug_1.default)(\"p2pml:hybrid-loader-segments\");\r\n        this.segmentsQueue = [];\r\n        this.bandwidthApproximator = new bandwidth_approximator_1.BandwidthApproximator();\r\n        this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n        this.createHttpManager = () => {\r\n            return new http_media_manager_1.HttpMediaManager(this.settings);\r\n        };\r\n        this.createP2PManager = () => {\r\n            return new p2p_media_manager_1.P2PMediaManager(this.segmentsStorage, this.settings);\r\n        };\r\n        this.load = async (segments, streamSwarmId) => {\r\n            this.initRandomDownloadIntervalIfNeeded();\r\n            if (segments.length > 0) {\r\n                this.masterSwarmId = segments[0].masterSwarmId;\r\n            }\r\n            if (this.masterSwarmId !== undefined) {\r\n                this.p2pManager.setStreamSwarmId(streamSwarmId, this.masterSwarmId);\r\n            }\r\n            this.debug(\"load segments\");\r\n            // stop all http requests and p2p downloads for segments that are not in the new load\r\n            let updateSegmentsMap = this.abortUnknownSegments(segments);\r\n            if (this.debug.enabled) {\r\n                for (const segment of segments) {\r\n                    if (!this.segmentsQueue.find((f) => f.id === segment.id)) {\r\n                        this.debug(\"add segment\", segment.id);\r\n                    }\r\n                }\r\n            }\r\n            this.segmentsQueue = segments;\r\n            if (this.masterSwarmId === undefined) {\r\n                return;\r\n            }\r\n            let storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            updateSegmentsMap = this.processSegmentsQueue(storageSegments) || updateSegmentsMap;\r\n            if (await this.cleanSegmentsStorage()) {\r\n                storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n                updateSegmentsMap = true;\r\n            }\r\n            if (updateSegmentsMap && !this.settings.consumeOnly) {\r\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n            }\r\n        };\r\n        this.getSegment = async (id) => {\r\n            return this.masterSwarmId === undefined ? undefined : this.segmentsStorage.getSegment(id, this.masterSwarmId);\r\n        };\r\n        this.getSettings = () => {\r\n            return this.settings;\r\n        };\r\n        this.getDetails = () => {\r\n            return {\r\n                peerId: this.p2pManager.getPeerId(),\r\n            };\r\n        };\r\n        this.getBandwidthEstimate = () => {\r\n            return this.bandwidthApproximator.getBandwidth(this.now());\r\n        };\r\n        this.destroy = async () => {\r\n            if (this.httpRandomDownloadInterval !== undefined) {\r\n                clearInterval(this.httpRandomDownloadInterval);\r\n                this.httpRandomDownloadInterval = undefined;\r\n            }\r\n            this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n            this.segmentsQueue = [];\r\n            this.httpManager.destroy();\r\n            this.p2pManager.destroy();\r\n            this.masterSwarmId = undefined;\r\n            await this.segmentsStorage.destroy();\r\n        };\r\n        this.processInitialSegmentTimeout = async () => {\r\n            if (this.httpRandomDownloadInterval === undefined) {\r\n                return; // Instance destroyed\r\n            }\r\n            if (this.masterSwarmId !== undefined) {\r\n                const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n                if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                    this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n                }\r\n            }\r\n            if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\r\n                // Set one more timeout for a next segment\r\n                setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment);\r\n            }\r\n        };\r\n        this.processSegmentsQueue = (storageSegments) => {\r\n            const currentPriority = this.segmentsQueue.length > 0 ? this.segmentsQueue[0].priority : 0;\r\n            this.debugSegments(`process segments queue. priority: ${currentPriority}, queue length: ${this.segmentsQueue.length}`);\r\n            if (this.masterSwarmId === undefined || this.segmentsQueue.length === 0) {\r\n                return false;\r\n            }\r\n            let updateSegmentsMap = false;\r\n            let segmentsMap;\r\n            let httpAllowed = true;\r\n            if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\r\n                let firstNotDownloadePriority;\r\n                for (const segment of this.segmentsQueue) {\r\n                    if (!storageSegments.has(segment.id)) {\r\n                        firstNotDownloadePriority = segment.priority;\r\n                        break;\r\n                    }\r\n                }\r\n                const httpTimeout = this.now() - this.httpDownloadInitialTimeoutTimestamp;\r\n                httpAllowed =\r\n                    httpTimeout >= this.settings.httpDownloadInitialTimeout ||\r\n                        (firstNotDownloadePriority !== undefined &&\r\n                            httpTimeout > this.settings.httpDownloadInitialTimeoutPerSegment &&\r\n                            firstNotDownloadePriority <= 0);\r\n                if (httpAllowed) {\r\n                    this.debugSegments(\"cancel initial HTTP download timeout - timed out\");\r\n                    this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n                }\r\n            }\r\n            let scheduleNewProcessQueue = false;\r\n            for (let index = 0; index < this.segmentsQueue.length; index++) {\r\n                const segment = this.segmentsQueue[index];\r\n                if (storageSegments.has(segment.id)) {\r\n                    continue;\r\n                }\r\n                // Segment priority changed, notify http manager\r\n                if (this.httpManager.isDownloading(segment)) {\r\n                    this.httpManager.updatePriority(segment);\r\n                    continue;\r\n                }\r\n                const tryHTTP = httpAllowed && segment.priority <= this.settings.requiredSegmentsPriority;\r\n                if (tryHTTP && !this.httpManager.isFailed(segment)) {\r\n                    // Download required segments over HTTP\r\n                    if (this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads) {\r\n                        // Not enough HTTP download resources. Abort one of the HTTP downloads.\r\n                        for (let i = this.segmentsQueue.length - 1; i > index; i--) {\r\n                            const segmentToAbort = this.segmentsQueue[i];\r\n                            if (this.httpManager.isDownloading(segmentToAbort)) {\r\n                                this.debugSegments(\"cancel HTTP download\", segmentToAbort.priority, segmentToAbort.id);\r\n                                this.httpManager.abort(segmentToAbort);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.httpManager.getActiveDownloadsCount() < this.settings.simultaneousHttpDownloads) {\r\n                        // Abort P2P download of the required segment if any and force HTTP download\r\n                        const downloadedPieces = this.p2pManager.abort(segment);\r\n                        this.httpManager.download(segment, downloadedPieces);\r\n                        this.debugSegments(\"HTTP download (priority)\", segment.priority, segment.id);\r\n                        updateSegmentsMap = true;\r\n                        continue;\r\n                    }\r\n                }\r\n                // We wanted to download a failed segment through HTTP, but we could not because of the timeout.\r\n                // Then we need to schedule another processing queue task\r\n                if (tryHTTP && this.httpManager.isFailed(segment)) {\r\n                    scheduleNewProcessQueue = true;\r\n                }\r\n                if (this.p2pManager.isDownloading(segment)) {\r\n                    continue;\r\n                }\r\n                if (segment.priority <= this.settings.requiredSegmentsPriority) {\r\n                    // Download required segments over P2P\r\n                    segmentsMap = segmentsMap ? segmentsMap : this.p2pManager.getOverallSegmentsMap();\r\n                    if (segmentsMap.get(segment.id) !== media_peer_1.MediaPeerSegmentStatus.Loaded) {\r\n                        continue;\r\n                    }\r\n                    if (this.p2pManager.getActiveDownloadsCount() >= this.settings.simultaneousP2PDownloads) {\r\n                        // Not enough P2P download resources. Abort one of the P2P downloads.\r\n                        for (let i = this.segmentsQueue.length - 1; i > index; i--) {\r\n                            const segmentToAbort = this.segmentsQueue[i];\r\n                            if (this.p2pManager.isDownloading(segmentToAbort)) {\r\n                                this.debugSegments(\"cancel P2P download\", segmentToAbort.priority, segmentToAbort.id);\r\n                                this.p2pManager.abort(segmentToAbort);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads) {\r\n                        if (this.p2pManager.download(segment)) {\r\n                            this.debugSegments(\"P2P download (priority)\", segment.priority, segment.id);\r\n                            continue;\r\n                        }\r\n                    }\r\n                    continue;\r\n                }\r\n                if (this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads &&\r\n                    segment.priority <= this.settings.p2pDownloadMaxPriority) {\r\n                    if (this.p2pManager.download(segment)) {\r\n                        this.debugSegments(\"P2P download\", segment.priority, segment.id);\r\n                    }\r\n                }\r\n            }\r\n            if (scheduleNewProcessQueue) {\r\n                setTimeout(async () => {\r\n                    if (this.masterSwarmId === undefined)\r\n                        return;\r\n                    const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n                    this.processSegmentsQueue(storageSegments);\r\n                }, this.settings.httpFailedSegmentTimeout);\r\n            }\r\n            return updateSegmentsMap;\r\n        };\r\n        this.downloadRandomSegmentOverHttp = async () => {\r\n            if (this.masterSwarmId === undefined ||\r\n                this.httpRandomDownloadInterval === undefined ||\r\n                this.httpDownloadInitialTimeoutTimestamp !== -Infinity ||\r\n                this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads ||\r\n                (this.settings.httpDownloadProbabilitySkipIfNoPeers && this.p2pManager.getPeers().size === 0) ||\r\n                this.settings.consumeOnly) {\r\n                return;\r\n            }\r\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            const segmentsMap = this.p2pManager.getOverallSegmentsMap();\r\n            const pendingQueue = this.segmentsQueue.filter((s) => !this.p2pManager.isDownloading(s) &&\r\n                !this.httpManager.isDownloading(s) &&\r\n                !segmentsMap.has(s.id) &&\r\n                !this.httpManager.isFailed(s) &&\r\n                s.priority <= this.settings.httpDownloadMaxPriority &&\r\n                !storageSegments.has(s.id));\r\n            if (pendingQueue.length === 0) {\r\n                return;\r\n            }\r\n            if (Math.random() > this.settings.httpDownloadProbability * pendingQueue.length) {\r\n                return;\r\n            }\r\n            const segment = pendingQueue[Math.floor(Math.random() * pendingQueue.length)];\r\n            this.debugSegments(\"HTTP download (random)\", segment.priority, segment.id);\r\n            this.httpManager.download(segment);\r\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n        };\r\n        this.onSegmentStartLoad = (method, segment) => {\r\n            this.emit(loader_interface_1.Events.SegmentStartLoad, method, segment);\r\n        };\r\n        this.onPieceBytesDownloaded = (method, segment, bytes, peerId) => {\r\n            this.bandwidthApproximator.addBytes(bytes, this.now());\r\n            this.emit(loader_interface_1.Events.PieceBytesDownloaded, method, segment, bytes, peerId);\r\n        };\r\n        this.onPieceBytesUploaded = (method, segment, bytes, peerId) => {\r\n            this.emit(loader_interface_1.Events.PieceBytesUploaded, method, segment, bytes, peerId);\r\n        };\r\n        this.onSegmentLoaded = async (segment, data, peerId) => {\r\n            this.debugSegments(\"segment loaded\", segment.id, segment.id);\r\n            if (this.masterSwarmId === undefined) {\r\n                return;\r\n            }\r\n            segment.data = data;\r\n            segment.downloadBandwidth = this.bandwidthApproximator.getBandwidth(this.now());\r\n            await this.segmentsStorage.storeSegment(segment);\r\n            this.emit(loader_interface_1.Events.SegmentLoaded, segment, peerId);\r\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            this.processSegmentsQueue(storageSegments);\r\n            if (!this.settings.consumeOnly) {\r\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n            }\r\n        };\r\n        this.onSegmentError = async (segment, details, peerId) => {\r\n            this.debugSegments(\"segment error\", segment.id, segment.id, peerId, details);\r\n            this.emit(loader_interface_1.Events.SegmentError, segment, details, peerId);\r\n            if (this.masterSwarmId !== undefined) {\r\n                const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n                if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                    this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n                }\r\n            }\r\n        };\r\n        this.onSegmentSize = async (segment, size) => {\r\n            this.debugSegments(\"segment size\", segment.id, size);\r\n            this.emit(loader_interface_1.Events.SegmentSize, segment, size);\r\n        };\r\n        this.getStreamSwarmId = (segment) => {\r\n            return segment.streamId === undefined ? segment.masterSwarmId : `${segment.masterSwarmId}+${segment.streamId}`;\r\n        };\r\n        this.createSegmentsMap = (storageSegments) => {\r\n            const segmentsMap = {};\r\n            const addSegmentToMap = (segment, status) => {\r\n                const streamSwarmId = this.getStreamSwarmId(segment);\r\n                const segmentId = segment.sequence;\r\n                let segmentsIdsAndStatuses = segmentsMap[streamSwarmId];\r\n                if (segmentsIdsAndStatuses === undefined) {\r\n                    segmentsIdsAndStatuses = [\"\", []];\r\n                    segmentsMap[streamSwarmId] = segmentsIdsAndStatuses;\r\n                }\r\n                const segmentsStatuses = segmentsIdsAndStatuses[1];\r\n                segmentsIdsAndStatuses[0] += segmentsStatuses.length === 0 ? segmentId : `|${segmentId}`;\r\n                segmentsStatuses.push(status);\r\n            };\r\n            for (const storageSegment of storageSegments.values()) {\r\n                addSegmentToMap(storageSegment.segment, media_peer_1.MediaPeerSegmentStatus.Loaded);\r\n            }\r\n            for (const download of this.httpManager.getActiveDownloads().values()) {\r\n                addSegmentToMap(download.segment, media_peer_1.MediaPeerSegmentStatus.LoadingByHttp);\r\n            }\r\n            return segmentsMap;\r\n        };\r\n        this.onPeerConnect = async (peer) => {\r\n            this.emit(loader_interface_1.Events.PeerConnect, peer);\r\n            if (!this.settings.consumeOnly && this.masterSwarmId !== undefined) {\r\n                this.p2pManager.sendSegmentsMap(peer.id, this.createSegmentsMap(await this.segmentsStorage.getSegmentsMap(this.masterSwarmId)));\r\n            }\r\n        };\r\n        this.onPeerClose = (peerId) => {\r\n            this.emit(loader_interface_1.Events.PeerClose, peerId);\r\n        };\r\n        this.onTrackerUpdate = async (data) => {\r\n            if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity &&\r\n                data.incomplete !== undefined &&\r\n                data.incomplete <= 1) {\r\n                this.debugSegments(\"cancel initial HTTP download timeout - no peers\");\r\n                this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n                if (this.masterSwarmId !== undefined) {\r\n                    const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n                    if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                        this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.cleanSegmentsStorage = async () => {\r\n            if (this.masterSwarmId === undefined) {\r\n                return false;\r\n            }\r\n            return this.segmentsStorage.clean(this.masterSwarmId, (id) => this.segmentsQueue.find((queueSegment) => queueSegment.id === id) !== undefined);\r\n        };\r\n        this.now = () => {\r\n            return performance.now();\r\n        };\r\n        this.initRandomDownloadIntervalIfNeeded = () => {\r\n            if (this.httpRandomDownloadInterval !== undefined)\r\n                return;\r\n            // Do once on first call\r\n            this.httpRandomDownloadInterval = setInterval(this.downloadRandomSegmentOverHttp, this.settings.httpDownloadProbabilityInterval);\r\n            if (this.settings.httpDownloadInitialTimeout > 0 &&\r\n                this.settings.httpDownloadInitialTimeoutPerSegment > 0) {\r\n                // Initialize initial HTTP download timeout (i.e. download initial segments over P2P)\r\n                this.debugSegments(\"enable initial HTTP download timeout\", this.settings.httpDownloadInitialTimeout, \"per segment\", this.settings.httpDownloadInitialTimeoutPerSegment);\r\n                this.httpDownloadInitialTimeoutTimestamp = this.now();\r\n                setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment + 100);\r\n            }\r\n        };\r\n        this.abortUnknownSegments = (segments) => {\r\n            let updateSegmentsMap = false;\r\n            for (const segment of this.segmentsQueue) {\r\n                if (!segments.find((f) => f.id === segment.id)) {\r\n                    this.debug(\"remove segment\", segment.id);\r\n                    if (this.httpManager.isDownloading(segment)) {\r\n                        updateSegmentsMap = true;\r\n                        this.httpManager.abort(segment);\r\n                    }\r\n                    else {\r\n                        this.p2pManager.abort(segment);\r\n                    }\r\n                    this.emit(loader_interface_1.Events.SegmentAbort, segment);\r\n                }\r\n            }\r\n            return updateSegmentsMap;\r\n        };\r\n        this.settings = Object.assign(Object.assign({}, defaultSettings), settings);\r\n        const { bufferedSegmentsCount } = settings;\r\n        if (typeof bufferedSegmentsCount === \"number\") {\r\n            if (settings.p2pDownloadMaxPriority === undefined) {\r\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\r\n            }\r\n            if (settings.httpDownloadMaxPriority === undefined) {\r\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\r\n            }\r\n        }\r\n        this.segmentsStorage =\r\n            this.settings.segmentsStorage === undefined\r\n                ? new segments_memory_storage_1.SegmentsMemoryStorage(this.settings)\r\n                : this.settings.segmentsStorage;\r\n        this.debug(\"loader settings\", this.settings);\r\n        this.httpManager = this.createHttpManager();\r\n        this.httpManager.on(\"segment-start-load\", (segment) => this.onSegmentStartLoad(\"http\", segment));\r\n        this.httpManager.on(\"segment-loaded\", this.onSegmentLoaded);\r\n        this.httpManager.on(\"segment-error\", this.onSegmentError);\r\n        this.httpManager.on(\"segment-size\", this.onSegmentSize);\r\n        this.httpManager.on(\"bytes-downloaded\", (segment, bytes) => {\r\n            this.onPieceBytesDownloaded(\"http\", segment, bytes);\r\n        });\r\n        this.p2pManager = this.createP2PManager();\r\n        this.p2pManager.on(\"segment-start-load\", (segment) => this.onSegmentStartLoad(\"p2p\", segment));\r\n        this.p2pManager.on(\"segment-loaded\", this.onSegmentLoaded);\r\n        this.p2pManager.on(\"segment-error\", this.onSegmentError);\r\n        this.p2pManager.on(\"segment-size\", this.onSegmentSize);\r\n        this.p2pManager.on(\"peer-data-updated\", async () => {\r\n            if (this.masterSwarmId === undefined) {\r\n                return;\r\n            }\r\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n            }\r\n        });\r\n        this.p2pManager.on(\"bytes-downloaded\", (segment, bytes, peerId) => this.onPieceBytesDownloaded(\"p2p\", segment, bytes, peerId));\r\n        this.p2pManager.on(\"bytes-uploaded\", (segment, bytes, peerId) => this.onPieceBytesUploaded(\"p2p\", segment, bytes, peerId));\r\n        this.p2pManager.on(\"peer-connected\", this.onPeerConnect);\r\n        this.p2pManager.on(\"peer-closed\", this.onPeerClose);\r\n        this.p2pManager.on(\"tracker-update\", this.onTrackerUpdate);\r\n    }\r\n}\r\nexports.HybridLoader = HybridLoader;\r\nHybridLoader.isSupported = () => {\r\n    return window.RTCPeerConnection.prototype.createDataChannel !== undefined;\r\n};\r\n","\"use strict\";\r\n/**\r\n * @license Apache-2.0\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.version = void 0;\r\nexports.version = \"0.6.2\";\r\n__exportStar(require(\"./loader-interface\"), exports);\r\n__exportStar(require(\"./hybrid-loader\"), exports);\r\n","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Events = void 0;\r\nvar Events;\r\n(function (Events) {\r\n    /**\r\n     * Emitted when segment has been downloaded.\r\n     * Args: segment\r\n     */\r\n    Events[\"SegmentLoaded\"] = \"segment_loaded\";\r\n    /**\r\n     * Emitted when an error occurred while loading the segment.\r\n     * Args: segment, error\r\n     */\r\n    Events[\"SegmentError\"] = \"segment_error\";\r\n    /**\r\n     * Emitter when we the segment size is known\r\n     * Args: segment, size\r\n     */\r\n    Events[\"SegmentSize\"] = \"segment_size\";\r\n    /**\r\n     * Emitted for each segment that does not hit into a new segments queue when the load() method is called.\r\n     * Args: segment\r\n     */\r\n    Events[\"SegmentAbort\"] = \"segment_abort\";\r\n    /**\r\n     * Emitted when the loader started to load a segment\r\n     * Args: method, segment\r\n     */\r\n    Events[\"SegmentStartLoad\"] = \"segment_start_load\";\r\n    /**\r\n     * Emitted when a peer is connected.\r\n     * Args: peer\r\n     */\r\n    Events[\"PeerConnect\"] = \"peer_connect\";\r\n    /**\r\n     * Emitted when a peer is disconnected.\r\n     * Args: peerId\r\n     */\r\n    Events[\"PeerClose\"] = \"peer_close\";\r\n    /**\r\n     * Emitted when a segment piece has been downloaded.\r\n     * Args: method (can be \"http\" or \"p2p\" only), bytes\r\n     */\r\n    Events[\"PieceBytesDownloaded\"] = \"piece_bytes_downloaded\";\r\n    /**\r\n     * Emitted when a segment piece has been uploaded.\r\n     * Args: method (can be \"p2p\" only), bytes\r\n     */\r\n    Events[\"PieceBytesUploaded\"] = \"piece_bytes_uploaded\";\r\n})(Events = exports.Events || (exports.Events = {}));\r\n","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MediaPeer = exports.MediaPeerSegmentStatus = void 0;\r\n/* eslint-disable @typescript-eslint/no-unsafe-call */\r\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\nconst debug_1 = __importDefault(require(\"debug\"));\r\nconst buffer_1 = require(\"buffer\");\r\nconst stringly_typed_event_emitter_1 = require(\"./stringly-typed-event-emitter\");\r\nvar MediaPeerCommands;\r\n(function (MediaPeerCommands) {\r\n    MediaPeerCommands[MediaPeerCommands[\"SegmentData\"] = 0] = \"SegmentData\";\r\n    MediaPeerCommands[MediaPeerCommands[\"SegmentAbsent\"] = 1] = \"SegmentAbsent\";\r\n    MediaPeerCommands[MediaPeerCommands[\"SegmentsMap\"] = 2] = \"SegmentsMap\";\r\n    MediaPeerCommands[MediaPeerCommands[\"SegmentRequest\"] = 3] = \"SegmentRequest\";\r\n    MediaPeerCommands[MediaPeerCommands[\"CancelSegmentRequest\"] = 4] = \"CancelSegmentRequest\";\r\n})(MediaPeerCommands || (MediaPeerCommands = {}));\r\nvar MediaPeerSegmentStatus;\r\n(function (MediaPeerSegmentStatus) {\r\n    MediaPeerSegmentStatus[MediaPeerSegmentStatus[\"Loaded\"] = 0] = \"Loaded\";\r\n    MediaPeerSegmentStatus[MediaPeerSegmentStatus[\"LoadingByHttp\"] = 1] = \"LoadingByHttp\";\r\n})(MediaPeerSegmentStatus = exports.MediaPeerSegmentStatus || (exports.MediaPeerSegmentStatus = {}));\r\nclass DownloadingSegment {\r\n    constructor(id, size) {\r\n        this.id = id;\r\n        this.size = size;\r\n        this.bytesDownloaded = 0;\r\n        this.pieces = [];\r\n    }\r\n}\r\nclass MediaPeer extends stringly_typed_event_emitter_1.STEEmitter {\r\n    constructor(\r\n    // eslint-disable-next-line\r\n    peer, settings) {\r\n        super();\r\n        this.peer = peer;\r\n        this.settings = settings;\r\n        this.remoteAddress = \"\";\r\n        this.downloadingSegmentId = null;\r\n        this.downloadingSegment = null;\r\n        this.segmentsMap = new Map();\r\n        this.debug = (0, debug_1.default)(\"p2pml:media-peer\");\r\n        this.timer = null;\r\n        this.onPeerConnect = () => {\r\n            this.debug(\"peer connect\", this.id, this);\r\n            this.remoteAddress = this.peer.remoteAddress;\r\n            this.emit(\"connect\", this);\r\n        };\r\n        this.onPeerClose = () => {\r\n            this.debug(\"peer close\", this.id, this);\r\n            this.terminateSegmentRequest();\r\n            this.emit(\"close\", this);\r\n        };\r\n        this.onPeerError = (error) => {\r\n            this.debug(\"peer error\", this.id, error, this);\r\n        };\r\n        this.receiveSegmentPiece = (data) => {\r\n            if (!this.downloadingSegment) {\r\n                // The segment was not requested or canceled\r\n                this.debug(\"peer segment not requested\", this.id, this);\r\n                return;\r\n            }\r\n            this.downloadingSegment.bytesDownloaded += data.byteLength;\r\n            this.downloadingSegment.pieces.push(data);\r\n            const segmentId = this.downloadingSegment.id;\r\n            this.emit(\"bytes-downloaded\", this, segmentId, data.byteLength);\r\n            if (this.downloadingSegment.bytesDownloaded === this.downloadingSegment.size) {\r\n                const segmentData = new Uint8Array(this.downloadingSegment.size);\r\n                let offset = 0;\r\n                for (const piece of this.downloadingSegment.pieces) {\r\n                    segmentData.set(new Uint8Array(piece), offset);\r\n                    offset += piece.byteLength;\r\n                }\r\n                this.debug(\"peer segment download done\", this.id, segmentId, this);\r\n                this.terminateSegmentRequest();\r\n                this.emit(\"segment-loaded\", this, segmentId, segmentData.buffer);\r\n            }\r\n            else if (this.downloadingSegment.bytesDownloaded > this.downloadingSegment.size) {\r\n                this.debug(\"peer segment download bytes mismatch\", this.id, segmentId, this);\r\n                this.terminateSegmentRequest();\r\n                this.emit(\"segment-error\", this, segmentId, \"Too many bytes received for segment\");\r\n            }\r\n        };\r\n        this.getJsonCommand = (data) => {\r\n            const bytes = new Uint8Array(data);\r\n            // Serialized JSON string check by first, second and last characters: '{\" .... }'\r\n            if (bytes[0] === 123 && bytes[1] === 34 && bytes[data.byteLength - 1] === 125) {\r\n                try {\r\n                    return JSON.parse(new TextDecoder().decode(data));\r\n                }\r\n                catch (_a) {\r\n                    return null;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        this.onPeerData = (data) => {\r\n            const command = this.getJsonCommand(data);\r\n            if (command === null) {\r\n                this.receiveSegmentPiece(data);\r\n                return;\r\n            }\r\n            if (this.downloadingSegment) {\r\n                this.debug(\"peer segment download is interrupted by a command\", this.id, this);\r\n                const segmentId = this.downloadingSegment.id;\r\n                this.terminateSegmentRequest();\r\n                this.emit(\"segment-error\", this, segmentId, \"Segment download is interrupted by a command\");\r\n                return;\r\n            }\r\n            this.debug(\"peer receive command\", this.id, command, this);\r\n            switch (command.c) {\r\n                case MediaPeerCommands.SegmentsMap:\r\n                    this.segmentsMap = this.createSegmentsMap(command.m);\r\n                    this.emit(\"data-updated\");\r\n                    break;\r\n                case MediaPeerCommands.SegmentRequest:\r\n                    this.emit(\"segment-request\", this, command.i);\r\n                    break;\r\n                case MediaPeerCommands.SegmentData:\r\n                    if (this.downloadingSegmentId &&\r\n                        this.downloadingSegmentId === command.i &&\r\n                        typeof command.s === \"number\" &&\r\n                        command.s >= 0) {\r\n                        this.downloadingSegment = new DownloadingSegment(command.i, command.s);\r\n                        this.emit(\"segment-start-load\", this.downloadingSegment.id);\r\n                        this.emit(\"segment-size\", this.downloadingSegment.id, this.downloadingSegment.size);\r\n                        this.cancelResponseTimeoutTimer();\r\n                    }\r\n                    break;\r\n                case MediaPeerCommands.SegmentAbsent:\r\n                    if (this.downloadingSegmentId && this.downloadingSegmentId === command.i) {\r\n                        this.terminateSegmentRequest();\r\n                        this.segmentsMap.delete(command.i);\r\n                        this.emit(\"segment-absent\", this, command.i);\r\n                    }\r\n                    break;\r\n                case MediaPeerCommands.CancelSegmentRequest:\r\n                    // TODO: peer stop sending buffer\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n        this.createSegmentsMap = (segments) => {\r\n            if (!(segments instanceof Object)) {\r\n                return new Map();\r\n            }\r\n            const segmentsMap = new Map();\r\n            for (const streamSwarmId of Object.keys(segments)) {\r\n                const swarmData = segments[streamSwarmId];\r\n                if (!(swarmData instanceof Array) ||\r\n                    swarmData.length !== 2 ||\r\n                    typeof swarmData[0] !== \"string\" ||\r\n                    !(swarmData[1] instanceof Array)) {\r\n                    return new Map();\r\n                }\r\n                const segmentsIds = swarmData[0].split(\"|\");\r\n                const segmentsStatuses = swarmData[1];\r\n                if (segmentsIds.length !== segmentsStatuses.length) {\r\n                    return new Map();\r\n                }\r\n                for (let i = 0; i < segmentsIds.length; i++) {\r\n                    const segmentStatus = segmentsStatuses[i];\r\n                    if (typeof segmentStatus !== \"number\" || MediaPeerSegmentStatus[segmentStatus] === undefined) {\r\n                        return new Map();\r\n                    }\r\n                    segmentsMap.set(`${streamSwarmId}+${segmentsIds[i]}`, segmentStatus);\r\n                }\r\n            }\r\n            return segmentsMap;\r\n        };\r\n        this.sendCommand = (command) => {\r\n            this.debug(\"peer send command\", this.id, command, this);\r\n            this.peer.write(JSON.stringify(command));\r\n        };\r\n        this.destroy = () => {\r\n            this.debug(\"peer destroy\", this.id, this);\r\n            this.terminateSegmentRequest();\r\n            this.peer.destroy();\r\n        };\r\n        this.getDownloadingSegmentId = () => {\r\n            return this.downloadingSegmentId;\r\n        };\r\n        this.getSegmentsMap = () => {\r\n            return this.segmentsMap;\r\n        };\r\n        this.sendSegmentsMap = (segmentsMap) => {\r\n            this.sendCommand({ c: MediaPeerCommands.SegmentsMap, m: segmentsMap });\r\n        };\r\n        this.sendSegmentData = (segmentId, data) => {\r\n            this.sendCommand({\r\n                c: MediaPeerCommands.SegmentData,\r\n                i: segmentId,\r\n                s: data.byteLength,\r\n            });\r\n            let bytesLeft = data.byteLength;\r\n            while (bytesLeft > 0) {\r\n                const bytesToSend = bytesLeft >= this.settings.webRtcMaxMessageSize ? this.settings.webRtcMaxMessageSize : bytesLeft;\r\n                const buffer = buffer_1.Buffer.from(data, data.byteLength - bytesLeft, bytesToSend);\r\n                this.peer.write(buffer);\r\n                bytesLeft -= bytesToSend;\r\n            }\r\n            this.emit(\"bytes-uploaded\", this, segmentId, data.byteLength);\r\n        };\r\n        this.sendSegmentAbsent = (segmentId) => {\r\n            this.sendCommand({ c: MediaPeerCommands.SegmentAbsent, i: segmentId });\r\n        };\r\n        this.requestSegment = (segmentId) => {\r\n            if (this.downloadingSegmentId) {\r\n                throw new Error(\"A segment is already downloading: \" + this.downloadingSegmentId);\r\n            }\r\n            this.sendCommand({ c: MediaPeerCommands.SegmentRequest, i: segmentId });\r\n            this.downloadingSegmentId = segmentId;\r\n            this.runResponseTimeoutTimer();\r\n        };\r\n        this.cancelSegmentRequest = () => {\r\n            let downloadingSegment;\r\n            if (this.downloadingSegmentId) {\r\n                const segmentId = this.downloadingSegmentId;\r\n                downloadingSegment = this.downloadingSegment ? this.downloadingSegment.pieces : undefined;\r\n                this.terminateSegmentRequest();\r\n                this.sendCommand({ c: MediaPeerCommands.CancelSegmentRequest, i: segmentId });\r\n            }\r\n            return downloadingSegment;\r\n        };\r\n        this.runResponseTimeoutTimer = () => {\r\n            this.timer = setTimeout(() => {\r\n                this.timer = null;\r\n                if (!this.downloadingSegmentId) {\r\n                    return;\r\n                }\r\n                const segmentId = this.downloadingSegmentId;\r\n                this.cancelSegmentRequest();\r\n                this.emit(\"segment-timeout\", this, segmentId); // TODO: send peer not responding event\r\n            }, this.settings.p2pSegmentDownloadTimeout);\r\n        };\r\n        this.cancelResponseTimeoutTimer = () => {\r\n            if (this.timer) {\r\n                clearTimeout(this.timer);\r\n                this.timer = null;\r\n            }\r\n        };\r\n        this.terminateSegmentRequest = () => {\r\n            this.downloadingSegmentId = null;\r\n            this.downloadingSegment = null;\r\n            this.cancelResponseTimeoutTimer();\r\n        };\r\n        this.peer.on(\"connect\", this.onPeerConnect);\r\n        this.peer.on(\"close\", this.onPeerClose);\r\n        this.peer.on(\"error\", this.onPeerError);\r\n        this.peer.on(\"data\", this.onPeerData);\r\n        this.id = peer.id;\r\n    }\r\n}\r\nexports.MediaPeer = MediaPeer;\r\n","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.P2PMediaManager = void 0;\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n/* eslint-disable @typescript-eslint/no-unsafe-call */\r\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\nconst debug_1 = __importDefault(require(\"debug\"));\r\nconst client_1 = __importDefault(require(\"bittorrent-tracker/client\"));\r\nconst buffer_1 = require(\"buffer\");\r\nconst sha1_1 = __importDefault(require(\"sha.js/sha1\"));\r\nconst stringly_typed_event_emitter_1 = require(\"./stringly-typed-event-emitter\");\r\nconst media_peer_1 = require(\"./media-peer\");\r\nconst index_1 = require(\"./index\");\r\nconst PEER_PROTOCOL_VERSION = 2;\r\nconst PEER_ID_VERSION_STRING = index_1.version.replace(/\\d*./g, (v) => `0${parseInt(v, 10) % 100}`.slice(-2)).slice(0, 4);\r\nconst PEER_ID_VERSION_PREFIX = `-WW${PEER_ID_VERSION_STRING}-`; // Using WebTorrent client ID in order to not be banned by websocket trackers\r\nclass PeerSegmentRequest {\r\n    constructor(peerId, segment) {\r\n        this.peerId = peerId;\r\n        this.segment = segment;\r\n    }\r\n}\r\nfunction generatePeerId() {\r\n    const PEER_ID_SYMBOLS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    const PEER_ID_LENGTH = 20;\r\n    let peerId = PEER_ID_VERSION_PREFIX;\r\n    for (let i = 0; i < PEER_ID_LENGTH - PEER_ID_VERSION_PREFIX.length; i++) {\r\n        peerId += PEER_ID_SYMBOLS.charAt(Math.floor(Math.random() * PEER_ID_SYMBOLS.length));\r\n    }\r\n    return new TextEncoder().encode(peerId).buffer;\r\n}\r\nclass P2PMediaManager extends stringly_typed_event_emitter_1.STEEmitter {\r\n    constructor(segmentsStorage, settings) {\r\n        super();\r\n        this.segmentsStorage = segmentsStorage;\r\n        this.settings = settings;\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.trackerClient = null;\r\n        this.peers = new Map();\r\n        this.peerCandidates = new Map();\r\n        this.peerSegmentRequests = new Map();\r\n        this.streamSwarmId = null;\r\n        this.debug = (0, debug_1.default)(\"p2pml:p2p-media-manager\");\r\n        this.pendingTrackerClient = null;\r\n        this.getPeers = () => {\r\n            return this.peers;\r\n        };\r\n        this.getPeerId = () => {\r\n            return buffer_1.Buffer.from(this.peerId).toString(\"hex\");\r\n        };\r\n        this.setStreamSwarmId = (streamSwarmId, masterSwarmId) => {\r\n            if (this.streamSwarmId === streamSwarmId) {\r\n                return;\r\n            }\r\n            this.destroy(true);\r\n            this.streamSwarmId = streamSwarmId;\r\n            this.masterSwarmId = masterSwarmId;\r\n            this.debug(\"stream swarm ID\", this.streamSwarmId);\r\n            this.pendingTrackerClient = {\r\n                isDestroyed: false,\r\n            };\r\n            const pendingTrackerClient = this.pendingTrackerClient;\r\n            // TODO: native browser 'crypto.subtle' implementation doesn't work in Chrome in insecure pages\r\n            // TODO: Edge doesn't support SHA-1. Change to SHA-256 once Edge support is required.\r\n            // const infoHash = await crypto.subtle.digest(\"SHA-1\", new TextEncoder().encode(PEER_PROTOCOL_VERSION + this.streamSwarmId));\r\n            const infoHash = new sha1_1.default().update(`${PEER_PROTOCOL_VERSION}${this.streamSwarmId}`).digest();\r\n            // destroy may be called while waiting for the hash to be calculated\r\n            if (!pendingTrackerClient.isDestroyed) {\r\n                this.pendingTrackerClient = null;\r\n                this.createClient(infoHash);\r\n            }\r\n            else if (this.trackerClient !== null) {\r\n                this.trackerClient.destroy();\r\n                this.trackerClient = null;\r\n            }\r\n        };\r\n        this.createClient = (infoHash) => {\r\n            if (!this.settings.useP2P) {\r\n                return;\r\n            }\r\n            const clientOptions = {\r\n                infoHash: buffer_1.Buffer.from(infoHash, 0, 20),\r\n                peerId: buffer_1.Buffer.from(this.peerId, 0, 20),\r\n                announce: this.settings.trackerAnnounce,\r\n                rtcConfig: this.settings.rtcConfig,\r\n                port: 6881,\r\n                getAnnounceOpts: () => {\r\n                    return { numwant: this.settings.peerRequestsPerAnnounce };\r\n                },\r\n            };\r\n            let oldTrackerClient = this.trackerClient;\r\n            this.trackerClient = new client_1.default(clientOptions);\r\n            this.trackerClient.on(\"error\", this.onTrackerError);\r\n            this.trackerClient.on(\"warning\", this.onTrackerWarning);\r\n            this.trackerClient.on(\"update\", this.onTrackerUpdate);\r\n            this.trackerClient.on(\"peer\", this.onTrackerPeer);\r\n            this.trackerClient.start();\r\n            if (oldTrackerClient !== null) {\r\n                oldTrackerClient.destroy();\r\n                oldTrackerClient = null;\r\n            }\r\n        };\r\n        this.onTrackerError = (error) => {\r\n            this.debug(\"tracker error\", error);\r\n        };\r\n        this.onTrackerWarning = (warning) => {\r\n            this.debug(\"tracker warning\", warning);\r\n        };\r\n        this.onTrackerUpdate = (data) => {\r\n            this.debug(\"tracker update\", data);\r\n            this.emit(\"tracker-update\", data);\r\n        };\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.onTrackerPeer = (trackerPeer) => {\r\n            this.debug(\"tracker peer\", trackerPeer.id, trackerPeer);\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            if (this.peers.has(trackerPeer.id)) {\r\n                this.debug(\"tracker peer already connected\", trackerPeer.id, trackerPeer);\r\n                trackerPeer.destroy();\r\n                return;\r\n            }\r\n            const peer = new media_peer_1.MediaPeer(trackerPeer, this.settings);\r\n            peer.on(\"connect\", this.onPeerConnect);\r\n            peer.on(\"close\", this.onPeerClose);\r\n            peer.on(\"data-updated\", this.onPeerDataUpdated);\r\n            peer.on(\"segment-request\", this.onSegmentRequest);\r\n            peer.on(\"segment-loaded\", this.onSegmentLoaded);\r\n            peer.on(\"segment-absent\", this.onSegmentAbsent);\r\n            peer.on(\"segment-error\", this.onSegmentError);\r\n            peer.on(\"segment-size\", this.onSegmentSize);\r\n            peer.on(\"segment-start-load\", this.onSegmentStartLoad);\r\n            peer.on(\"segment-timeout\", this.onSegmentTimeout);\r\n            peer.on(\"bytes-downloaded\", this.onPieceBytesDownloaded);\r\n            peer.on(\"bytes-uploaded\", this.onPieceBytesUploaded);\r\n            let peerCandidatesById = this.peerCandidates.get(peer.id);\r\n            if (!peerCandidatesById) {\r\n                peerCandidatesById = [];\r\n                this.peerCandidates.set(peer.id, peerCandidatesById);\r\n            }\r\n            peerCandidatesById.push(peer);\r\n        };\r\n        this.download = (segment) => {\r\n            if (this.isDownloading(segment)) {\r\n                return false;\r\n            }\r\n            const candidates = [];\r\n            for (const peer of this.peers.values()) {\r\n                if (peer.getDownloadingSegmentId() === null &&\r\n                    peer.getSegmentsMap().get(segment.id) === media_peer_1.MediaPeerSegmentStatus.Loaded) {\r\n                    candidates.push(peer);\r\n                }\r\n            }\r\n            if (candidates.length === 0) {\r\n                return false;\r\n            }\r\n            const peer = candidates[Math.floor(Math.random() * candidates.length)];\r\n            peer.requestSegment(segment.id);\r\n            this.peerSegmentRequests.set(segment.id, new PeerSegmentRequest(peer.id, segment));\r\n            return true;\r\n        };\r\n        this.abort = (segment) => {\r\n            let downloadingSegment;\r\n            const peerSegmentRequest = this.peerSegmentRequests.get(segment.id);\r\n            if (peerSegmentRequest) {\r\n                const peer = this.peers.get(peerSegmentRequest.peerId);\r\n                if (peer) {\r\n                    downloadingSegment = peer.cancelSegmentRequest();\r\n                }\r\n                this.peerSegmentRequests.delete(segment.id);\r\n            }\r\n            return downloadingSegment;\r\n        };\r\n        this.isDownloading = (segment) => {\r\n            return this.peerSegmentRequests.has(segment.id);\r\n        };\r\n        this.getActiveDownloadsCount = () => {\r\n            return this.peerSegmentRequests.size;\r\n        };\r\n        this.destroy = (swarmChange = false) => {\r\n            this.streamSwarmId = null;\r\n            if (this.trackerClient) {\r\n                this.trackerClient.stop();\r\n                if (swarmChange) {\r\n                    // Don't destroy trackerClient to reuse its WebSocket connection to the tracker server\r\n                    this.trackerClient.removeAllListeners(\"error\");\r\n                    this.trackerClient.removeAllListeners(\"warning\");\r\n                    this.trackerClient.removeAllListeners(\"update\");\r\n                    this.trackerClient.removeAllListeners(\"peer\");\r\n                }\r\n                else {\r\n                    this.trackerClient.destroy();\r\n                    this.trackerClient = null;\r\n                }\r\n            }\r\n            if (this.pendingTrackerClient) {\r\n                this.pendingTrackerClient.isDestroyed = true;\r\n                this.pendingTrackerClient = null;\r\n            }\r\n            this.peers.forEach((peer) => peer.destroy());\r\n            this.peers.clear();\r\n            this.peerSegmentRequests.clear();\r\n            for (const peerCandidateById of this.peerCandidates.values()) {\r\n                for (const peerCandidate of peerCandidateById) {\r\n                    peerCandidate.destroy();\r\n                }\r\n            }\r\n            this.peerCandidates.clear();\r\n        };\r\n        this.sendSegmentsMapToAll = (segmentsMap) => {\r\n            this.peers.forEach((peer) => peer.sendSegmentsMap(segmentsMap));\r\n        };\r\n        this.sendSegmentsMap = (peerId, segmentsMap) => {\r\n            const peer = this.peers.get(peerId);\r\n            if (peer) {\r\n                peer.sendSegmentsMap(segmentsMap);\r\n            }\r\n        };\r\n        this.getOverallSegmentsMap = () => {\r\n            const overallSegmentsMap = new Map();\r\n            for (const peer of this.peers.values()) {\r\n                for (const [segmentId, segmentStatus] of peer.getSegmentsMap()) {\r\n                    if (segmentStatus === media_peer_1.MediaPeerSegmentStatus.Loaded) {\r\n                        overallSegmentsMap.set(segmentId, media_peer_1.MediaPeerSegmentStatus.Loaded);\r\n                    }\r\n                    else if (!overallSegmentsMap.get(segmentId)) {\r\n                        overallSegmentsMap.set(segmentId, media_peer_1.MediaPeerSegmentStatus.LoadingByHttp);\r\n                    }\r\n                }\r\n            }\r\n            return overallSegmentsMap;\r\n        };\r\n        this.onPieceBytesDownloaded = (peer, segmentId, bytes) => {\r\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\r\n            if (peerSegmentRequest) {\r\n                this.emit(\"bytes-downloaded\", peerSegmentRequest.segment, bytes, peer.id);\r\n            }\r\n        };\r\n        this.onPieceBytesUploaded = async (peer, segmentId, bytes) => {\r\n            if (this.masterSwarmId === undefined) {\r\n                return;\r\n            }\r\n            const segment = await this.segmentsStorage.getSegment(segmentId, this.masterSwarmId);\r\n            if (segment) {\r\n                this.emit(\"bytes-uploaded\", segment, bytes, peer.id);\r\n            }\r\n        };\r\n        this.onPeerConnect = (peer) => {\r\n            const connectedPeer = this.peers.get(peer.id);\r\n            if (connectedPeer) {\r\n                this.debug(\"tracker peer already connected (in peer connect)\", peer.id, peer);\r\n                peer.destroy();\r\n                return;\r\n            }\r\n            // First peer with the ID connected\r\n            this.peers.set(peer.id, peer);\r\n            // Destroy all other peer candidates\r\n            const peerCandidatesById = this.peerCandidates.get(peer.id);\r\n            if (peerCandidatesById) {\r\n                for (const peerCandidate of peerCandidatesById) {\r\n                    if (peerCandidate !== peer) {\r\n                        peerCandidate.destroy();\r\n                    }\r\n                }\r\n                this.peerCandidates.delete(peer.id);\r\n            }\r\n            this.emit(\"peer-connected\", { id: peer.id, remoteAddress: peer.remoteAddress });\r\n        };\r\n        this.onPeerClose = (peer) => {\r\n            if (this.peers.get(peer.id) !== peer) {\r\n                // Try to delete the peer candidate\r\n                const peerCandidatesById = this.peerCandidates.get(peer.id);\r\n                if (!peerCandidatesById) {\r\n                    return;\r\n                }\r\n                const index = peerCandidatesById.indexOf(peer);\r\n                if (index !== -1) {\r\n                    peerCandidatesById.splice(index, 1);\r\n                }\r\n                if (peerCandidatesById.length === 0) {\r\n                    this.peerCandidates.delete(peer.id);\r\n                }\r\n                return;\r\n            }\r\n            for (const [key, value] of this.peerSegmentRequests) {\r\n                if (value.peerId === peer.id) {\r\n                    this.peerSegmentRequests.delete(key);\r\n                }\r\n            }\r\n            this.peers.delete(peer.id);\r\n            this.emit(\"peer-data-updated\");\r\n            this.emit(\"peer-closed\", peer.id);\r\n        };\r\n        this.onPeerDataUpdated = () => {\r\n            this.emit(\"peer-data-updated\");\r\n        };\r\n        this.onSegmentRequest = async (peer, segmentId) => {\r\n            if (this.masterSwarmId === undefined) {\r\n                return;\r\n            }\r\n            const segment = await this.segmentsStorage.getSegment(segmentId, this.masterSwarmId);\r\n            if (segment && segment.data) {\r\n                peer.sendSegmentData(segmentId, segment.data);\r\n            }\r\n            else {\r\n                peer.sendSegmentAbsent(segmentId);\r\n            }\r\n        };\r\n        this.onSegmentLoaded = async (peer, segmentId, data) => {\r\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\r\n            if (!peerSegmentRequest) {\r\n                return;\r\n            }\r\n            const segment = peerSegmentRequest.segment;\r\n            if (this.settings.segmentValidator) {\r\n                try {\r\n                    await this.settings.segmentValidator(Object.assign(Object.assign({}, segment), { data: data }), \"p2p\", peer.id);\r\n                }\r\n                catch (error) {\r\n                    this.debug(\"segment validator failed\", error);\r\n                    this.peerSegmentRequests.delete(segmentId);\r\n                    this.emit(\"segment-error\", segment, error, peer.id);\r\n                    this.onPeerClose(peer);\r\n                    return;\r\n                }\r\n            }\r\n            this.peerSegmentRequests.delete(segmentId);\r\n            this.emit(\"segment-loaded\", segment, data, peer.id);\r\n        };\r\n        this.onSegmentAbsent = (peer, segmentId) => {\r\n            this.peerSegmentRequests.delete(segmentId);\r\n            this.emit(\"peer-data-updated\");\r\n        };\r\n        this.onSegmentError = (peer, segmentId, description) => {\r\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\r\n            if (peerSegmentRequest) {\r\n                this.peerSegmentRequests.delete(segmentId);\r\n                this.emit(\"segment-error\", peerSegmentRequest.segment, description, peer.id);\r\n            }\r\n        };\r\n        this.onSegmentSize = (segmentId, size) => {\r\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\r\n            if (peerSegmentRequest) {\r\n                this.emit(\"segment-size\", peerSegmentRequest.segment, size);\r\n            }\r\n        };\r\n        this.onSegmentStartLoad = (segmentId, size) => {\r\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\r\n            if (peerSegmentRequest) {\r\n                this.emit(\"segment-start-load\", peerSegmentRequest.segment, size);\r\n            }\r\n        };\r\n        this.onSegmentTimeout = (peer, segmentId) => {\r\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\r\n            if (peerSegmentRequest) {\r\n                this.peerSegmentRequests.delete(segmentId);\r\n                peer.destroy();\r\n                if (this.peers.delete(peerSegmentRequest.peerId)) {\r\n                    this.emit(\"peer-data-updated\");\r\n                }\r\n            }\r\n        };\r\n        this.peerId = settings.useP2P ? generatePeerId() : new ArrayBuffer(0);\r\n        if (this.debug.enabled) {\r\n            this.debug(\"peer ID\", this.getPeerId(), new TextDecoder().decode(this.peerId));\r\n        }\r\n    }\r\n}\r\nexports.P2PMediaManager = P2PMediaManager;\r\n","\"use strict\";\r\n/**\r\n * Copyright 2019 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SegmentsMemoryStorage = void 0;\r\nclass SegmentsMemoryStorage {\r\n    constructor(settings) {\r\n        this.settings = settings;\r\n        this.cache = new Map();\r\n        this.storeSegment = async (segment) => {\r\n            this.cache.set(segment.id, { segment, lastAccessed: performance.now() });\r\n        };\r\n        this.getSegmentsMap = async () => {\r\n            return this.cache;\r\n        };\r\n        this.getSegment = async (id) => {\r\n            const cacheItem = this.cache.get(id);\r\n            if (cacheItem === undefined) {\r\n                return undefined;\r\n            }\r\n            cacheItem.lastAccessed = performance.now();\r\n            return cacheItem.segment;\r\n        };\r\n        this.hasSegment = async (id) => {\r\n            return this.cache.has(id);\r\n        };\r\n        this.clean = async (masterSwarmId, lockedSegmentsFilter) => {\r\n            const segmentsToDelete = [];\r\n            const remainingSegments = [];\r\n            // Delete old segments\r\n            const now = performance.now();\r\n            for (const cachedSegment of this.cache.values()) {\r\n                if (now - cachedSegment.lastAccessed > this.settings.cachedSegmentExpiration) {\r\n                    segmentsToDelete.push(cachedSegment.segment.id);\r\n                }\r\n                else {\r\n                    remainingSegments.push(cachedSegment);\r\n                }\r\n            }\r\n            // Delete segments over cached count\r\n            let countOverhead = remainingSegments.length - this.settings.cachedSegmentsCount;\r\n            if (countOverhead > 0) {\r\n                remainingSegments.sort((a, b) => a.lastAccessed - b.lastAccessed);\r\n                for (const cachedSegment of remainingSegments) {\r\n                    if (lockedSegmentsFilter === undefined || !lockedSegmentsFilter(cachedSegment.segment.id)) {\r\n                        segmentsToDelete.push(cachedSegment.segment.id);\r\n                        countOverhead--;\r\n                        if (countOverhead === 0) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            segmentsToDelete.forEach((id) => this.cache.delete(id));\r\n            return segmentsToDelete.length > 0;\r\n        };\r\n        this.destroy = async () => {\r\n            this.cache.clear();\r\n        };\r\n    }\r\n}\r\nexports.SegmentsMemoryStorage = SegmentsMemoryStorage;\r\n","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.STEEmitter = void 0;\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst events_1 = require(\"events\");\r\nclass STEEmitter extends events_1.EventEmitter {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.on = (event, listener) => super.on(event, listener);\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        this.emit = (event, ...args) => super.emit(event, ...args);\r\n    }\r\n}\r\nexports.STEEmitter = STEEmitter;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.byteRangeToString = exports.compareByteRanges = exports.getByteRange = void 0;\r\nfunction getByteRange(context) {\r\n    return context.rangeEnd && context.rangeStart !== undefined\r\n        ? { offset: context.rangeStart, length: context.rangeEnd - context.rangeStart }\r\n        : undefined;\r\n}\r\nexports.getByteRange = getByteRange;\r\nfunction compareByteRanges(b1, b2) {\r\n    return b1 === undefined ? b2 === undefined : b2 !== undefined && b1.length === b2.length && b1.offset === b2.offset;\r\n}\r\nexports.compareByteRanges = compareByteRanges;\r\nfunction byteRangeToString(byteRange) {\r\n    if (byteRange === undefined) {\r\n        return undefined;\r\n    }\r\n    const end = byteRange.offset + byteRange.length - 1;\r\n    return `bytes=${byteRange.offset}-${end}`;\r\n}\r\nexports.byteRangeToString = byteRangeToString;\r\n","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Engine = void 0;\r\nconst events_1 = require(\"events\");\r\nconst p2p_media_loader_core_basyton_1 = require(\"p2p-media-loader-core-basyton\");\r\nconst segment_manager_1 = require(\"./segment-manager\");\r\nconst hlsjs_loader_1 = require(\"./hlsjs-loader\");\r\nclass Engine extends events_1.EventEmitter {\r\n    constructor(settings = {}) {\r\n        super();\r\n        this.loader = new p2p_media_loader_core_basyton_1.HybridLoader(settings.loader);\r\n        this.segmentManager = new segment_manager_1.SegmentManager(this.loader, settings.segments, settings.loader);\r\n        Object.keys(p2p_media_loader_core_basyton_1.Events)\r\n            .map((eventKey) => p2p_media_loader_core_basyton_1.Events[eventKey])\r\n            .forEach((event) => this.loader.on(event, (...args) => this.emit(event, ...args)));\r\n    }\r\n    static isSupported() {\r\n        return p2p_media_loader_core_basyton_1.HybridLoader.isSupported();\r\n    }\r\n    createLoaderClass() {\r\n        var _a;\r\n        const engine = this; // eslint-disable-line @typescript-eslint/no-this-alias\r\n        const loader = (_a = class {\r\n                constructor() {\r\n                    this.load = async (context, config, callbacks) => {\r\n                        this.context = context;\r\n                        this.callbacks = callbacks;\r\n                        await this.impl.load(context, config, callbacks);\r\n                    };\r\n                    this.abort = () => {\r\n                        if (this.context) {\r\n                            this.impl.abort(this.context, this.callbacks);\r\n                        }\r\n                    };\r\n                    this.destroy = () => {\r\n                        if (this.context) {\r\n                            this.impl.abort(this.context);\r\n                        }\r\n                    };\r\n                    this.getResponseHeader = () => undefined;\r\n                    this.impl = new hlsjs_loader_1.HlsJsLoader(engine.segmentManager);\r\n                    engine.setLatestLoaderImpl(this);\r\n                    this.stats = this.impl.stats;\r\n                }\r\n            },\r\n            _a.getEngine = () => {\r\n                return engine;\r\n            },\r\n            _a);\r\n        return loader;\r\n    }\r\n    async destroy() {\r\n        await this.segmentManager.destroy();\r\n    }\r\n    abortCurrentRequest() {\r\n        if (this.latestLoaderImpl) {\r\n            this.latestLoaderImpl.abort();\r\n            this.latestLoaderImpl = undefined;\r\n        }\r\n    }\r\n    getSettings() {\r\n        return {\r\n            segments: this.segmentManager.getSettings(),\r\n            loader: this.loader.getSettings(),\r\n        };\r\n    }\r\n    getDetails() {\r\n        return {\r\n            loader: this.loader.getDetails(),\r\n        };\r\n    }\r\n    setPlayingSegment(url, byteRange, start, duration) {\r\n        this.segmentManager.setPlayingSegment(url, byteRange, start, duration);\r\n    }\r\n    setPlayingSegmentByCurrentTime(playheadPosition) {\r\n        this.segmentManager.setPlayingSegmentByCurrentTime(playheadPosition);\r\n    }\r\n    setLatestLoaderImpl(loader) {\r\n        this.latestLoaderImpl = loader;\r\n    }\r\n}\r\nexports.Engine = Engine;\r\n","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HlsJsLoader = void 0;\r\nconst debug_1 = __importDefault(require(\"debug\"));\r\nconst p2p_media_loader_core_basyton_1 = require(\"p2p-media-loader-core-basyton\");\r\nconst byte_range_1 = require(\"./byte-range\");\r\nclass HlsJsLoader {\r\n    constructor(segmentManager) {\r\n        this.segmentManager = segmentManager;\r\n        this.debug = (0, debug_1.default)(\"p2pml:hlsjs-loader\");\r\n        this.stats = {\r\n            loaded: 0,\r\n            total: 0,\r\n            aborted: false,\r\n            retry: 0,\r\n            chunkCount: 0,\r\n            bwEstimate: 0,\r\n            loading: {\r\n                start: 0,\r\n                end: 0,\r\n                first: 0,\r\n            },\r\n            parsing: {\r\n                start: 0,\r\n                end: 0,\r\n            },\r\n            buffering: {\r\n                start: 0,\r\n                end: 0,\r\n                first: 0,\r\n            },\r\n        };\r\n        this.boundOnSegmentAbort = this.onSegmentAbort.bind(this);\r\n        this.boundOnUpdateSegmentSize = this.onUpdateSegmentSize.bind(this);\r\n        this.boundOnUpdateLoaded = this.onUpdateLoaded.bind(this);\r\n        this.boundOnSegmentStartLoad = this.onSegmentStartLoad.bind(this);\r\n        this.debugId = \"\";\r\n    }\r\n    async load(context, _config, callbacks) {\r\n        this.context = context;\r\n        this.callbacks = callbacks;\r\n        HlsJsLoader.updateStatsToStartLoading(this.stats);\r\n        if (this.context.type) {\r\n            this.debug(`Loading playlist ${this.context.url}.`);\r\n            try {\r\n                const result = await this.segmentManager.loadPlaylist(this.context.url);\r\n                this.debug(`Playlist ${this.context.url} loaded.`);\r\n                this.successPlaylist(result, this.context, this.callbacks);\r\n            }\r\n            catch (e) {\r\n                this.error(e, this.context, this.callbacks);\r\n            }\r\n        }\r\n        else if (this.context.frag) {\r\n            this.loader = this.segmentManager.loader;\r\n            this.byteRange = (0, byte_range_1.getByteRange)(this.context);\r\n            this.debugId = this.byteRange\r\n                ? `${this.context.url} / ${this.byteRange.offset}`\r\n                : this.context.url;\r\n            this.debug(`Loading fragment ${this.debugId}.`);\r\n            // We may be downloading the segment by P2P, so we don\"t care about the stats sent to HLS ABR\r\n            this.interval = setInterval(() => HlsJsLoader.updateStatsToStartLoading(this.stats), 200);\r\n            this.loader.on(p2p_media_loader_core_basyton_1.Events.SegmentAbort, this.boundOnSegmentAbort);\r\n            this.loader.on(p2p_media_loader_core_basyton_1.Events.SegmentSize, this.boundOnUpdateSegmentSize);\r\n            this.loader.on(p2p_media_loader_core_basyton_1.Events.SegmentStartLoad, this.boundOnSegmentStartLoad);\r\n            try {\r\n                const result = await this.segmentManager.loadSegment(this.context.url, this.byteRange);\r\n                const { content } = result;\r\n                if (content) {\r\n                    this.successSegment(content, this.context, this.callbacks);\r\n                    this.debug(`Loaded fragment ${this.debugId}.`);\r\n                }\r\n                else {\r\n                    this.cleanup();\r\n                    this.debug(`Loaded empty fragment ${this.debugId} (aborted?).`);\r\n                }\r\n            }\r\n            catch (e) {\r\n                setTimeout(() => this.error(e, this.context, this.callbacks), 0);\r\n                this.debug(`Error in fragment ${this.debugId} loading.`, e);\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"Unknown load request\", this.context);\r\n        }\r\n    }\r\n    abort(context, callbacks) {\r\n        if (this.stats.loaded || this.stats.aborted)\r\n            return;\r\n        this.debug(`Aborting by hls.js fragment ${this.debugId} loading.`);\r\n        this.cleanup();\r\n        this.segmentManager.abortSegment(context.url, (0, byte_range_1.getByteRange)(context));\r\n        this.stats.aborted = true;\r\n        const onAbort = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onAbort;\r\n        if (onAbort) {\r\n            onAbort(this.stats, context, undefined);\r\n        }\r\n    }\r\n    successPlaylist(xhr, context, callbacks) {\r\n        this.cleanup();\r\n        const now = performance.now();\r\n        this.stats.loading.end = now;\r\n        this.stats.loaded = xhr.response.length;\r\n        this.stats.total = xhr.response.length;\r\n        callbacks.onSuccess({\r\n            url: xhr.responseURL,\r\n            data: xhr.response,\r\n        }, this.stats, context, undefined);\r\n    }\r\n    successSegment(content, context, callbacks) {\r\n        this.cleanup();\r\n        const now = performance.now();\r\n        this.stats.loading.end = now;\r\n        this.stats.loaded = content.byteLength;\r\n        this.stats.total = content.byteLength;\r\n        if (callbacks.onProgress) {\r\n            callbacks.onProgress(this.stats, context, content, undefined);\r\n        }\r\n        callbacks.onSuccess({\r\n            url: context.url,\r\n            data: content,\r\n        }, this.stats, context, undefined);\r\n    }\r\n    error(error, context, callbacks) {\r\n        this.cleanup();\r\n        callbacks.onError(error, context, undefined);\r\n    }\r\n    cleanup() {\r\n        if (this.interval) {\r\n            clearInterval(this.interval);\r\n            this.interval = undefined;\r\n        }\r\n        if (this.loader) {\r\n            this.loader.off(p2p_media_loader_core_basyton_1.Events.SegmentStartLoad, this.boundOnSegmentStartLoad);\r\n            this.loader.off(p2p_media_loader_core_basyton_1.Events.SegmentSize, this.boundOnUpdateSegmentSize);\r\n            this.loader.off(p2p_media_loader_core_basyton_1.Events.PieceBytesDownloaded, this.boundOnUpdateLoaded);\r\n            this.loader.off(p2p_media_loader_core_basyton_1.Events.SegmentAbort, this.boundOnSegmentAbort);\r\n        }\r\n    }\r\n    onSegmentAbort(segment) {\r\n        var _a;\r\n        if (!this.isSegment(segment))\r\n            return;\r\n        this.debug(`Aborting by p2p-media-loader fragment ${this.debugId || \"\"}.`);\r\n        this.stats.aborted = true;\r\n        const onAbort = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onAbort;\r\n        if (onAbort) {\r\n            onAbort(this.stats, this.context, undefined);\r\n        }\r\n        this.cleanup();\r\n    }\r\n    onUpdateSegmentSize(segment, size) {\r\n        if (!this.isSegment(segment))\r\n            return;\r\n        this.stats.total = size;\r\n    }\r\n    onUpdateLoaded(_type, segment, bytes) {\r\n        if (!this.isSegment(segment))\r\n            return;\r\n        this.stats.loaded += bytes;\r\n    }\r\n    onSegmentStartLoad(method, segment) {\r\n        if (!this.interval || method !== \"http\" || !this.isSegment(segment))\r\n            return;\r\n        clearInterval(this.interval);\r\n        this.interval = undefined;\r\n        HlsJsLoader.updateStatsToStartLoading(this.stats);\r\n        this.loader.on(p2p_media_loader_core_basyton_1.Events.PieceBytesDownloaded, this.boundOnUpdateLoaded);\r\n    }\r\n    ;\r\n    isSegment(segment) {\r\n        return segment.url === this.context.url && segment.range === (0, byte_range_1.byteRangeToString)(this.byteRange);\r\n    }\r\n    static updateStatsToStartLoading(stats) {\r\n        if (stats.aborted)\r\n            return;\r\n        const start = performance.now();\r\n        stats.loading.start = start;\r\n        stats.loading.first = start;\r\n    }\r\n}\r\nexports.HlsJsLoader = HlsJsLoader;\r\n","\"use strict\";\r\n/**\r\n * @license Apache-2.0\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.initJwPlayer = exports.initMediaElementJsPlayer = exports.initVideoJsHlsJsPlugin = exports.initVideoJsContribHlsJsPlayer = exports.initFlowplayerHlsJsPlayer = exports.initClapprPlayer = exports.initHlsJsPlayer = exports.version = void 0;\r\n/* eslint-disable */\r\nexports.version = \"0.6.2\";\r\n__exportStar(require(\"./engine\"), exports);\r\n__exportStar(require(\"./segment-manager\"), exports);\r\nconst debug_1 = __importDefault(require(\"debug\"));\r\nconst debug = (0, debug_1.default)(\"p2pml:hlsjs-init\");\r\nfunction initHlsJsPlayer(player) {\r\n    if (player && player.config && player.config.loader && typeof player.config.loader.getEngine === \"function\") {\r\n        initHlsJsEvents(player, player.config.loader.getEngine());\r\n    }\r\n}\r\nexports.initHlsJsPlayer = initHlsJsPlayer;\r\nfunction initClapprPlayer(player) {\r\n    player.on(\"play\", () => {\r\n        const playback = player.core.getCurrentPlayback();\r\n        if (playback._hls && !playback._hls._p2pm_linitialized) {\r\n            playback._hls._p2pm_linitialized = true;\r\n            initHlsJsPlayer(player.core.getCurrentPlayback()._hls);\r\n        }\r\n    });\r\n}\r\nexports.initClapprPlayer = initClapprPlayer;\r\nfunction initFlowplayerHlsJsPlayer(player) {\r\n    player.on(\"ready\", () => { var _a; return initHlsJsPlayer((_a = player.engine.hlsjs) !== null && _a !== void 0 ? _a : player.engine.hls); });\r\n}\r\nexports.initFlowplayerHlsJsPlayer = initFlowplayerHlsJsPlayer;\r\nfunction initVideoJsContribHlsJsPlayer(player) {\r\n    player.ready(() => {\r\n        const options = player.tech_.options_;\r\n        if (options &&\r\n            options.hlsjsConfig &&\r\n            options.hlsjsConfig.loader &&\r\n            typeof options.hlsjsConfig.loader.getEngine === \"function\") {\r\n            initHlsJsEvents(player.tech_, options.hlsjsConfig.loader.getEngine());\r\n        }\r\n    });\r\n}\r\nexports.initVideoJsContribHlsJsPlayer = initVideoJsContribHlsJsPlayer;\r\nfunction initVideoJsHlsJsPlugin() {\r\n    if (videojs == undefined || videojs.Html5Hlsjs == undefined) {\r\n        return;\r\n    }\r\n    videojs.Html5Hlsjs.addHook(\"beforeinitialize\", (videojsPlayer, hlsjs) => {\r\n        if (hlsjs.config && hlsjs.config.loader && typeof hlsjs.config.loader.getEngine === \"function\") {\r\n            initHlsJsEvents(hlsjs, hlsjs.config.loader.getEngine());\r\n        }\r\n    });\r\n}\r\nexports.initVideoJsHlsJsPlugin = initVideoJsHlsJsPlugin;\r\nfunction initMediaElementJsPlayer(mediaElement) {\r\n    mediaElement.addEventListener(\"hlsFragChanged\", (event) => {\r\n        const hls = mediaElement.hlsPlayer;\r\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\r\n            const engine = hls.config.loader.getEngine();\r\n            if (event.data && event.data.length > 1) {\r\n                const frag = event.data[1].frag;\r\n                const byteRange = frag.byteRange.length !== 2\r\n                    ? undefined\r\n                    : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\r\n                engine.setPlayingSegment(frag.url, byteRange, frag.start, frag.duration);\r\n            }\r\n        }\r\n    });\r\n    mediaElement.addEventListener(\"hlsDestroying\", async () => {\r\n        const hls = mediaElement.hlsPlayer;\r\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\r\n            const engine = hls.config.loader.getEngine();\r\n            await engine.destroy();\r\n        }\r\n    });\r\n    mediaElement.addEventListener(\"hlsError\", (event) => {\r\n        const hls = mediaElement.hlsPlayer;\r\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\r\n            if (event.data !== undefined && event.data.details === \"bufferStalledError\") {\r\n                const engine = hls.config.loader.getEngine();\r\n                engine.setPlayingSegmentByCurrentTime(hls.media.currentTime);\r\n            }\r\n        }\r\n    });\r\n}\r\nexports.initMediaElementJsPlayer = initMediaElementJsPlayer;\r\nfunction initJwPlayer(player, hlsjsConfig) {\r\n    const iid = setInterval(() => {\r\n        if (player.hls && player.hls.config) {\r\n            clearInterval(iid);\r\n            Object.assign(player.hls.config, hlsjsConfig);\r\n            initHlsJsPlayer(player.hls);\r\n        }\r\n    }, 200);\r\n}\r\nexports.initJwPlayer = initJwPlayer;\r\nfunction initHlsJsEvents(player, engine) {\r\n    player.on(\"hlsFragChanged\", (_event, data) => {\r\n        debug(\"HLS Frag changed.\", data);\r\n        const frag = data.frag;\r\n        const byteRange = frag.byteRange.length !== 2\r\n            ? undefined\r\n            : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\r\n        engine.setPlayingSegment(frag.url, byteRange, frag.start, frag.duration);\r\n    });\r\n    player.on(\"hlsDestroying\", async () => {\r\n        await engine.destroy();\r\n    });\r\n    player.on(\"hlsError\", (_event, errorData) => {\r\n        if (errorData.details === \"bufferStalledError\") {\r\n            const htmlMediaElement = (player.media === undefined\r\n                ? player.el_ // videojs-contrib-hlsjs\r\n                : player.media); // all others\r\n            if (htmlMediaElement) {\r\n                engine.setPlayingSegmentByCurrentTime(htmlMediaElement.currentTime);\r\n            }\r\n        }\r\n    });\r\n    player.on('seeking', () => {\r\n        debug(\"Player seeking.\");\r\n        // Abort current HTTP/P2P request so HLS is not stuck with a P2P request when moving current video player time\r\n        // to a previously loaded fragment\r\n        engine.abortCurrentRequest();\r\n    });\r\n}\r\n","\"use strict\";\r\n/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SegmentManager = void 0;\r\nconst debug_1 = __importDefault(require(\"debug\"));\r\nconst p2p_media_loader_core_basyton_1 = require(\"p2p-media-loader-core-basyton\");\r\nconst m3u8_parser_1 = require(\"m3u8-parser\");\r\nconst byte_range_1 = require(\"./byte-range\");\r\nconst defaultSettings = {\r\n    forwardSegmentCount: 20,\r\n    swarmId: undefined,\r\n    assetsStorage: undefined,\r\n};\r\nclass SegmentManager {\r\n    constructor(loader, settings = {}, loadersettings = {}) {\r\n        this.debug = (0, debug_1.default)(\"p2pml:segment-manager\");\r\n        this.masterPlaylist = null;\r\n        this.variantPlaylists = new Map();\r\n        this.segmentRequest = null;\r\n        this.fetch = (...args) => fetch(...args);\r\n        this.playQueue = [];\r\n        this.onSegmentLoaded = (segment) => {\r\n            if (this.segmentRequest &&\r\n                this.segmentRequest.segmentUrl === segment.url &&\r\n                (0, byte_range_1.byteRangeToString)(this.segmentRequest.segmentByteRange) === segment.range) {\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                this.segmentRequest.onSuccess(segment.data.slice(0), segment.downloadBandwidth);\r\n                this.segmentRequest = null;\r\n            }\r\n        };\r\n        this.onSegmentError = (segment, error) => {\r\n            if (this.segmentRequest &&\r\n                this.segmentRequest.segmentUrl === segment.url &&\r\n                (0, byte_range_1.byteRangeToString)(this.segmentRequest.segmentByteRange) === segment.range) {\r\n                this.segmentRequest.onError(error);\r\n                this.segmentRequest = null;\r\n            }\r\n        };\r\n        this.onSegmentAbort = (segment) => {\r\n            if (this.segmentRequest &&\r\n                this.segmentRequest.segmentUrl === segment.url &&\r\n                (0, byte_range_1.byteRangeToString)(this.segmentRequest.segmentByteRange) === segment.range) {\r\n                this.segmentRequest.onError(\"Loading aborted: internal abort\");\r\n                this.segmentRequest = null;\r\n            }\r\n        };\r\n        this.settings = Object.assign(Object.assign({}, defaultSettings), settings);\r\n        this.loader = loader;\r\n        this.loader.on(p2p_media_loader_core_basyton_1.Events.SegmentLoaded, this.onSegmentLoaded);\r\n        this.loader.on(p2p_media_loader_core_basyton_1.Events.SegmentError, this.onSegmentError);\r\n        this.loader.on(p2p_media_loader_core_basyton_1.Events.SegmentAbort, this.onSegmentAbort);\r\n        if (loadersettings.localTransport) {\r\n            this.fetch = loadersettings.localTransport;\r\n        }\r\n    }\r\n    getSettings() {\r\n        return this.settings;\r\n    }\r\n    processPlaylist(requestUrl, content, responseUrl) {\r\n        const parser = new m3u8_parser_1.Parser();\r\n        parser.push(content);\r\n        parser.end();\r\n        const playlist = new Playlist(requestUrl, responseUrl, parser.manifest);\r\n        if (playlist.manifest.playlists) {\r\n            this.masterPlaylist = playlist;\r\n            for (const [key, variantPlaylist] of this.variantPlaylists) {\r\n                const { streamSwarmId, found, index } = this.getStreamSwarmId(variantPlaylist.requestUrl);\r\n                if (!found) {\r\n                    this.variantPlaylists.delete(key);\r\n                }\r\n                else {\r\n                    variantPlaylist.streamSwarmId = streamSwarmId;\r\n                    variantPlaylist.streamId = \"V\" + index.toString();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const { streamSwarmId, found, index } = this.getStreamSwarmId(requestUrl);\r\n            if (found || this.masterPlaylist === null) {\r\n                // do not add audio and subtitles to variants\r\n                playlist.streamSwarmId = streamSwarmId;\r\n                playlist.streamId = this.masterPlaylist === null ? undefined : \"V\" + index.toString();\r\n                this.variantPlaylists.set(requestUrl, playlist);\r\n                this.updateSegments();\r\n            }\r\n        }\r\n    }\r\n    async loadPlaylist(url) {\r\n        const assetsStorage = this.settings.assetsStorage;\r\n        let xhr;\r\n        if (assetsStorage !== undefined) {\r\n            let masterSwarmId;\r\n            masterSwarmId = this.getMasterSwarmId();\r\n            if (masterSwarmId === undefined) {\r\n                masterSwarmId = url.split(\"?\")[0];\r\n            }\r\n            const asset = await assetsStorage.getAsset(url, undefined, masterSwarmId);\r\n            if (asset !== undefined) {\r\n                xhr = {\r\n                    responseURL: asset.responseUri,\r\n                    response: asset.data,\r\n                };\r\n            }\r\n            else {\r\n                const fetch = await this.loadContent(url);\r\n                xhr = {\r\n                    responseURL: fetch.url,\r\n                    response: await fetch.text(),\r\n                };\r\n                void assetsStorage.storeAsset({\r\n                    masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : url,\r\n                    masterSwarmId: masterSwarmId,\r\n                    requestUri: url,\r\n                    responseUri: xhr.responseURL,\r\n                    data: xhr.response,\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            const fetch = await this.loadContent(url);\r\n            xhr = {\r\n                responseURL: fetch.url,\r\n                response: await fetch.text(),\r\n            };\r\n        }\r\n        this.processPlaylist(url, xhr.response, xhr.responseURL);\r\n        return xhr;\r\n    }\r\n    async loadSegment(url, byteRange) {\r\n        var _a;\r\n        const segmentLocation = this.getSegmentLocation(url, byteRange);\r\n        const byteRangeString = (0, byte_range_1.byteRangeToString)(byteRange);\r\n        if (!segmentLocation) {\r\n            let content;\r\n            // Not a segment from variants; usually can be: init, audio or subtitles segment, encryption key etc.\r\n            const assetsStorage = this.settings.assetsStorage;\r\n            if (assetsStorage !== undefined) {\r\n                let masterManifestUri = (_a = this.masterPlaylist) === null || _a === void 0 ? void 0 : _a.requestUrl;\r\n                let masterSwarmId;\r\n                masterSwarmId = this.getMasterSwarmId();\r\n                if (masterSwarmId === undefined && this.variantPlaylists.size === 1) {\r\n                    const result = this.variantPlaylists.values().next();\r\n                    if (!result.done) {\r\n                        // always true\r\n                        masterSwarmId = result.value.requestUrl.split(\"?\")[0];\r\n                    }\r\n                }\r\n                if (masterManifestUri === undefined && this.variantPlaylists.size === 1) {\r\n                    const result = this.variantPlaylists.values().next();\r\n                    if (!result.done) {\r\n                        // always true\r\n                        masterManifestUri = result.value.requestUrl;\r\n                    }\r\n                }\r\n                if (masterSwarmId !== undefined && masterManifestUri !== undefined) {\r\n                    const asset = await assetsStorage.getAsset(url, byteRangeString, masterSwarmId);\r\n                    if (asset !== undefined) {\r\n                        content = asset.data;\r\n                    }\r\n                    else {\r\n                        const fetch = await this.loadContent(url, byteRangeString);\r\n                        content = await fetch.arrayBuffer();\r\n                        void assetsStorage.storeAsset({\r\n                            masterManifestUri: masterManifestUri,\r\n                            masterSwarmId: masterSwarmId,\r\n                            requestUri: url,\r\n                            requestRange: byteRangeString,\r\n                            responseUri: fetch.url,\r\n                            data: content,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            if (content === undefined) {\r\n                const fetch = await this.loadContent(url, byteRangeString);\r\n                content = await fetch.arrayBuffer();\r\n            }\r\n            return { content, downloadBandwidth: 0 };\r\n        }\r\n        const segmentSequence = (segmentLocation.playlist.manifest.mediaSequence ? segmentLocation.playlist.manifest.mediaSequence : 0) +\r\n            segmentLocation.segmentIndex;\r\n        if (this.playQueue.length > 0) {\r\n            const previousSegment = this.playQueue[this.playQueue.length - 1];\r\n            if (previousSegment.segmentSequence !== segmentSequence - 1) {\r\n                // Reset play queue in case of segment loading out of sequence\r\n                this.playQueue = [];\r\n            }\r\n        }\r\n        if (this.segmentRequest) {\r\n            this.segmentRequest.onError(\"Cancel segment request: simultaneous segment requests are not supported\");\r\n        }\r\n        const promise = new Promise((resolve, reject) => {\r\n            this.segmentRequest = new SegmentRequest(url, byteRange, segmentSequence, segmentLocation.playlist.requestUrl, (content, downloadBandwidth) => resolve({ content, downloadBandwidth }), (error) => reject(error));\r\n        });\r\n        this.playQueue.push({ segmentUrl: url, segmentByteRange: byteRange, segmentSequence: segmentSequence });\r\n        void this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, true);\r\n        return promise;\r\n    }\r\n    setPlayingSegment(url, byteRange, start, duration) {\r\n        const urlIndex = this.playQueue.findIndex((segment) => segment.segmentUrl === url && (0, byte_range_1.compareByteRanges)(segment.segmentByteRange, byteRange));\r\n        this.debug(\"Set playing segment to index %d\", urlIndex, this.playQueue);\r\n        if (urlIndex >= 0) {\r\n            this.playQueue = this.playQueue.slice(urlIndex);\r\n            this.playQueue[0].playPosition = { start, duration };\r\n            this.updateSegments();\r\n        }\r\n    }\r\n    setPlayingSegmentByCurrentTime(playheadPosition) {\r\n        if (this.playQueue.length === 0 || !this.playQueue[0].playPosition) {\r\n            return;\r\n        }\r\n        const currentSegmentPosition = this.playQueue[0].playPosition;\r\n        const segmentEndTime = currentSegmentPosition.start + currentSegmentPosition.duration;\r\n        if (segmentEndTime - playheadPosition < 0.2) {\r\n            // means that current segment is (almost) finished playing\r\n            // remove it from queue\r\n            this.playQueue = this.playQueue.slice(1);\r\n            this.updateSegments();\r\n        }\r\n    }\r\n    abortSegment(url, byteRange) {\r\n        if (this.segmentRequest &&\r\n            this.segmentRequest.segmentUrl === url &&\r\n            (0, byte_range_1.compareByteRanges)(this.segmentRequest.segmentByteRange, byteRange)) {\r\n            this.segmentRequest.onSuccess(undefined, 0);\r\n            this.segmentRequest = null;\r\n        }\r\n    }\r\n    abortCurrentSegment() {\r\n        if (!this.segmentRequest)\r\n            return;\r\n        this.segmentRequest.onSuccess(undefined, 0);\r\n        this.segmentRequest = null;\r\n    }\r\n    async destroy() {\r\n        if (this.segmentRequest) {\r\n            this.segmentRequest.onError(\"Loading aborted: object destroyed\");\r\n            this.segmentRequest = null;\r\n        }\r\n        this.masterPlaylist = null;\r\n        this.variantPlaylists.clear();\r\n        this.playQueue = [];\r\n        if (this.settings.assetsStorage !== undefined) {\r\n            await this.settings.assetsStorage.destroy();\r\n        }\r\n        await this.loader.destroy();\r\n    }\r\n    updateSegments() {\r\n        if (!this.segmentRequest) {\r\n            return;\r\n        }\r\n        const segmentLocation = this.getSegmentLocation(this.segmentRequest.segmentUrl, this.segmentRequest.segmentByteRange);\r\n        this.debug(\"update segments\", segmentLocation);\r\n        if (segmentLocation) {\r\n            void this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, false);\r\n        }\r\n    }\r\n    getSegmentLocation(url, byteRange) {\r\n        for (const playlist of this.variantPlaylists.values()) {\r\n            const segmentIndex = playlist.getSegmentIndex(url, byteRange);\r\n            if (segmentIndex >= 0) {\r\n                return { playlist: playlist, segmentIndex: segmentIndex };\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    async loadSegments(playlist, segmentIndex, requestFirstSegment) {\r\n        var _a;\r\n        const segments = [];\r\n        const playlistSegments = playlist.manifest.segments;\r\n        const initialSequence = (_a = playlist.manifest.mediaSequence) !== null && _a !== void 0 ? _a : 0;\r\n        let loadSegmentId = null;\r\n        let priority = Math.max(0, this.playQueue.length - 1);\r\n        const masterSwarmId = this.getMasterSwarmId();\r\n        this.debug(\"load segments\", priority, segmentIndex);\r\n        for (let i = segmentIndex; i < playlistSegments.length && segments.length < this.settings.forwardSegmentCount; ++i) {\r\n            const segment = playlist.manifest.segments[i];\r\n            const url = playlist.getSegmentAbsoluteUrl(segment.uri);\r\n            const byteRange = segment.byterange;\r\n            const id = this.getSegmentId(playlist, initialSequence + i);\r\n            segments.push({\r\n                id: id,\r\n                url: url,\r\n                masterSwarmId: masterSwarmId !== undefined ? masterSwarmId : playlist.streamSwarmId,\r\n                masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : playlist.requestUrl,\r\n                streamId: playlist.streamId,\r\n                sequence: (initialSequence + i).toString(),\r\n                range: (0, byte_range_1.byteRangeToString)(byteRange),\r\n                priority: priority++,\r\n            });\r\n            if (requestFirstSegment && !loadSegmentId) {\r\n                loadSegmentId = id;\r\n            }\r\n        }\r\n        this.loader.load(segments, playlist.streamSwarmId);\r\n        if (loadSegmentId) {\r\n            const segment = await this.loader.getSegment(loadSegmentId);\r\n            if (segment) {\r\n                // Segment already loaded by loader\r\n                this.onSegmentLoaded(segment);\r\n            }\r\n        }\r\n    }\r\n    getSegmentId(playlist, segmentSequence) {\r\n        return `${playlist.streamSwarmId}+${segmentSequence}`;\r\n    }\r\n    getMasterSwarmId() {\r\n        const settingsSwarmId = this.settings.swarmId && this.settings.swarmId.length !== 0 ? this.settings.swarmId : undefined;\r\n        if (settingsSwarmId !== undefined) {\r\n            return settingsSwarmId;\r\n        }\r\n        return this.masterPlaylist !== null ? this.masterPlaylist.requestUrl.split(\"?\")[0] : undefined;\r\n    }\r\n    getStreamSwarmId(playlistUrl) {\r\n        const masterSwarmId = this.getMasterSwarmId();\r\n        if (this.masterPlaylist && this.masterPlaylist.manifest.playlists && masterSwarmId) {\r\n            for (let i = 0; i < this.masterPlaylist.manifest.playlists.length; ++i) {\r\n                const url = new URL(this.masterPlaylist.manifest.playlists[i].uri, this.masterPlaylist.responseUrl).toString();\r\n                if (url === playlistUrl) {\r\n                    return { streamSwarmId: `${masterSwarmId}+V${i}`, found: true, index: i };\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            streamSwarmId: masterSwarmId !== null && masterSwarmId !== void 0 ? masterSwarmId : playlistUrl.split(\"?\")[0],\r\n            found: false,\r\n            index: -1,\r\n        };\r\n    }\r\n    async loadContent(url, range) {\r\n        const headers = new Headers();\r\n        if (range) {\r\n            headers.append('Range', range);\r\n        }\r\n        return this.fetch(url, { headers });\r\n    }\r\n}\r\nexports.SegmentManager = SegmentManager;\r\nclass Playlist {\r\n    constructor(requestUrl, responseUrl, manifest) {\r\n        this.requestUrl = requestUrl;\r\n        this.responseUrl = responseUrl;\r\n        this.manifest = manifest;\r\n        this.streamSwarmId = \"\";\r\n    }\r\n    getSegmentIndex(url, byteRange) {\r\n        for (let i = 0; i < this.manifest.segments.length; ++i) {\r\n            const segment = this.manifest.segments[i];\r\n            const segmentUrl = this.getSegmentAbsoluteUrl(segment.uri);\r\n            if (url === segmentUrl && (0, byte_range_1.compareByteRanges)(segment.byterange, byteRange)) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    getSegmentAbsoluteUrl(segmentUrl) {\r\n        return new URL(segmentUrl, this.responseUrl).toString();\r\n    }\r\n}\r\nclass SegmentRequest {\r\n    constructor(segmentUrl, segmentByteRange, segmentSequence, playlistRequestUrl, onSuccess, onError) {\r\n        this.segmentUrl = segmentUrl;\r\n        this.segmentByteRange = segmentByteRange;\r\n        this.segmentSequence = segmentSequence;\r\n        this.playlistRequestUrl = playlistRequestUrl;\r\n        this.onSuccess = onSuccess;\r\n        this.onError = onError;\r\n    }\r\n}\r\n","var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n"],"names":["_setPrototypeOf","o","p","Object","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","prototype","create","constructor","Stream","this","listeners","_proto","on","type","listener","push","off","index","indexOf","slice","splice","trigger","callbacks","arguments","length","i","call","args","Array","_length","_i","apply","dispose","pipe","destination","data","_extends","assign","target","source","key","hasOwnProperty","decodeB64ToUint8Array","b64Text","s","decodedString","window","Buffer","from","toString","array","Uint8Array","charCodeAt","LineStream","_Stream","_this","buffer","nextNewline","substring","TAB","String","fromCharCode","parseByterange","byterangeString","match","exec","result","parseInt","offset","parseAttributes","attributes","attr","attrs","split","RegExp","replace","ParseStream","customParsers","tagMappers","line","event","_this2","trim","reduce","acc","mapper","mappedLine","concat","forEach","newLine","tagType","duration","parseFloat","title","version","number","playlistType","allowed","test","URI","uri","BYTERANGE","byterange","RESOLUTION","resolution","width","height","BANDWIDTH","dateTimeString","dateTimeObject","Date","IV","toLowerCase","Uint32Array","PRECISE","subkey","text","addParser","_ref","_this3","expression","customType","dataParser","segment","addTagMapper","_ref2","map","camelCaseKeys","keys","str","a","toUpperCase","setHoldBack","manifest","serverControl","targetDuration","partTargetDuration","tag","hb","phb","minTargetDuration","minPartDuration","message","Parser","lineStream","parseStream","currentMap","_key","self","ReferenceError","_assertThisInitialized","uris","currentUri","hasParts","noop","defaultMediaGroups","currentTimeline","allowCache","discontinuityStarts","segments","lastByterangeEnd","lastPartByterangeEnd","parts","preloadHints","timeline","preloadSegment","entry","mediaGroup","rendition","endlist","endList","inf","mediaSequence","discontinuitySequence","METHOD","KEYFORMAT","contentProtection","KEYID","schemeIdUri","keyId","pssh","method","iv","isFinite","playlist","playlists","mediaGroups","media","TYPE","NAME","mediaGroupType","default","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","language","instreamId","CHARACTERISTICS","characteristics","FORCED","forced","discontinuity","targetduration","start","isNaN","timeOffset","precise","cueOut","cueOutCont","cueIn","skip","warnOnMissingAttributes_","segmentIndex","part","renditionReports","r","canBlockReload","canSkipDateranges","hint","isPart","otherHint","report","required","partInf","partTarget","comment","custom","identifier","missing","join","chunk","end","options","__importDefault","mod","__esModule","defineProperty","exports","value","BandwidthApproximator","debug","require","SMOOTH_INTERVAL","NumberWithTime","timeStamp","lastBytes","currentBytesSum","lastBandwidth","addBytes","bytes","shift","interval","Math","min","getBandwidth","maxBandwidth","bandwidth","getSmoothInterval","getMeasureInterval","HttpMediaManager","debug_1","FilteredEmitter","STEEmitter","settings","fetchRequests","Map","failedSegments","fetch","download","downloadedPieces","isDownloading","cleanTimedOutFailedSegments","emit","segmentUrl","priority","skipSegmentBuilderPriority","url","buildSegmentUrl","requestUrl","fetchAbort","AbortController","signal","headers","Headers","range","append","undefined","httpUseRanges","bytesDownloaded","piece","byteLength","fetchRequest","setupFetchEvents","catch","err","name","fetchError","Error","segmentFailure","netError","set","id","initialPriority","updatePriority","request","get","requiredSegmentsPriority","abort","delete","has","isFailed","time","now","getActiveDownloads","getActiveDownloadsCount","size","destroy","clear","async","fetchResponse","dataReader","body","getReader","contentLengthStr","contentLength","Number","dataBytes","read","nextChunkPos","isArray","status","pieceBytes","done","chunkBytes","segmentDownloadFinished","responseUrl","segmentValidator","error","httpFailedSegmentTimeout","candidates","performance","localTransport","segmentUrlBuilder","HybridLoader","events_1","simple_peer_1","loader_interface_1","http_media_manager_1","p2p_media_manager_1","media_peer_1","bandwidth_approximator_1","segments_memory_storage_1","defaultSettings","cachedSegmentExpiration","cachedSegmentsCount","useP2P","consumeOnly","simultaneousHttpDownloads","httpDownloadProbability","httpDownloadProbabilityInterval","httpDownloadProbabilitySkipIfNoPeers","httpDownloadMaxPriority","httpDownloadInitialTimeout","httpDownloadInitialTimeoutPerSegment","simultaneousP2PDownloads","p2pDownloadMaxPriority","p2pSegmentDownloadTimeout","webRtcMaxMessageSize","trackerAnnounce","peerRequestsPerAnnounce","rtcConfig","config","debugSegments","segmentsQueue","bandwidthApproximator","httpDownloadInitialTimeoutTimestamp","createHttpManager","createP2PManager","P2PMediaManager","segmentsStorage","load","streamSwarmId","initRandomDownloadIntervalIfNeeded","masterSwarmId","p2pManager","setStreamSwarmId","updateSegmentsMap","abortUnknownSegments","enabled","find","f","storageSegments","getSegmentsMap","processSegmentsQueue","cleanSegmentsStorage","sendSegmentsMapToAll","createSegmentsMap","getSegment","getSettings","getDetails","peerId","getPeerId","getBandwidthEstimate","httpRandomDownloadInterval","clearInterval","httpManager","processInitialSegmentTimeout","setTimeout","segmentsMap","httpAllowed","firstNotDownloadePriority","httpTimeout","scheduleNewProcessQueue","tryHTTP","segmentToAbort","getOverallSegmentsMap","MediaPeerSegmentStatus","Loaded","downloadRandomSegmentOverHttp","getPeers","pendingQueue","filter","random","floor","onSegmentStartLoad","Events","SegmentStartLoad","onPieceBytesDownloaded","PieceBytesDownloaded","onPieceBytesUploaded","PieceBytesUploaded","onSegmentLoaded","downloadBandwidth","storeSegment","SegmentLoaded","onSegmentError","details","SegmentError","onSegmentSize","SegmentSize","getStreamSwarmId","streamId","addSegmentToMap","segmentId","sequence","segmentsIdsAndStatuses","segmentsStatuses","storageSegment","values","LoadingByHttp","onPeerConnect","PeerConnect","peer","sendSegmentsMap","onPeerClose","PeerClose","onTrackerUpdate","incomplete","clean","queueSegment","setInterval","SegmentAbort","bufferedSegmentsCount","SegmentsMemoryStorage","EventEmitter","isSupported","RTCPeerConnection","createDataChannel","__createBinding","m","k","k2","desc","getOwnPropertyDescriptor","writable","configurable","enumerable","__exportStar","MediaPeer","buffer_1","stringly_typed_event_emitter_1","MediaPeerCommands","DownloadingSegment","pieces","remoteAddress","downloadingSegmentId","downloadingSegment","timer","terminateSegmentRequest","onPeerError","receiveSegmentPiece","segmentData","getJsonCommand","JSON","parse","TextDecoder","decode","_a","onPeerData","command","c","SegmentsMap","SegmentRequest","SegmentData","cancelResponseTimeoutTimer","SegmentAbsent","swarmData","segmentsIds","segmentStatus","sendCommand","write","stringify","getDownloadingSegmentId","sendSegmentData","bytesLeft","bytesToSend","sendSegmentAbsent","requestSegment","runResponseTimeoutTimer","cancelSegmentRequest","CancelSegmentRequest","clearTimeout","client_1","sha1_1","PEER_ID_VERSION_STRING","v","PEER_ID_VERSION_PREFIX","PeerSegmentRequest","trackerClient","peers","peerCandidates","peerSegmentRequests","pendingTrackerClient","isDestroyed","infoHash","update","digest","createClient","clientOptions","announce","port","getAnnounceOpts","numwant","oldTrackerClient","onTrackerError","onTrackerWarning","onTrackerPeer","warning","trackerPeer","onPeerDataUpdated","onSegmentRequest","onSegmentAbsent","onSegmentTimeout","peerCandidatesById","peerSegmentRequest","swarmChange","stop","removeAllListeners","peerCandidateById","peerCandidate","overallSegmentsMap","description","PEER_ID_SYMBOLS","charAt","TextEncoder","encode","generatePeerId","ArrayBuffer","cache","lastAccessed","cacheItem","hasSegment","lockedSegmentsFilter","segmentsToDelete","remainingSegments","cachedSegment","countOverhead","sort","b","byteRangeToString","compareByteRanges","getByteRange","context","rangeEnd","rangeStart","b1","b2","byteRange","Engine","p2p_media_loader_core_basyton_1","segment_manager_1","hlsjs_loader_1","loader","segmentManager","SegmentManager","eventKey","engine","impl","getResponseHeader","HlsJsLoader","setLatestLoaderImpl","stats","getEngine","latestLoaderImpl","setPlayingSegment","playheadPosition","setPlayingSegmentByCurrentTime","byte_range_1","loaded","total","aborted","retry","chunkCount","bwEstimate","loading","first","parsing","buffering","boundOnSegmentAbort","onSegmentAbort","boundOnUpdateSegmentSize","onUpdateSegmentSize","boundOnUpdateLoaded","onUpdateLoaded","boundOnSegmentStartLoad","debugId","_config","updateStatsToStartLoading","loadPlaylist","successPlaylist","e","frag","loadSegment","content","successSegment","cleanup","console","warn","abortSegment","onAbort","xhr","response","onSuccess","responseURL","onProgress","onError","isSegment","_type","initJwPlayer","initMediaElementJsPlayer","initVideoJsHlsJsPlugin","initVideoJsContribHlsJsPlayer","initFlowplayerHlsJsPlayer","initClapprPlayer","initHlsJsPlayer","player","initHlsJsEvents","_event","errorData","htmlMediaElement","el_","currentTime","abortCurrentRequest","playback","core","getCurrentPlayback","_hls","_p2pm_linitialized","hlsjs","hls","ready","tech_","options_","hlsjsConfig","videojs","Html5Hlsjs","addHook","videojsPlayer","mediaElement","addEventListener","hlsPlayer","iid","m3u8_parser_1","forwardSegmentCount","swarmId","assetsStorage","loadersettings","masterPlaylist","variantPlaylists","segmentRequest","playQueue","segmentByteRange","parser","Playlist","variantPlaylist","found","updateSegments","getMasterSwarmId","asset","getAsset","responseUri","loadContent","storeAsset","masterManifestUri","requestUri","processPlaylist","segmentLocation","getSegmentLocation","byteRangeString","next","arrayBuffer","requestRange","segmentSequence","promise","Promise","resolve","reject","loadSegments","urlIndex","findIndex","playPosition","currentSegmentPosition","getSegmentIndex","requestFirstSegment","playlistSegments","initialSequence","loadSegmentId","max","getSegmentAbsoluteUrl","getSegmentId","settingsSwarmId","playlistUrl","URL","playlistRequestUrl","Hash","blockSize","finalSize","_block","alloc","_finalSize","_blockSize","_len","enc","block","accum","assigned","remainder","_update","rem","fill","bits","writeUInt32BE","lowBits","hash","_hash","module","inherits","K","W","Sha1","init","_w","rotl5","num","rotl30","ft","d","_b","_c","_d","_e","M","readInt32BE","j","t","H","allocUnsafe","writeInt32BE"],"sourceRoot":""}