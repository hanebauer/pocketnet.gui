{"version":3,"file":"636.chunk.js?v=9575","mappings":"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","sources":["webpack://peertube-client/./src/assets/player/shared/webtorrent/peertube-chunk-store.ts","webpack://peertube-client/./src/assets/player/shared/webtorrent/video-renderer.ts","webpack://peertube-client/./src/assets/player/shared/webtorrent/webtorrent-plugin.ts","webpack://peertube-client/./src/shims/http.ts","webpack://peertube-client/./src/shims/https.ts","webpack://peertube-client/./src/shims/noop.ts","webpack://peertube-client/./src/shims/stream.ts"],"sourcesContent":["// From https://github.com/MinEduTDF/idb-chunk-store\n// We use temporary IndexDB (all data are removed on destroy) to avoid RAM issues\n// Thanks @santiagogil and @Feross\n\nimport Dexie from 'dexie'\nimport { EventEmitter } from 'events'\nimport { logger } from '@root-helpers/logger'\n\nclass ChunkDatabase extends Dexie {\n  chunks: Dexie.Table<{ id: number, buf: Buffer }, number>\n\n  constructor (dbname: string) {\n    super(dbname)\n\n    this.version(1).stores({\n      chunks: 'id'\n    })\n  }\n}\n\nclass ExpirationDatabase extends Dexie {\n  databases: Dexie.Table<{ name: string, expiration: number }, number>\n\n  constructor () {\n    super('webtorrent-expiration')\n\n    this.version(1).stores({\n      databases: 'name,expiration'\n    })\n  }\n}\n\nexport class PeertubeChunkStore extends EventEmitter {\n  private static readonly BUFFERING_PUT_MS = 1000\n  private static readonly CLEANER_INTERVAL_MS = 1000 * 60 // 1 minute\n  private static readonly CLEANER_EXPIRATION_MS = 1000 * 60 * 5 // 5 minutes\n\n  chunkLength: number\n\n  private pendingPut: { id: number, buf: Buffer, cb: (err?: Error) => void }[] = []\n  // If the store is full\n  private memoryChunks: { [ id: number ]: Buffer | true } = {}\n  private databaseName: string\n  private putBulkTimeout: any\n  private cleanerInterval: any\n  private db: ChunkDatabase\n  private expirationDB: ExpirationDatabase\n  private readonly length: number\n  private readonly lastChunkLength: number\n  private readonly lastChunkIndex: number\n\n  constructor (chunkLength: number, opts: any) {\n    super()\n\n    this.databaseName = 'webtorrent-chunks-'\n\n    if (!opts) opts = {}\n    if (opts.torrent?.infoHash) this.databaseName += opts.torrent.infoHash\n    else this.databaseName += '-default'\n\n    this.setMaxListeners(100)\n\n    this.chunkLength = Number(chunkLength)\n    if (!this.chunkLength) throw new Error('First argument must be a chunk length')\n\n    this.length = Number(opts.length) || Infinity\n\n    if (this.length !== Infinity) {\n      this.lastChunkLength = (this.length % this.chunkLength) || this.chunkLength\n      this.lastChunkIndex = Math.ceil(this.length / this.chunkLength) - 1\n    }\n\n    this.db = new ChunkDatabase(this.databaseName)\n    // Track databases that expired\n    this.expirationDB = new ExpirationDatabase()\n\n    this.runCleaner()\n  }\n\n  put (index: number, buf: Buffer, cb: (err?: Error) => void) {\n    const isLastChunk = (index === this.lastChunkIndex)\n    if (isLastChunk && buf.length !== this.lastChunkLength) {\n      return this.nextTick(cb, new Error('Last chunk length must be ' + this.lastChunkLength))\n    }\n    if (!isLastChunk && buf.length !== this.chunkLength) {\n      return this.nextTick(cb, new Error('Chunk length must be ' + this.chunkLength))\n    }\n\n    // Specify we have this chunk\n    this.memoryChunks[index] = true\n\n    // Add it to the pending put\n    this.pendingPut.push({ id: index, buf, cb })\n    // If it's already planned, return\n    if (this.putBulkTimeout) return\n\n    // Plan a future bulk insert\n    this.putBulkTimeout = setTimeout(async () => {\n      const processing = this.pendingPut\n      this.pendingPut = []\n      this.putBulkTimeout = undefined\n\n      try {\n        await this.db.transaction('rw', this.db.chunks, () => {\n          return this.db.chunks.bulkPut(processing.map(p => ({ id: p.id, buf: p.buf })))\n        })\n      } catch (err) {\n        logger.info('Cannot bulk insert chunks. Store them in memory.', err)\n\n        processing.forEach(p => {\n          this.memoryChunks[p.id] = p.buf\n        })\n      } finally {\n        processing.forEach(p => p.cb())\n      }\n    }, PeertubeChunkStore.BUFFERING_PUT_MS)\n  }\n\n  get (index: number, opts: any, cb: (err?: Error, buf?: Buffer) => void): void {\n    if (typeof opts === 'function') return this.get(index, null, opts)\n\n    // IndexDB could be slow, use our memory index first\n    const memoryChunk = this.memoryChunks[index]\n    if (memoryChunk === undefined) {\n      const err = new Error('Chunk not found') as any\n      err['notFound'] = true\n\n      return process.nextTick(() => cb(err))\n    }\n\n    // Chunk in memory\n    if (memoryChunk !== true) return cb(null, memoryChunk)\n\n    // Chunk in store\n    this.db.transaction('r', this.db.chunks, async () => {\n      const result = await this.db.chunks.get({ id: index })\n      if (result === undefined) return cb(null, Buffer.alloc(0))\n\n      const buf = result.buf\n      if (!opts) return this.nextTick(cb, null, buf)\n\n      const offset = opts.offset || 0\n      const len = opts.length || (buf.length - offset)\n      return cb(null, buf.slice(offset, len + offset))\n    })\n    .catch(err => {\n      logger.error(err)\n      return cb(err)\n    })\n  }\n\n  close (cb: (err?: Error) => void) {\n    return this.destroy(cb)\n  }\n\n  async destroy (cb: (err?: Error) => void) {\n    try {\n      if (this.pendingPut) {\n        clearTimeout(this.putBulkTimeout)\n        this.pendingPut = null\n      }\n      if (this.cleanerInterval) {\n        clearInterval(this.cleanerInterval)\n        this.cleanerInterval = null\n      }\n\n      if (this.db) {\n        this.db.close()\n\n        await this.dropDatabase(this.databaseName)\n      }\n\n      if (this.expirationDB) {\n        this.expirationDB.close()\n        this.expirationDB = null\n      }\n\n      return cb()\n    } catch (err) {\n      logger.error('Cannot destroy peertube chunk store.', err)\n      return cb(err)\n    }\n  }\n\n  private runCleaner () {\n    this.checkExpiration()\n\n    this.cleanerInterval = setInterval(() => {\n      this.checkExpiration()\n    }, PeertubeChunkStore.CLEANER_INTERVAL_MS)\n  }\n\n  private async checkExpiration () {\n    let databasesToDeleteInfo: { name: string }[] = []\n\n    try {\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, async () => {\n        // Update our database expiration since we are alive\n        await this.expirationDB.databases.put({\n          name: this.databaseName,\n          expiration: new Date().getTime() + PeertubeChunkStore.CLEANER_EXPIRATION_MS\n        })\n\n        const now = new Date().getTime()\n        databasesToDeleteInfo = await this.expirationDB.databases.where('expiration').below(now).toArray()\n      })\n    } catch (err) {\n      logger.error('Cannot update expiration of fetch expired databases.', err)\n    }\n\n    for (const databaseToDeleteInfo of databasesToDeleteInfo) {\n      await this.dropDatabase(databaseToDeleteInfo.name)\n    }\n  }\n\n  private async dropDatabase (databaseName: string) {\n    const dbToDelete = new ChunkDatabase(databaseName)\n    logger.info(`Destroying IndexDB database ${databaseName}`)\n\n    try {\n      await dbToDelete.delete()\n\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, () => {\n        return this.expirationDB.databases.where({ name: databaseName }).delete()\n      })\n    } catch (err) {\n      logger.error(`Cannot delete ${databaseName}.`, err)\n    }\n  }\n\n  private nextTick <T> (cb: (err?: Error, val?: T) => void, err: Error, val?: T) {\n    process.nextTick(() => cb(err, val), undefined)\n  }\n}\n","// Thanks: https://github.com/feross/render-media\n\nconst MediaElementWrapper = require('mediasource')\nimport { logger } from '@root-helpers/logger'\nimport { extname } from 'path'\nconst Videostream = require('videostream')\n\nconst VIDEOSTREAM_EXTS = [\n  '.m4a',\n  '.m4v',\n  '.mp4'\n]\n\ntype RenderMediaOptions = {\n  controls: boolean\n  autoplay: boolean\n}\n\nfunction renderVideo (\n  file: any,\n  elem: HTMLVideoElement,\n  opts: RenderMediaOptions,\n  callback: (err: Error, renderer: any) => void\n) {\n  validateFile(file)\n\n  return renderMedia(file, elem, opts, callback)\n}\n\nfunction renderMedia (file: any, elem: HTMLVideoElement, opts: RenderMediaOptions, callback: (err: Error, renderer?: any) => void) {\n  const extension = extname(file.name).toLowerCase()\n  let preparedElem: any\n  let currentTime = 0\n  let renderer: any\n\n  try {\n    if (VIDEOSTREAM_EXTS.includes(extension)) {\n      renderer = useVideostream()\n    } else {\n      renderer = useMediaSource()\n    }\n  } catch (err) {\n    return callback(err)\n  }\n\n  function useVideostream () {\n    prepareElem()\n    preparedElem.addEventListener('error', function onError (err: Error) {\n      preparedElem.removeEventListener('error', onError)\n\n      return callback(err)\n    })\n    preparedElem.addEventListener('loadstart', onLoadStart)\n    return new Videostream(file, preparedElem)\n  }\n\n  function useMediaSource (useVP9 = false) {\n    const codecs = getCodec(file.name, useVP9)\n\n    prepareElem()\n    preparedElem.addEventListener('error', function onError (err: Error) {\n      preparedElem.removeEventListener('error', onError)\n\n      // Try with vp9 before returning an error\n      if (codecs.includes('vp8')) return fallbackToMediaSource(true)\n\n      return callback(err)\n    })\n    preparedElem.addEventListener('loadstart', onLoadStart)\n\n    const wrapper = new MediaElementWrapper(preparedElem)\n    const writable = wrapper.createWriteStream(codecs)\n    file.createReadStream().pipe(writable)\n\n    if (currentTime) preparedElem.currentTime = currentTime\n\n    return wrapper\n  }\n\n  function fallbackToMediaSource (useVP9 = false) {\n    if (useVP9 === true) logger.info('Falling back to media source with VP9 enabled.')\n    else logger.info('Falling back to media source..')\n\n    useMediaSource(useVP9)\n  }\n\n  function prepareElem () {\n    if (preparedElem === undefined) {\n      preparedElem = elem\n\n      preparedElem.addEventListener('progress', function () {\n        currentTime = elem.currentTime\n      })\n    }\n  }\n\n  function onLoadStart () {\n    preparedElem.removeEventListener('loadstart', onLoadStart)\n    if (opts.autoplay) preparedElem.play()\n\n    callback(null, renderer)\n  }\n}\n\nfunction validateFile (file: any) {\n  if (file == null) {\n    throw new Error('file cannot be null or undefined')\n  }\n  if (typeof file.name !== 'string') {\n    throw new Error('missing or invalid file.name property')\n  }\n  if (typeof file.createReadStream !== 'function') {\n    throw new Error('missing or invalid file.createReadStream property')\n  }\n}\n\nfunction getCodec (name: string, useVP9 = false) {\n  const ext = extname(name).toLowerCase()\n  if (ext === '.mp4') {\n    return 'video/mp4; codecs=\"avc1.640029, mp4a.40.5\"'\n  }\n\n  if (ext === '.webm') {\n    if (useVP9 === true) return 'video/webm; codecs=\"vp9, opus\"'\n\n    return 'video/webm; codecs=\"vp8, vorbis\"'\n  }\n\n  return undefined\n}\n\nexport {\n  renderVideo\n}\n","import videojs from 'video.js'\nimport * as WebTorrent from 'webtorrent'\nimport { logger } from '@root-helpers/logger'\nimport { isIOS } from '@root-helpers/web-browser'\nimport { timeToInt } from '@shared/core-utils'\nimport { VideoFile } from '@shared/models'\nimport { getAverageBandwidthInStore, getStoredMute, getStoredVolume, saveAverageBandwidth } from '../../peertube-player-local-storage'\nimport { PeerTubeResolution, PlayerNetworkInfo, WebtorrentPluginOptions } from '../../types'\nimport { getRtcConfig, videoFileMaxByResolution, videoFileMinByResolution } from '../common'\nimport { PeertubeChunkStore } from './peertube-chunk-store'\nimport { renderVideo } from './video-renderer'\n\nconst CacheChunkStore = require('cache-chunk-store')\n\ntype PlayOptions = {\n  forcePlay?: boolean\n  seek?: number\n  delay?: number\n}\n\nconst Plugin = videojs.getPlugin('plugin')\n\nclass WebTorrentPlugin extends Plugin {\n  readonly videoFiles: VideoFile[]\n\n  private readonly playerElement: HTMLVideoElement\n\n  private readonly autoplay: boolean = false\n  private readonly startTime: number = 0\n  private readonly savePlayerSrcFunction: videojs.Player['src']\n  private readonly videoDuration: number\n  private readonly CONSTANTS = {\n    INFO_SCHEDULER: 1000, // Don't change this\n    AUTO_QUALITY_SCHEDULER: 3000, // Check quality every 3 seconds\n    AUTO_QUALITY_THRESHOLD_PERCENT: 30, // Bandwidth should be 30% more important than a resolution bitrate to change to it\n    AUTO_QUALITY_OBSERVATION_TIME: 10000, // Wait 10 seconds after having change the resolution before another check\n    AUTO_QUALITY_HIGHER_RESOLUTION_DELAY: 5000, // Buffering higher resolution during 5 seconds\n    BANDWIDTH_AVERAGE_NUMBER_OF_VALUES: 5 // Last 5 seconds to build average bandwidth\n  }\n\n  private readonly webtorrent = new WebTorrent({\n    tracker: {\n      rtcConfig: getRtcConfig()\n    },\n    dht: false\n  })\n\n  private currentVideoFile: VideoFile\n  private torrent: WebTorrent.Torrent\n\n  private renderer: any\n  private fakeRenderer: any\n  private destroyingFakeRenderer = false\n\n  private autoResolution = true\n  private autoResolutionPossible = true\n  private isAutoResolutionObservation = false\n  private playerRefusedP2P = false\n\n  private torrentInfoInterval: any\n  private autoQualityInterval: any\n  private addTorrentDelay: any\n  private qualityObservationTimer: any\n  private runAutoQualitySchedulerTimer: any\n\n  private downloadSpeeds: number[] = []\n\n  constructor (player: videojs.Player, options?: WebtorrentPluginOptions) {\n    super(player)\n\n    this.startTime = timeToInt(options.startTime)\n\n    // Custom autoplay handled by webtorrent because we lazy play the video\n    this.autoplay = options.autoplay\n\n    this.playerRefusedP2P = options.playerRefusedP2P\n\n    this.videoFiles = options.videoFiles\n    this.videoDuration = options.videoDuration\n\n    this.savePlayerSrcFunction = this.player.src\n    this.playerElement = options.playerElement\n\n    this.player.ready(() => {\n      const playerOptions = this.player.options_\n\n      const volume = getStoredVolume()\n      if (volume !== undefined) this.player.volume(volume)\n\n      const muted = playerOptions.muted !== undefined ? playerOptions.muted : getStoredMute()\n      if (muted !== undefined) this.player.muted(muted)\n\n      this.player.duration(options.videoDuration)\n\n      this.initializePlayer()\n      this.runTorrentInfoScheduler()\n\n      this.player.one('play', () => {\n        // Don't run immediately scheduler, wait some seconds the TCP connections are made\n        this.runAutoQualitySchedulerTimer = setTimeout(() => this.runAutoQualityScheduler(), this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\n      })\n    })\n  }\n\n  dispose () {\n    clearTimeout(this.addTorrentDelay)\n    clearTimeout(this.qualityObservationTimer)\n    clearTimeout(this.runAutoQualitySchedulerTimer)\n\n    clearInterval(this.torrentInfoInterval)\n    clearInterval(this.autoQualityInterval)\n\n    // Don't need to destroy renderer, video player will be destroyed\n    this.flushVideoFile(this.currentVideoFile, false)\n\n    this.destroyFakeRenderer()\n  }\n\n  getCurrentResolutionId () {\n    return this.currentVideoFile ? this.currentVideoFile.resolution.id : -1\n  }\n\n  updateVideoFile (\n    videoFile?: VideoFile,\n    options: {\n      forcePlay?: boolean\n      seek?: number\n      delay?: number\n    } = {},\n    done: () => void = () => { /* empty */ }\n  ) {\n    // Automatically choose the adapted video file\n    if (!videoFile) {\n      const savedAverageBandwidth = getAverageBandwidthInStore()\n      videoFile = savedAverageBandwidth\n        ? this.getAppropriateFile(savedAverageBandwidth)\n        : this.pickAverageVideoFile()\n    }\n\n    if (!videoFile) {\n      throw Error(`Can't update video file since videoFile is undefined.`)\n    }\n\n    // Don't add the same video file once again\n    if (this.currentVideoFile !== undefined && this.currentVideoFile.magnetUri === videoFile.magnetUri) {\n      return\n    }\n\n    // Do not display error to user because we will have multiple fallback\n    this.player.peertube().hideFatalError();\n\n    // Hack to \"simulate\" src link in video.js >= 6\n    // Without this, we can't play the video after pausing it\n    // https://github.com/videojs/video.js/blob/master/src/js/player.js#L1633\n    (this.player as any).src = () => true\n    const oldPlaybackRate = this.player.playbackRate()\n\n    const previousVideoFile = this.currentVideoFile\n    this.currentVideoFile = videoFile\n\n    // Don't try on iOS that does not support MediaSource\n    // Or don't use P2P if webtorrent is disabled\n    if (isIOS() || this.playerRefusedP2P) {\n      return this.fallbackToHttp(options, () => {\n        this.player.playbackRate(oldPlaybackRate)\n        return done()\n      })\n    }\n\n    this.addTorrent(this.currentVideoFile.magnetUri, previousVideoFile, options, () => {\n      this.player.playbackRate(oldPlaybackRate)\n      return done()\n    })\n\n    this.selectAppropriateResolution(true)\n  }\n\n  updateEngineResolution (resolutionId: number, delay = 0) {\n    // Remember player state\n    const currentTime = this.player.currentTime()\n    const isPaused = this.player.paused()\n\n    // Hide bigPlayButton\n    if (!isPaused) {\n      this.player.bigPlayButton.hide()\n    }\n\n    // Audio-only (resolutionId === 0) gets special treatment\n    if (resolutionId === 0) {\n      // Audio-only: show poster, do not auto-hide controls\n      this.player.addClass('vjs-playing-audio-only-content')\n      this.player.posterImage.show()\n    } else {\n      // Hide poster to have black background\n      this.player.removeClass('vjs-playing-audio-only-content')\n      this.player.posterImage.hide()\n    }\n\n    const newVideoFile = this.videoFiles.find(f => f.resolution.id === resolutionId)\n    const options = {\n      forcePlay: false,\n      delay,\n      seek: currentTime + (delay / 1000)\n    }\n\n    this.updateVideoFile(newVideoFile, options)\n  }\n\n  flushVideoFile (videoFile: VideoFile, destroyRenderer = true) {\n    if (videoFile !== undefined && this.webtorrent.get(videoFile.magnetUri)) {\n      if (destroyRenderer === true && this.renderer && this.renderer.destroy) this.renderer.destroy()\n\n      this.webtorrent.remove(videoFile.magnetUri)\n      logger.info(`Removed ${videoFile.magnetUri}`)\n    }\n  }\n\n  disableAutoResolution () {\n    this.autoResolution = false\n    this.autoResolutionPossible = false\n    this.player.peertubeResolutions().disableAutoResolution()\n  }\n\n  isAutoResolutionPossible () {\n    return this.autoResolutionPossible\n  }\n\n  getTorrent () {\n    return this.torrent\n  }\n\n  getCurrentVideoFile () {\n    return this.currentVideoFile\n  }\n\n  changeQuality (id: number) {\n    if (id === -1) {\n      if (this.autoResolutionPossible === true) {\n        this.autoResolution = true\n\n        this.selectAppropriateResolution(false)\n      }\n\n      return\n    }\n\n    this.autoResolution = false\n    this.updateEngineResolution(id)\n    this.selectAppropriateResolution(false)\n  }\n\n  private addTorrent (\n    magnetOrTorrentUrl: string,\n    previousVideoFile: VideoFile,\n    options: PlayOptions,\n    done: (err?: Error) => void\n  ) {\n    if (!magnetOrTorrentUrl) return this.fallbackToHttp(options, done)\n\n    logger.info(`Adding ${magnetOrTorrentUrl}.`)\n\n    const oldTorrent = this.torrent\n    const torrentOptions = {\n      // Don't use arrow function: it breaks webtorrent (that uses `new` keyword)\n      store: function (chunkLength: number, storeOpts: any) {\n        return new CacheChunkStore(new PeertubeChunkStore(chunkLength, storeOpts), {\n          max: 100\n        })\n      }\n    }\n\n    this.torrent = this.webtorrent.add(magnetOrTorrentUrl, torrentOptions, torrent => {\n      logger.info(`Added ${magnetOrTorrentUrl}.`)\n\n      if (oldTorrent) {\n        // Pause the old torrent\n        this.stopTorrent(oldTorrent)\n\n        // We use a fake renderer so we download correct pieces of the next file\n        if (options.delay) this.renderFileInFakeElement(torrent.files[0], options.delay)\n      }\n\n      // Render the video in a few seconds? (on resolution change for example, we wait some seconds of the new video resolution)\n      this.addTorrentDelay = setTimeout(() => {\n        // We don't need the fake renderer anymore\n        this.destroyFakeRenderer()\n\n        const paused = this.player.paused()\n\n        this.flushVideoFile(previousVideoFile)\n\n        // Update progress bar (just for the UI), do not wait rendering\n        if (options.seek) this.player.currentTime(options.seek)\n\n        const renderVideoOptions = { autoplay: false, controls: true }\n        renderVideo(torrent.files[0], this.playerElement, renderVideoOptions, (err, renderer) => {\n          this.renderer = renderer\n\n          if (err) return this.fallbackToHttp(options, done)\n\n          return this.tryToPlay(err => {\n            if (err) return done(err)\n\n            if (options.seek) this.seek(options.seek)\n            if (options.forcePlay === false && paused === true) this.player.pause()\n\n            return done()\n          })\n        })\n      }, options.delay || 0)\n    })\n\n    this.torrent.on('error', (err: any) => logger.error(err))\n\n    this.torrent.on('warning', (err: any) => {\n      // We don't support HTTP tracker but we don't care -> we use the web socket tracker\n      if (err.message.indexOf('Unsupported tracker protocol') !== -1) return\n\n      // Users don't care about issues with WebRTC, but developers do so log it in the console\n      if (err.message.indexOf('Ice connection failed') !== -1) {\n        logger.info(err)\n        return\n      }\n\n      // Magnet hash is not up to date with the torrent file, add directly the torrent file\n      if (err.message.indexOf('incorrect info hash') !== -1) {\n        logger.error('Incorrect info hash detected, falling back to torrent file.')\n        const newOptions = { forcePlay: true, seek: options.seek }\n        return this.addTorrent(this.torrent['xs'], previousVideoFile, newOptions, done)\n      }\n\n      // Remote instance is down\n      if (err.message.indexOf('from xs param') !== -1) {\n        this.handleError(err)\n      }\n\n      logger.warn(err)\n    })\n  }\n\n  private tryToPlay (done?: (err?: Error) => void) {\n    if (!done) done = function () { /* empty */ }\n\n    const playPromise = this.player.play()\n    if (playPromise !== undefined) {\n      return playPromise.then(() => done())\n                        .catch((err: Error) => {\n                          if (err.message.includes('The play() request was interrupted by a call to pause()')) {\n                            return\n                          }\n\n                          logger.warn(err)\n                          this.player.pause()\n                          this.player.posterImage.show()\n                          this.player.removeClass('vjs-has-autoplay')\n                          this.player.removeClass('vjs-has-big-play-button-clicked')\n                          this.player.removeClass('vjs-playing-audio-only-content')\n\n                          return done()\n                        })\n    }\n\n    return done()\n  }\n\n  private seek (time: number) {\n    this.player.currentTime(time)\n    this.player.handleTechSeeked_()\n  }\n\n  private getAppropriateFile (averageDownloadSpeed?: number): VideoFile {\n    if (this.videoFiles === undefined) return undefined\n    if (this.videoFiles.length === 1) return this.videoFiles[0]\n\n    const files = this.videoFiles.filter(f => f.resolution.id !== 0)\n    if (files.length === 0) return undefined\n\n    // Don't change the torrent if the player ended\n    if (this.torrent && this.torrent.progress === 1 && this.player.ended()) return this.currentVideoFile\n\n    if (!averageDownloadSpeed) averageDownloadSpeed = this.getAndSaveActualDownloadSpeed()\n\n    // Limit resolution according to player height\n    const playerHeight = this.playerElement.offsetHeight\n\n    // We take the first resolution just above the player height\n    // Example: player height is 530px, we want the 720p file instead of 480p\n    let maxResolution = files[0].resolution.id\n    for (let i = files.length - 1; i >= 0; i--) {\n      const resolutionId = files[i].resolution.id\n      if (resolutionId !== 0 && resolutionId >= playerHeight) {\n        maxResolution = resolutionId\n        break\n      }\n    }\n\n    // Filter videos we can play according to our screen resolution and bandwidth\n    const filteredFiles = files.filter(f => f.resolution.id <= maxResolution)\n                               .filter(f => {\n                                 const fileBitrate = (f.size / this.videoDuration)\n                                 let threshold = fileBitrate\n\n                                 // If this is for a higher resolution or an initial load: add a margin\n                                 if (!this.currentVideoFile || f.resolution.id > this.currentVideoFile.resolution.id) {\n                                   threshold += ((fileBitrate * this.CONSTANTS.AUTO_QUALITY_THRESHOLD_PERCENT) / 100)\n                                 }\n\n                                 return averageDownloadSpeed > threshold\n                               })\n\n    // If the download speed is too bad, return the lowest resolution we have\n    if (filteredFiles.length === 0) return videoFileMinByResolution(files)\n\n    return videoFileMaxByResolution(filteredFiles)\n  }\n\n  private getAndSaveActualDownloadSpeed () {\n    const start = Math.max(this.downloadSpeeds.length - this.CONSTANTS.BANDWIDTH_AVERAGE_NUMBER_OF_VALUES, 0)\n    const lastDownloadSpeeds = this.downloadSpeeds.slice(start, this.downloadSpeeds.length)\n    if (lastDownloadSpeeds.length === 0) return -1\n\n    const sum = lastDownloadSpeeds.reduce((a, b) => a + b)\n    const averageBandwidth = Math.round(sum / lastDownloadSpeeds.length)\n\n    // Save the average bandwidth for future use\n    saveAverageBandwidth(averageBandwidth)\n\n    return averageBandwidth\n  }\n\n  private initializePlayer () {\n    this.buildQualities()\n\n    if (this.videoFiles.length === 0) {\n      this.player.addClass('disabled')\n      return\n    }\n\n    if (this.autoplay) {\n      this.player.posterImage.hide()\n\n      return this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\n    }\n\n    // Proxy first play\n    const oldPlay = this.player.play.bind(this.player);\n    (this.player as any).play = () => {\n      this.player.addClass('vjs-has-big-play-button-clicked')\n      this.player.play = oldPlay\n\n      this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\n    }\n  }\n\n  private runAutoQualityScheduler () {\n    this.autoQualityInterval = setInterval(() => {\n\n      // Not initialized or in HTTP fallback\n      if (this.torrent === undefined || this.torrent === null) return\n      if (this.autoResolution === false) return\n      if (this.isAutoResolutionObservation === true) return\n\n      const file = this.getAppropriateFile()\n      let changeResolution = false\n      let changeResolutionDelay = 0\n\n      // Lower resolution\n      if (this.isPlayerWaiting() && file.resolution.id < this.currentVideoFile.resolution.id) {\n        logger.info(`Downgrading automatically the resolution to: ${file.resolution.label}`)\n        changeResolution = true\n      } else if (file.resolution.id > this.currentVideoFile.resolution.id) { // Higher resolution\n        logger.info(`Upgrading automatically the resolution to: ${file.resolution.label}`)\n        changeResolution = true\n        changeResolutionDelay = this.CONSTANTS.AUTO_QUALITY_HIGHER_RESOLUTION_DELAY\n      }\n\n      if (changeResolution === true) {\n        this.updateEngineResolution(file.resolution.id, changeResolutionDelay)\n\n        // Wait some seconds in observation of our new resolution\n        this.isAutoResolutionObservation = true\n\n        this.qualityObservationTimer = setTimeout(() => {\n          this.isAutoResolutionObservation = false\n        }, this.CONSTANTS.AUTO_QUALITY_OBSERVATION_TIME)\n      }\n    }, this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\n  }\n\n  private isPlayerWaiting () {\n    return this.player?.hasClass('vjs-waiting')\n  }\n\n  private runTorrentInfoScheduler () {\n    this.torrentInfoInterval = setInterval(() => {\n      // Not initialized yet\n      if (this.torrent === undefined) return\n\n      // Http fallback\n      if (this.torrent === null) return this.player.trigger('p2pInfo', false)\n\n      // this.webtorrent.downloadSpeed because we need to take into account the potential old torrent too\n      if (this.webtorrent.downloadSpeed !== 0) this.downloadSpeeds.push(this.webtorrent.downloadSpeed)\n\n      return this.player.trigger('p2pInfo', {\n        source: 'webtorrent',\n        http: {\n          downloadSpeed: 0,\n          uploadSpeed: 0,\n          downloaded: 0,\n          uploaded: 0\n        },\n        p2p: {\n          downloadSpeed: this.torrent.downloadSpeed,\n          numPeers: this.torrent.numPeers,\n          uploadSpeed: this.torrent.uploadSpeed,\n          downloaded: this.torrent.downloaded,\n          uploaded: this.torrent.uploaded\n        },\n        bandwidthEstimate: this.webtorrent.downloadSpeed\n      } as PlayerNetworkInfo)\n    }, this.CONSTANTS.INFO_SCHEDULER)\n  }\n\n  private fallbackToHttp (options: PlayOptions, done?: (err?: Error) => void) {\n    const paused = this.player.paused()\n\n    this.disableAutoResolution()\n\n    this.flushVideoFile(this.currentVideoFile, true)\n    this.torrent = null\n\n    // Enable error display now this is our last fallback\n    this.player.one('error', () => this.player.peertube().displayFatalError())\n\n    const httpUrl = this.currentVideoFile.fileUrl\n    this.player.src = this.savePlayerSrcFunction\n    this.player.src(httpUrl)\n\n    this.selectAppropriateResolution(true)\n\n    // We changed the source, so reinit captions\n    this.player.trigger('sourcechange')\n\n    return this.tryToPlay(err => {\n      if (err && done) return done(err)\n\n      if (options.seek) this.seek(options.seek)\n      if (options.forcePlay === false && paused === true) this.player.pause()\n\n      if (done) return done()\n    })\n  }\n\n  private handleError (err: Error | string) {\n    return this.player.trigger('customError', { err })\n  }\n\n  private pickAverageVideoFile () {\n    if (this.videoFiles.length === 1) return this.videoFiles[0]\n\n    const files = this.videoFiles.filter(f => f.resolution.id !== 0)\n    return files[Math.floor(files.length / 2)]\n  }\n\n  private stopTorrent (torrent: WebTorrent.Torrent) {\n    torrent.pause()\n    // Pause does not remove actual peers (in particular the webseed peer)\n    torrent.removePeer(torrent['ws'])\n  }\n\n  private renderFileInFakeElement (file: WebTorrent.TorrentFile, delay: number) {\n    this.destroyingFakeRenderer = false\n\n    const fakeVideoElem = document.createElement('video')\n    renderVideo(file, fakeVideoElem, { autoplay: false, controls: false }, (err, renderer) => {\n      this.fakeRenderer = renderer\n\n      // The renderer returns an error when we destroy it, so skip them\n      if (this.destroyingFakeRenderer === false && err) {\n        logger.error('Cannot render new torrent in fake video element.', err)\n      }\n\n      // Load the future file at the correct time (in delay MS - 2 seconds)\n      fakeVideoElem.currentTime = this.player.currentTime() + (delay - 2000)\n    })\n  }\n\n  private destroyFakeRenderer () {\n    if (this.fakeRenderer) {\n      this.destroyingFakeRenderer = true\n\n      if (this.fakeRenderer.destroy) {\n        try {\n          this.fakeRenderer.destroy()\n        } catch (err) {\n          logger.info('Cannot destroy correctly fake renderer.', err)\n        }\n      }\n      this.fakeRenderer = undefined\n    }\n  }\n\n  private buildQualities () {\n    const resolutions: PeerTubeResolution[] = this.videoFiles.map(file => ({\n      id: file.resolution.id,\n      label: this.buildQualityLabel(file),\n      height: file.resolution.id,\n      selected: false,\n      selectCallback: () => this.changeQuality(file.resolution.id)\n    }))\n\n    resolutions.push({\n      id: -1,\n      label: this.player.localize('Auto'),\n      selected: true,\n      selectCallback: () => this.changeQuality(-1)\n    })\n\n    this.player.peertubeResolutions().add(resolutions)\n  }\n\n  private buildQualityLabel (file: VideoFile) {\n    let label = file.resolution.label\n\n    if (file.fps && file.fps >= 50) {\n      label += file.fps\n    }\n\n    return label\n  }\n\n  private selectAppropriateResolution (byEngine: boolean) {\n    const resolution = this.autoResolution\n      ? -1\n      : this.getCurrentResolutionId()\n\n    const autoResolutionChosen = this.autoResolution\n      ? this.getCurrentResolutionId()\n      : undefined\n\n    this.player.peertubeResolutions().select({ id: resolution, autoResolutionChosenId: autoResolutionChosen, byEngine })\n  }\n}\n\nvideojs.registerPlugin('webtorrent', WebTorrentPlugin)\nexport { WebTorrentPlugin }\n","module.exports = require('stream-http')\n","module.exports = require('https-browserify')\n","// Does nothing. Used to shim out node.js modules\n// which are no-ops in the browser.\nexport const NOOP = 0\n","module.exports = require('stream-browserify')\n"],"names":["ChunkDatabase","constructor","dbname","super","this","version","stores","chunks","ExpirationDatabase","databases","PeertubeChunkStore","EventEmitter","chunkLength","opts","pendingPut","memoryChunks","databaseName","torrent","infoHash","setMaxListeners","Number","Error","length","Infinity","lastChunkLength","lastChunkIndex","Math","ceil","db","expirationDB","runCleaner","put","index","buf","cb","isLastChunk","nextTick","push","id","putBulkTimeout","setTimeout","async","processing","undefined","transaction","bulkPut","map","p","err","logger","forEach","BUFFERING_PUT_MS","get","memoryChunk","process","result","Buffer","alloc","offset","slice","catch","close","destroy","clearTimeout","cleanerInterval","clearInterval","dropDatabase","checkExpiration","setInterval","CLEANER_INTERVAL_MS","databasesToDeleteInfo","name","expiration","Date","getTime","CLEANER_EXPIRATION_MS","now","where","below","toArray","databaseToDeleteInfo","dbToDelete","delete","val","MediaElementWrapper","Videostream","VIDEOSTREAM_EXTS","renderVideo","file","elem","callback","createReadStream","validateFile","extension","extname","toLowerCase","preparedElem","renderer","currentTime","includes","prepareElem","addEventListener","onError","removeEventListener","onLoadStart","useMediaSource","useVP9","codecs","ext","getCodec","fallbackToMediaSource","wrapper","writable","createWriteStream","pipe","autoplay","play","renderMedia","CacheChunkStore","Plugin","WebTorrentPlugin","player","options","startTime","CONSTANTS","INFO_SCHEDULER","AUTO_QUALITY_SCHEDULER","AUTO_QUALITY_THRESHOLD_PERCENT","AUTO_QUALITY_OBSERVATION_TIME","AUTO_QUALITY_HIGHER_RESOLUTION_DELAY","BANDWIDTH_AVERAGE_NUMBER_OF_VALUES","webtorrent","tracker","rtcConfig","dht","destroyingFakeRenderer","autoResolution","autoResolutionPossible","isAutoResolutionObservation","playerRefusedP2P","downloadSpeeds","videoFiles","videoDuration","savePlayerSrcFunction","src","playerElement","ready","playerOptions","options_","volume","muted","duration","initializePlayer","runTorrentInfoScheduler","one","runAutoQualitySchedulerTimer","runAutoQualityScheduler","dispose","addTorrentDelay","qualityObservationTimer","torrentInfoInterval","autoQualityInterval","flushVideoFile","currentVideoFile","destroyFakeRenderer","getCurrentResolutionId","resolution","updateVideoFile","videoFile","done","savedAverageBandwidth","getAppropriateFile","pickAverageVideoFile","magnetUri","peertube","hideFatalError","oldPlaybackRate","playbackRate","previousVideoFile","fallbackToHttp","addTorrent","selectAppropriateResolution","updateEngineResolution","resolutionId","delay","paused","bigPlayButton","hide","addClass","posterImage","show","removeClass","newVideoFile","find","f","forcePlay","seek","destroyRenderer","remove","disableAutoResolution","peertubeResolutions","isAutoResolutionPossible","getTorrent","getCurrentVideoFile","changeQuality","magnetOrTorrentUrl","oldTorrent","add","store","storeOpts","max","stopTorrent","renderFileInFakeElement","files","controls","tryToPlay","pause","on","message","indexOf","handleError","playPromise","then","time","handleTechSeeked_","averageDownloadSpeed","filter","progress","ended","getAndSaveActualDownloadSpeed","playerHeight","offsetHeight","maxResolution","i","filteredFiles","fileBitrate","size","threshold","start","lastDownloadSpeeds","sum","reduce","a","b","averageBandwidth","round","buildQualities","oldPlay","bind","changeResolution","changeResolutionDelay","isPlayerWaiting","label","hasClass","trigger","downloadSpeed","source","http","uploadSpeed","downloaded","uploaded","p2p","numPeers","bandwidthEstimate","displayFatalError","httpUrl","fileUrl","floor","removePeer","fakeVideoElem","document","createElement","fakeRenderer","resolutions","buildQualityLabel","height","selected","selectCallback","localize","fps","byEngine","autoResolutionChosen","select","autoResolutionChosenId","module","exports","NOOP"],"sourceRoot":""}